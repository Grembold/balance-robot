   1               		.file	"main.c"
   2               		.arch atmega16
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  84               		.data
  85               	.LC0:
  86 0000 2055 4152 		.string	" UART inizialisierung ... OK \n\r\n\r"
  86      5420 696E 
  86      697A 6961 
  86      6C69 7369 
  86      6572 756E 
  87               	.LC1:
  88 0022 2A20 4472 		.string	"* Drehzahl1\r\n* Mit hilfe dieses Programmes soll die Drehzal \r\n"
  88      6568 7A61 
  88      686C 310D 
  88      0A2A 204D 
  88      6974 2068 
  89               	.LC2:
  90 0061 2A20 7565 		.ascii	"* ueber ein UART interfase am PC ansgege"
  90      6265 7220 
  90      6569 6E20 
  90      5541 5254 
  90      2069 6E74 
  91 0089 6265 6E20 		.string	"ben werden.\r\n* Hierfuer wird die Drehzal wie folgt ermittelt. \r\n"
  91      7765 7264 
  91      656E 2E0D 
  91      0A2A 2048 
  91      6965 7266 
  92               	.LC3:
  93 00ca 2A20 5A65 		.string	"* Zeit(Timer0) zwischen zwei Impulsen\r\n"
  93      6974 2854 
  93      696D 6572 
  93      3029 207A 
  93      7769 7363 
  94               	.LC4:
  95 00f2 2A20 4869 		.string	"* Hierzu wird alle durch einen Externen Interrupt(INT0) \r\n"
  95      6572 7A75 
  95      2077 6972 
  95      6420 616C 
  95      6C65 2064 
  96               	.LC5:
  97 012d 2A        		.ascii	"*"
  98 012e 2044 6965 		.string	" Die Bisher vergangene Zeit des Timers0 \374ber Uart ausgegeben\r\n\r\n"
  98      2042 6973 
  98      6865 7220 
  98      7665 7267 
  98      616E 6765 
  99               		.text
 101               	.global	main
 103               	main:
   1:main.c        **** /**        
   2:main.c        **** * Mit hilfe dieses Programmes soll die Drehzal 
   3:main.c        **** * über ein UART interfase am PC ansgegeben werden.
   4:main.c        **** * Dazu wird die Drehzal wie folgt ermittelt:
   5:main.c        **** *
   6:main.c        **** * Zeit(Timer0) zwischen zwei Impulsen
   7:main.c        **** * 
   8:main.c        **** * 
   9:main.c        **** * Hierzu wird bei einen Externen Interrupt(INT0), 
  10:main.c        **** * die bisher vergangene Zeit des Timers0 über Uart ausgegeben
  11:main.c        **** *
  12:main.c        **** **/
  13:main.c        **** 
  14:main.c        **** #include <avr/interrupt.h>
  15:main.c        **** #include <stdint.h> // integerwerte wie uint8_t, uint16_t
  16:main.c        **** #include <stdlib.h> // itoa
  17:main.c        **** #include "timer0.h"	// einbinden der Header datei für Timer0
  18:main.c        **** #include "uart.h"	// einbinden der Header datei für UART
  19:main.c        **** //nicht vergessen die Passenden C Dateien in der Makefile zu schreiben
  20:main.c        **** 
  21:main.c        **** #define STATUS_LED1 PB3		// PIN der on-board Status-Led
  22:main.c        **** #define STATUS_LED2 PB2		// Pin der on-board Status_Led
  23:main.c        **** 
  24:main.c        **** 
  25:main.c        **** void init(void);			// allgemeine Initialisierung
  26:main.c        **** void auswerten(void);		// Status Ausgabe über Uart
  27:main.c        **** 
  28:main.c        **** volatile uint16_t counter_alt;		// alter Timerstand
  29:main.c        **** volatile uint16_t counter_neu;		// neuer Timerstand
  30:main.c        **** volatile uint16_t time_delta;		// Zeitdifferens
  31:main.c        **** 
  32:main.c        **** uint16_t m1,m2,m3,m4,m5,m6,m7,m8,m9,m0; //Mittelwertbildung
  33:main.c        **** uint8_t sm;
  34:main.c        **** uint8_t alt;
  35:main.c        **** 
  36:main.c        **** int main(void){	
 105               	.LM1:
 106               	/* prologue: frame size=0 */
 107 0000 C0E0      		ldi r28,lo8(__stack - 0)
 108 0002 D0E0      		ldi r29,hi8(__stack - 0)
 109 0004 DEBF      		out __SP_H__,r29
 110 0006 CDBF      		out __SP_L__,r28
 111               	/* prologue end (size=4) */
  37:main.c        **** 	
  38:main.c        **** 	init();			// Allgemeine Port initialisierung
 113               	.LM2:
 114 0008 0E94 0000 		call init
  39:main.c        **** 	timer0_init();	// Timer0 initialisieren
 116               	.LM3:
 117 000c 0E94 0000 		call timer0_init
  40:main.c        **** 	uart_init();	// UART initialisieren
 119               	.LM4:
 120 0010 0E94 0000 		call uart_init
  41:main.c        **** 	
  42:main.c        **** 	sei();	//global Interrupts Aktivieren
 122               	.LM5:
 123               	/* #APP */
 124 0014 7894      		sei
  43:main.c        **** 	
  44:main.c        **** 	uart_putc('*');			//senden eines einzelenen Zeichen
 126               	.LM6:
 127               	/* #NOAPP */
 128 0016 8AE2      		ldi r24,lo8(42)
 129 0018 0E94 0000 		call uart_putc
  45:main.c        **** 	uart_puts(" UART inizialisierung ... OK \n\r\n\r");	//sendet einen string
 131               	.LM7:
 132 001c 80E0      		ldi r24,lo8(.LC0)
 133 001e 90E0      		ldi r25,hi8(.LC0)
 134 0020 0E94 0000 		call uart_puts
  46:main.c        **** uart_puts("* Drehzahl1\r\n* Mit hilfe dieses Programmes soll die Drehzal \r\n");
 136               	.LM8:
 137 0024 80E0      		ldi r24,lo8(.LC1)
 138 0026 90E0      		ldi r25,hi8(.LC1)
 139 0028 0E94 0000 		call uart_puts
  47:main.c        **** uart_puts("* ueber ein UART interfase am PC ansgegeben werden.\r\n* Hierfuer wird die Drehzal wie f
 141               	.LM9:
 142 002c 80E0      		ldi r24,lo8(.LC2)
 143 002e 90E0      		ldi r25,hi8(.LC2)
 144 0030 0E94 0000 		call uart_puts
  48:main.c        **** uart_puts("* Zeit(Timer0) zwischen zwei Impulsen\r\n");
 146               	.LM10:
 147 0034 80E0      		ldi r24,lo8(.LC3)
 148 0036 90E0      		ldi r25,hi8(.LC3)
 149 0038 0E94 0000 		call uart_puts
  49:main.c        **** uart_puts("* Hierzu wird alle durch einen Externen Interrupt(INT0) \r\n");
 151               	.LM11:
 152 003c 80E0      		ldi r24,lo8(.LC4)
 153 003e 90E0      		ldi r25,hi8(.LC4)
 154 0040 0E94 0000 		call uart_puts
  50:main.c        **** uart_puts("* Die Bisher vergangene Zeit des Timers0 über Uart ausgegeben\r\n\r\n");
 156               	.LM12:
 157 0044 80E0      		ldi r24,lo8(.LC5)
 158 0046 90E0      		ldi r25,hi8(.LC5)
 159 0048 0E94 0000 		call uart_puts
 160               	.L2:
  51:main.c        **** 
  52:main.c        **** 
  53:main.c        **** 	while(1)
 162               	.LM13:
 163 004c FFCF      		rjmp .L2
 164               	/* epilogue: frame size=0 */
 165               	/* epilogue: noreturn */
 166               	/* epilogue end (size=0) */
 167               	/* function main size 40 (36) */
 169               	.Lscope0:
 171               	.global	init
 173               	init:
  54:main.c        **** 	{	}
  55:main.c        **** 	//never reached   i hope ;)
  56:main.c        **** }
  57:main.c        **** 
  58:main.c        **** 
  59:main.c        **** void init(void)
  60:main.c        **** {
 175               	.LM14:
 176               	/* prologue: frame size=0 */
 177 004e CF93      		push r28
 178 0050 DF93      		push r29
 179 0052 CDB7      		in r28,__SP_L__
 180 0054 DEB7      		in r29,__SP_H__
 181               	/* prologue end (size=4) */
  61:main.c        **** 	/* STATUS_LED1 und 2 als Ausgang  */
  62:main.c        **** 	DDRB |= (1 << STATUS_LED1) | (1 << STATUS_LED2);
 183               	.LM15:
 184 0056 8091 3700 		lds r24,55
 185 005a 8C60      		ori r24,lo8(12)
 186 005c 8093 3700 		sts 55,r24
  63:main.c        **** 	PORTB &= ~((1 << STATUS_LED1) | (1 << STATUS_LED2));
 188               	.LM16:
 189 0060 8091 3800 		lds r24,56
 190 0064 837F      		andi r24,lo8(-13)
 191 0066 8093 3800 		sts 56,r24
  64:main.c        **** 
  65:main.c        **** 	/* INT0 init */	
  66:main.c        **** 	DDRD &= ~(1<<PD2);		//PORTD.2 als Eingang
 193               	.LM17:
 194 006a 8091 3100 		lds r24,49
 195 006e 8B7F      		andi r24,lo8(-5)
 196 0070 8093 3100 		sts 49,r24
  67:main.c        **** 	PORTD |= (1<<PD2);		//PORTD.2 mit Pullup
 198               	.LM18:
 199 0074 8091 3200 		lds r24,50
 200 0078 8460      		ori r24,lo8(4)
 201 007a 8093 3200 		sts 50,r24
  68:main.c        **** 	GICR |= (1<<INT0);		// External Interrupt Request 0 Enable
 203               	.LM19:
 204 007e 8091 5B00 		lds r24,91
 205 0082 8064      		ori r24,lo8(64)
 206 0084 8093 5B00 		sts 91,r24
  69:main.c        **** 	MCUCR |= (1<<ISC00)|(1<<ISC00);	// Die steigende Flanke an INT0 erzeugt einen Interrupt. 
 208               	.LM20:
 209 0088 8091 5500 		lds r24,85
 210 008c 8160      		ori r24,lo8(1)
 211 008e 8093 5500 		sts 85,r24
  70:main.c        **** 	
  71:main.c        **** 	/* globale Variablen vorbelegen */
  72:main.c        **** 	counter_alt = 0; 		
 213               	.LM21:
 214 0092 1092 0000 		sts (counter_alt)+1,__zero_reg__
 215 0096 1092 0000 		sts counter_alt,__zero_reg__
  73:main.c        **** 	counter_neu = 0;
 217               	.LM22:
 218 009a 1092 0000 		sts (counter_neu)+1,__zero_reg__
 219 009e 1092 0000 		sts counter_neu,__zero_reg__
  74:main.c        **** 	m1=m2=m3=m4=m5=m6=m7=m8=m9=m0=0xffff;
 221               	.LM23:
 222 00a2 8FEF      		ldi r24,lo8(-1)
 223 00a4 9FEF      		ldi r25,hi8(-1)
 224 00a6 9093 0000 		sts (m0)+1,r25
 225 00aa 8093 0000 		sts m0,r24
 226 00ae 8FEF      		ldi r24,lo8(-1)
 227 00b0 9FEF      		ldi r25,hi8(-1)
 228 00b2 9093 0000 		sts (m9)+1,r25
 229 00b6 8093 0000 		sts m9,r24
 230 00ba 8FEF      		ldi r24,lo8(-1)
 231 00bc 9FEF      		ldi r25,hi8(-1)
 232 00be 9093 0000 		sts (m8)+1,r25
 233 00c2 8093 0000 		sts m8,r24
 234 00c6 8FEF      		ldi r24,lo8(-1)
 235 00c8 9FEF      		ldi r25,hi8(-1)
 236 00ca 9093 0000 		sts (m7)+1,r25
 237 00ce 8093 0000 		sts m7,r24
 238 00d2 8FEF      		ldi r24,lo8(-1)
 239 00d4 9FEF      		ldi r25,hi8(-1)
 240 00d6 9093 0000 		sts (m6)+1,r25
 241 00da 8093 0000 		sts m6,r24
 242 00de 8FEF      		ldi r24,lo8(-1)
 243 00e0 9FEF      		ldi r25,hi8(-1)
 244 00e2 9093 0000 		sts (m5)+1,r25
 245 00e6 8093 0000 		sts m5,r24
 246 00ea 8FEF      		ldi r24,lo8(-1)
 247 00ec 9FEF      		ldi r25,hi8(-1)
 248 00ee 9093 0000 		sts (m4)+1,r25
 249 00f2 8093 0000 		sts m4,r24
 250 00f6 8FEF      		ldi r24,lo8(-1)
 251 00f8 9FEF      		ldi r25,hi8(-1)
 252 00fa 9093 0000 		sts (m3)+1,r25
 253 00fe 8093 0000 		sts m3,r24
 254 0102 8FEF      		ldi r24,lo8(-1)
 255 0104 9FEF      		ldi r25,hi8(-1)
 256 0106 9093 0000 		sts (m2)+1,r25
 257 010a 8093 0000 		sts m2,r24
 258 010e 8FEF      		ldi r24,lo8(-1)
 259 0110 9FEF      		ldi r25,hi8(-1)
 260 0112 9093 0000 		sts (m1)+1,r25
 261 0116 8093 0000 		sts m1,r24
  75:main.c        **** 	alt=0;
 263               	.LM24:
 264 011a 1092 0000 		sts alt,__zero_reg__
 265               	/* epilogue: frame size=0 */
 266 011e DF91      		pop r29
 267 0120 CF91      		pop r28
 268 0122 0895      		ret
 269               	/* epilogue end (size=3) */
 270               	/* function init size 107 (100) */
 272               	.Lscope1:
 273               		.data
 274               	.LC6:
 275 016f 2020 2020 		.string	"    \r\n"
 275      0D0A 00
 276               		.text
 278               	.global	auswerten
 280               	auswerten:
  76:main.c        **** }
  77:main.c        **** 
  78:main.c        **** void auswerten(void)
  79:main.c        **** {
 282               	.LM25:
 283               	/* prologue: frame size=24 */
 284 0124 CF93      		push r28
 285 0126 DF93      		push r29
 286 0128 CDB7      		in r28,__SP_L__
 287 012a DEB7      		in r29,__SP_H__
 288 012c 6897      		sbiw r28,24
 289 012e 0FB6      		in __tmp_reg__,__SREG__
 290 0130 F894      		cli
 291 0132 DEBF      		out __SP_H__,r29
 292 0134 0FBE      		out __SREG__,__tmp_reg__
 293 0136 CDBF      		out __SP_L__,r28
 294               	/* prologue end (size=10) */
  80:main.c        **** 	/* gibt Zählerstand über UART aus */
  81:main.c        **** 	unsigned char s[20]; 		// max -65536 entspricht 7 Zeichen
  82:main.c        **** 	uint32_t drehzahl;			// Drehzahl in U/min
  83:main.c        **** 
  84:main.c        **** 	if(alt<4)
 296               	.LM26:
 297 0138 8091 0000 		lds r24,alt
 298 013c 8430      		cpi r24,lo8(4)
 299 013e 08F0      		brlo .+2
 300 0140 C4C0      		rjmp .L6
  85:main.c        **** 	{
  86:main.c        **** 		/* gleitender Mittelwert über 10 Messugen */
  87:main.c        **** 		m9=m8;m8=m7;m7=m6;m6=m5;m5=m4;m4=m3;m3=m2;m2=m1;m1=m0;m0=time_delta;
 302               	.LM27:
 303 0142 8091 0000 		lds r24,m8
 304 0146 9091 0000 		lds r25,(m8)+1
 305 014a 9093 0000 		sts (m9)+1,r25
 306 014e 8093 0000 		sts m9,r24
 307 0152 8091 0000 		lds r24,m7
 308 0156 9091 0000 		lds r25,(m7)+1
 309 015a 9093 0000 		sts (m8)+1,r25
 310 015e 8093 0000 		sts m8,r24
 311 0162 8091 0000 		lds r24,m6
 312 0166 9091 0000 		lds r25,(m6)+1
 313 016a 9093 0000 		sts (m7)+1,r25
 314 016e 8093 0000 		sts m7,r24
 315 0172 8091 0000 		lds r24,m5
 316 0176 9091 0000 		lds r25,(m5)+1
 317 017a 9093 0000 		sts (m6)+1,r25
 318 017e 8093 0000 		sts m6,r24
 319 0182 8091 0000 		lds r24,m4
 320 0186 9091 0000 		lds r25,(m4)+1
 321 018a 9093 0000 		sts (m5)+1,r25
 322 018e 8093 0000 		sts m5,r24
 323 0192 8091 0000 		lds r24,m3
 324 0196 9091 0000 		lds r25,(m3)+1
 325 019a 9093 0000 		sts (m4)+1,r25
 326 019e 8093 0000 		sts m4,r24
 327 01a2 8091 0000 		lds r24,m2
 328 01a6 9091 0000 		lds r25,(m2)+1
 329 01aa 9093 0000 		sts (m3)+1,r25
 330 01ae 8093 0000 		sts m3,r24
 331 01b2 8091 0000 		lds r24,m1
 332 01b6 9091 0000 		lds r25,(m1)+1
 333 01ba 9093 0000 		sts (m2)+1,r25
 334 01be 8093 0000 		sts m2,r24
 335 01c2 8091 0000 		lds r24,m0
 336 01c6 9091 0000 		lds r25,(m0)+1
 337 01ca 9093 0000 		sts (m1)+1,r25
 338 01ce 8093 0000 		sts m1,r24
 339 01d2 8091 0000 		lds r24,time_delta
 340 01d6 9091 0000 		lds r25,(time_delta)+1
 341 01da 9093 0000 		sts (m0)+1,r25
 342 01de 8093 0000 		sts m0,r24
  88:main.c        **** 		drehzahl=(m1+m2+m3+m4+m5+m6+m7+m8+m9+m0)/10;	
 344               	.LM28:
 345 01e2 2091 0000 		lds r18,m1
 346 01e6 3091 0000 		lds r19,(m1)+1
 347 01ea 8091 0000 		lds r24,m2
 348 01ee 9091 0000 		lds r25,(m2)+1
 349 01f2 280F      		add r18,r24
 350 01f4 391F      		adc r19,r25
 351 01f6 8091 0000 		lds r24,m3
 352 01fa 9091 0000 		lds r25,(m3)+1
 353 01fe 280F      		add r18,r24
 354 0200 391F      		adc r19,r25
 355 0202 8091 0000 		lds r24,m4
 356 0206 9091 0000 		lds r25,(m4)+1
 357 020a 280F      		add r18,r24
 358 020c 391F      		adc r19,r25
 359 020e 8091 0000 		lds r24,m5
 360 0212 9091 0000 		lds r25,(m5)+1
 361 0216 280F      		add r18,r24
 362 0218 391F      		adc r19,r25
 363 021a 8091 0000 		lds r24,m6
 364 021e 9091 0000 		lds r25,(m6)+1
 365 0222 280F      		add r18,r24
 366 0224 391F      		adc r19,r25
 367 0226 8091 0000 		lds r24,m7
 368 022a 9091 0000 		lds r25,(m7)+1
 369 022e 280F      		add r18,r24
 370 0230 391F      		adc r19,r25
 371 0232 8091 0000 		lds r24,m8
 372 0236 9091 0000 		lds r25,(m8)+1
 373 023a 280F      		add r18,r24
 374 023c 391F      		adc r19,r25
 375 023e 8091 0000 		lds r24,m9
 376 0242 9091 0000 		lds r25,(m9)+1
 377 0246 280F      		add r18,r24
 378 0248 391F      		adc r19,r25
 379 024a 8091 0000 		lds r24,m0
 380 024e 9091 0000 		lds r25,(m0)+1
 381 0252 820F      		add r24,r18
 382 0254 931F      		adc r25,r19
 383 0256 2AE0      		ldi r18,lo8(10)
 384 0258 30E0      		ldi r19,hi8(10)
 385 025a B901      		movw r22,r18
 386 025c 0E94 0000 		call __udivmodhi4
 387 0260 CB01      		movw r24,r22
 388 0262 AA27      		clr r26
 389 0264 BB27      		clr r27
 390 0266 8D8B      		std Y+21,r24
 391 0268 9E8B      		std Y+22,r25
 392 026a AF8B      		std Y+23,r26
 393 026c B88F      		std Y+24,r27
  89:main.c        **** 	
  90:main.c        **** 		drehzahl=(uint32_t)drehzahl*256*2;	//
 395               	.LM29:
 396 026e 8D89      		ldd r24,Y+21
 397 0270 9E89      		ldd r25,Y+22
 398 0272 AF89      		ldd r26,Y+23
 399 0274 B88D      		ldd r27,Y+24
 400 0276 20E0      		ldi r18,lo8(512)
 401 0278 32E0      		ldi r19,hi8(512)
 402 027a 40E0      		ldi r20,hlo8(512)
 403 027c 50E0      		ldi r21,hhi8(512)
 404 027e BC01      		movw r22,r24
 405 0280 CD01      		movw r24,r26
 406 0282 0E94 0000 		call __mulsi3
 407 0286 DC01      		movw r26,r24
 408 0288 CB01      		movw r24,r22
 409 028a 8D8B      		std Y+21,r24
 410 028c 9E8B      		std Y+22,r25
 411 028e AF8B      		std Y+23,r26
 412 0290 B88F      		std Y+24,r27
  91:main.c        **** 		if(drehzahl!=0)
 414               	.LM30:
 415 0292 8D89      		ldd r24,Y+21
 416 0294 9E89      		ldd r25,Y+22
 417 0296 AF89      		ldd r26,Y+23
 418 0298 B88D      		ldd r27,Y+24
 419 029a 0097      		sbiw r24,0
 420 029c A105      		cpc r26,__zero_reg__
 421 029e B105      		cpc r27,__zero_reg__
 422 02a0 09F4      		brne .+2
 423 02a2 53C0      		rjmp .L8
  92:main.c        **** 			drehzahl=(11059000*60)/drehzahl;	//
 425               	.LM31:
 426 02a4 80E2      		ldi r24,lo8(663540000)
 427 02a6 91ED      		ldi r25,hi8(663540000)
 428 02a8 ACE8      		ldi r26,hlo8(663540000)
 429 02aa B7E2      		ldi r27,hhi8(663540000)
 430 02ac 2D89      		ldd r18,Y+21
 431 02ae 3E89      		ldd r19,Y+22
 432 02b0 4F89      		ldd r20,Y+23
 433 02b2 588D      		ldd r21,Y+24
 434 02b4 BC01      		movw r22,r24
 435 02b6 CD01      		movw r24,r26
 436 02b8 0E94 0000 		call __udivmodsi4
 437 02bc DA01      		movw r26,r20
 438 02be C901      		movw r24,r18
 439 02c0 8D8B      		std Y+21,r24
 440 02c2 9E8B      		std Y+22,r25
 441 02c4 AF8B      		std Y+23,r26
 442 02c6 B88F      		std Y+24,r27
 443 02c8 40C0      		rjmp .L8
 444               	.L6:
  93:main.c        **** 	}
  94:main.c        **** 	else
  95:main.c        **** 	{
  96:main.c        **** 		m1=m2=m3=m4=m5=m6=m7=m8=m9=m0=0xffff;
 446               	.LM32:
 447 02ca 8FEF      		ldi r24,lo8(-1)
 448 02cc 9FEF      		ldi r25,hi8(-1)
 449 02ce 9093 0000 		sts (m0)+1,r25
 450 02d2 8093 0000 		sts m0,r24
 451 02d6 8FEF      		ldi r24,lo8(-1)
 452 02d8 9FEF      		ldi r25,hi8(-1)
 453 02da 9093 0000 		sts (m9)+1,r25
 454 02de 8093 0000 		sts m9,r24
 455 02e2 8FEF      		ldi r24,lo8(-1)
 456 02e4 9FEF      		ldi r25,hi8(-1)
 457 02e6 9093 0000 		sts (m8)+1,r25
 458 02ea 8093 0000 		sts m8,r24
 459 02ee 8FEF      		ldi r24,lo8(-1)
 460 02f0 9FEF      		ldi r25,hi8(-1)
 461 02f2 9093 0000 		sts (m7)+1,r25
 462 02f6 8093 0000 		sts m7,r24
 463 02fa 8FEF      		ldi r24,lo8(-1)
 464 02fc 9FEF      		ldi r25,hi8(-1)
 465 02fe 9093 0000 		sts (m6)+1,r25
 466 0302 8093 0000 		sts m6,r24
 467 0306 8FEF      		ldi r24,lo8(-1)
 468 0308 9FEF      		ldi r25,hi8(-1)
 469 030a 9093 0000 		sts (m5)+1,r25
 470 030e 8093 0000 		sts m5,r24
 471 0312 8FEF      		ldi r24,lo8(-1)
 472 0314 9FEF      		ldi r25,hi8(-1)
 473 0316 9093 0000 		sts (m4)+1,r25
 474 031a 8093 0000 		sts m4,r24
 475 031e 8FEF      		ldi r24,lo8(-1)
 476 0320 9FEF      		ldi r25,hi8(-1)
 477 0322 9093 0000 		sts (m3)+1,r25
 478 0326 8093 0000 		sts m3,r24
 479 032a 8FEF      		ldi r24,lo8(-1)
 480 032c 9FEF      		ldi r25,hi8(-1)
 481 032e 9093 0000 		sts (m2)+1,r25
 482 0332 8093 0000 		sts m2,r24
 483 0336 8FEF      		ldi r24,lo8(-1)
 484 0338 9FEF      		ldi r25,hi8(-1)
 485 033a 9093 0000 		sts (m1)+1,r25
 486 033e 8093 0000 		sts m1,r24
  97:main.c        **** 		drehzahl=0;
 488               	.LM33:
 489 0342 1D8A      		std Y+21,__zero_reg__
 490 0344 1E8A      		std Y+22,__zero_reg__
 491 0346 1F8A      		std Y+23,__zero_reg__
 492 0348 188E      		std Y+24,__zero_reg__
 493               	.L8:
  98:main.c        **** 	}
  99:main.c        **** 	
 100:main.c        **** 	
 101:main.c        **** //	uart_puts("Drehzahl: ");	// Textausgabe
 102:main.c        **** //	utoa(time_delta, s, 10);	// Uint_16 in Asci-String wandeln
 103:main.c        **** //	uart_puts(s);				// Textausgabe	
 104:main.c        **** //	uart_putc('\t');			// 
 105:main.c        **** 	ultoa(drehzahl, s, 10);		// Uint_16 in Asci-String wandeln
 495               	.LM34:
 496 034a 2AE0      		ldi r18,lo8(10)
 497 034c 30E0      		ldi r19,hi8(10)
 498 034e AE01      		movw r20,r28
 499 0350 4F5F      		subi r20,lo8(-(1))
 500 0352 5F4F      		sbci r21,hi8(-(1))
 501 0354 6D89      		ldd r22,Y+21
 502 0356 7E89      		ldd r23,Y+22
 503 0358 8F89      		ldd r24,Y+23
 504 035a 988D      		ldd r25,Y+24
 505 035c 0E94 0000 		call ultoa
 106:main.c        **** 	uart_puts(s);				// Textausgabe	
 507               	.LM35:
 508 0360 CE01      		movw r24,r28
 509 0362 0196      		adiw r24,1
 510 0364 0E94 0000 		call uart_puts
 107:main.c        **** 	uart_puts("    \r\n");		// Textausgabe		
 512               	.LM36:
 513 0368 80E0      		ldi r24,lo8(.LC6)
 514 036a 90E0      		ldi r25,hi8(.LC6)
 515 036c 0E94 0000 		call uart_puts
 108:main.c        **** 	
 109:main.c        **** 	if(alt<0xfe)	alt++;
 517               	.LM37:
 518 0370 8091 0000 		lds r24,alt
 519 0374 8E3F      		cpi r24,lo8(-2)
 520 0376 28F4      		brsh .L5
 521 0378 8091 0000 		lds r24,alt
 522 037c 8F5F      		subi r24,lo8(-(1))
 523 037e 8093 0000 		sts alt,r24
 524               	.L5:
 525               	/* epilogue: frame size=24 */
 526 0382 6896      		adiw r28,24
 527 0384 0FB6      		in __tmp_reg__,__SREG__
 528 0386 F894      		cli
 529 0388 DEBF      		out __SP_H__,r29
 530 038a 0FBE      		out __SREG__,__tmp_reg__
 531 038c CDBF      		out __SP_L__,r28
 532 038e DF91      		pop r29
 533 0390 CF91      		pop r28
 534 0392 0895      		ret
 535               	/* epilogue end (size=9) */
 536               	/* function auswerten size 312 (293) */
 542               	.Lscope2:
 544               	.global	__vector_1
 546               	__vector_1:
 110:main.c        **** }
 111:main.c        **** 
 112:main.c        **** 
 113:main.c        **** // Interrupt Service Routine bei Flanke an int0(extern) */
 114:main.c        **** ISR(INT0_vect)
 115:main.c        **** {
 548               	.LM38:
 549               	/* prologue: frame size=0 */
 550 0394 1F92      		push __zero_reg__
 551 0396 0F92      		push __tmp_reg__
 552 0398 0FB6      		in __tmp_reg__,__SREG__
 553 039a 0F92      		push __tmp_reg__
 554 039c 1124      		clr __zero_reg__
 555 039e 2F93      		push r18
 556 03a0 3F93      		push r19
 557 03a2 4F93      		push r20
 558 03a4 5F93      		push r21
 559 03a6 8F93      		push r24
 560 03a8 9F93      		push r25
 561 03aa CF93      		push r28
 562 03ac DF93      		push r29
 563 03ae CDB7      		in r28,__SP_L__
 564 03b0 DEB7      		in r29,__SP_H__
 565               	/* prologue end (size=15) */
 116:main.c        **** 	PORTB ^=(1<<PB2);								// Toggel Led, wildes blinken ist immer gut
 567               	.LM39:
 568 03b2 9091 3800 		lds r25,56
 569 03b6 84E0      		ldi r24,lo8(4)
 570 03b8 8927      		eor r24,r25
 571 03ba 8093 3800 		sts 56,r24
 117:main.c        **** 	counter_neu = (timer0_counter_D1*256) + TCNT0;	// Merke mir die Uhrzeit
 573               	.LM40:
 574 03be 8091 0000 		lds r24,timer0_counter_D1
 575 03c2 282F      		mov r18,r24
 576 03c4 3327      		clr r19
 577 03c6 80E0      		ldi r24,lo8(256)
 578 03c8 91E0      		ldi r25,hi8(256)
 579 03ca 289F      		mul r18,r24
 580 03cc A001      		movw r20,r0
 581 03ce 299F      		mul r18,r25
 582 03d0 500D      		add r21,r0
 583 03d2 389F      		mul r19,r24
 584 03d4 500D      		add r21,r0
 585 03d6 1124      		clr r1
 586 03d8 9A01      		movw r18,r20
 587 03da 8091 5200 		lds r24,82
 588 03de 9927      		clr r25
 589 03e0 820F      		add r24,r18
 590 03e2 931F      		adc r25,r19
 591 03e4 9093 0000 		sts (counter_neu)+1,r25
 592 03e8 8093 0000 		sts counter_neu,r24
 118:main.c        **** 	//timer0_counter_D1=0;							// sezte den Umrundungsmerker zurück
 119:main.c        **** 	if(counter_neu > counter_alt){
 594               	.LM41:
 595 03ec 2091 0000 		lds r18,counter_neu
 596 03f0 3091 0000 		lds r19,(counter_neu)+1
 597 03f4 8091 0000 		lds r24,counter_alt
 598 03f8 9091 0000 		lds r25,(counter_alt)+1
 599 03fc 8217      		cp r24,r18
 600 03fe 9307      		cpc r25,r19
 601 0400 78F4      		brsh .L11
 120:main.c        **** 		time_delta = counter_neu - counter_alt;}	// ermittel die Zeitdifferenz
 603               	.LM42:
 604 0402 8091 0000 		lds r24,counter_neu
 605 0406 9091 0000 		lds r25,(counter_neu)+1
 606 040a 2091 0000 		lds r18,counter_alt
 607 040e 3091 0000 		lds r19,(counter_alt)+1
 608 0412 821B      		sub r24,r18
 609 0414 930B      		sbc r25,r19
 610 0416 9093 0000 		sts (time_delta)+1,r25
 611 041a 8093 0000 		sts time_delta,r24
 612 041e 12C0      		rjmp .L12
 613               	.L11:
 121:main.c        **** 	else{
 122:main.c        **** 		time_delta = (65535-counter_alt) + counter_neu;}	// ermittel die Zeitdifferenz
 615               	.LM43:
 616 0420 2091 0000 		lds r18,counter_neu
 617 0424 3091 0000 		lds r19,(counter_neu)+1
 618 0428 8091 0000 		lds r24,counter_alt
 619 042c 9091 0000 		lds r25,(counter_alt)+1
 620 0430 281B      		sub r18,r24
 621 0432 390B      		sbc r19,r25
 622 0434 8FEF      		ldi r24,lo8(-1)
 623 0436 9FEF      		ldi r25,hi8(-1)
 624 0438 820F      		add r24,r18
 625 043a 931F      		adc r25,r19
 626 043c 9093 0000 		sts (time_delta)+1,r25
 627 0440 8093 0000 		sts time_delta,r24
 628               	.L12:
 123:main.c        **** 	
 124:main.c        **** 	counter_alt = counter_neu;						// Merke mir die Uhrzeit für die nächste Messung
 630               	.LM44:
 631 0444 8091 0000 		lds r24,counter_neu
 632 0448 9091 0000 		lds r25,(counter_neu)+1
 633 044c 9093 0000 		sts (counter_alt)+1,r25
 634 0450 8093 0000 		sts counter_alt,r24
 125:main.c        **** 	alt=0;
 636               	.LM45:
 637 0454 1092 0000 		sts alt,__zero_reg__
 638               	/* epilogue: frame size=0 */
 639 0458 DF91      		pop r29
 640 045a CF91      		pop r28
 641 045c 9F91      		pop r25
 642 045e 8F91      		pop r24
 643 0460 5F91      		pop r21
 644 0462 4F91      		pop r20
 645 0464 3F91      		pop r19
 646 0466 2F91      		pop r18
 647 0468 0F90      		pop __tmp_reg__
 648 046a 0FBE      		out __SREG__,__tmp_reg__
 649 046c 0F90      		pop __tmp_reg__
 650 046e 1F90      		pop __zero_reg__
 651 0470 1895      		reti
 652               	/* epilogue end (size=13) */
 653               	/* function __vector_1 size 111 (83) */
 655               	.Lscope3:
 656               		.comm timer0_counter,1,1
 657               		.comm timer0_counter_D1,1,1
 658               		.comm counter_alt,2,1
 659               		.comm counter_neu,2,1
 660               		.comm time_delta,2,1
 661               		.comm m1,2,1
 662               		.comm m2,2,1
 663               		.comm m3,2,1
 664               		.comm m4,2,1
 665               		.comm m5,2,1
 666               		.comm m6,2,1
 667               		.comm m7,2,1
 668               		.comm m8,2,1
 669               		.comm m9,2,1
 670               		.comm m0,2,1
 671               		.comm sm,1,1
 672               		.comm alt,1,1
 690               		.text
 692               	Letext:
 693               	/* File "main.c": code  570 = 0x023a ( 512), prologues  33, epilogues  25 */
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\DOKUME~1\Olaf\LOKALE~1\Temp/cce8aaaa.s:3      *ABS*:0000003f __SREG__
C:\DOKUME~1\Olaf\LOKALE~1\Temp/cce8aaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOKUME~1\Olaf\LOKALE~1\Temp/cce8aaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOKUME~1\Olaf\LOKALE~1\Temp/cce8aaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOKUME~1\Olaf\LOKALE~1\Temp/cce8aaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOKUME~1\Olaf\LOKALE~1\Temp/cce8aaaa.s:103    .text:00000000 main
C:\DOKUME~1\Olaf\LOKALE~1\Temp/cce8aaaa.s:173    .text:0000004e init
                            *COM*:00000002 counter_alt
                            *COM*:00000002 counter_neu
                            *COM*:00000002 m0
                            *COM*:00000002 m9
                            *COM*:00000002 m8
                            *COM*:00000002 m7
                            *COM*:00000002 m6
                            *COM*:00000002 m5
                            *COM*:00000002 m4
                            *COM*:00000002 m3
                            *COM*:00000002 m2
                            *COM*:00000002 m1
                            *COM*:00000001 alt
C:\DOKUME~1\Olaf\LOKALE~1\Temp/cce8aaaa.s:280    .text:00000124 auswerten
                            *COM*:00000002 time_delta
C:\DOKUME~1\Olaf\LOKALE~1\Temp/cce8aaaa.s:546    .text:00000394 __vector_1
                            *COM*:00000001 timer0_counter_D1
                            *COM*:00000001 timer0_counter
                            *COM*:00000001 sm
C:\DOKUME~1\Olaf\LOKALE~1\Temp/cce8aaaa.s:692    .text:00000472 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
__stack
timer0_init
uart_init
uart_putc
uart_puts
__udivmodhi4
__mulsi3
__udivmodsi4
ultoa
