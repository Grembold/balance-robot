   1               		.file	"uart.c"
   2               		.arch atmega16
   3               	__SREG__ = 0x3f
   4               	__SP_H__ = 0x3e
   5               	__SP_L__ = 0x3d
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
  84               		.data
  85               	.LC0:
  86 0000 5561 7274 		.string	"Uart wurde richtig initialisiert\n\r"
  86      2077 7572 
  86      6465 2072 
  86      6963 6874 
  86      6967 2069 
  87               		.text
  89               	.global	uart_init
  91               	uart_init:
   1:uart.c        **** /*****************************************************************/
   2:uart.c        **** /**																**/
   3:uart.c        **** /**	Funktionen für eine Ausgabe über die Serielle Scnittstelle	**/
   4:uart.c        **** /** 															**/
   5:uart.c        **** /**	Implementierung der uart_puti nicht abgeschlossen			**/
   6:uart.c        **** /** 															**/
   7:uart.c        **** /*****************************************************************/
   8:uart.c        **** 
   9:uart.c        **** #include <avr/interrupt.h>
  10:uart.c        **** #include <stdlib.h>
  11:uart.c        **** #include "uart.h"
  12:uart.c        **** 
  13:uart.c        **** 
  14:uart.c        **** void uart_init(void)
  15:uart.c        **** {
  93               	.LM1:
  94               	/* prologue: frame size=0 */
  95 0000 CF93      		push r28
  96 0002 DF93      		push r29
  97 0004 CDB7      		in r28,__SP_L__
  98 0006 DEB7      		in r29,__SP_H__
  99               	/* prologue end (size=4) */
  16:uart.c        **** 	/* Baudrate einstellen ( Normaler Modus ) */
  17:uart.c        **** 	UBRRH = (unsigned char) (UBRR_BAUD>>8);
 101               	.LM2:
 102 0008 1092 4000 		sts 64,__zero_reg__
  18:uart.c        **** 	UBRRL = (unsigned char) UBRR_BAUD;
 104               	.LM3:
 105 000c 85E0      		ldi r24,lo8(5)
 106 000e 8093 2900 		sts 41,r24
  19:uart.c        **** 
  20:uart.c        **** 	/* Aktivieren des Empfängers, des Senders und des "Daten empfangen"-Interrupts */
  21:uart.c        **** 	UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
 108               	.LM4:
 109 0012 88E9      		ldi r24,lo8(-104)
 110 0014 8093 2A00 		sts 42,r24
  22:uart.c        **** 
  23:uart.c        **** 	/* Einstellen des Datenformats: 8 Datenbits, 1 Stoppbit */
  24:uart.c        **** 	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 112               	.LM5:
 113 0018 86E8      		ldi r24,lo8(-122)
 114 001a 8093 4000 		sts 64,r24
  25:uart.c        **** 	
  26:uart.c        **** 	uart_puts("Uart wurde richtig initialisiert\n\r");
 116               	.LM6:
 117 001e 80E0      		ldi r24,lo8(.LC0)
 118 0020 90E0      		ldi r25,hi8(.LC0)
 119 0022 0E94 0000 		call uart_puts
 120               	/* epilogue: frame size=0 */
 121 0026 DF91      		pop r29
 122 0028 CF91      		pop r28
 123 002a 0895      		ret
 124               	/* epilogue end (size=3) */
 125               	/* function uart_init size 22 (15) */
 127               	.Lscope0:
 130               	.global	uart_putc
 132               	uart_putc:
  27:uart.c        **** }
  28:uart.c        **** 
  29:uart.c        **** /** sendet ein einzelnes Zeichen **/
  30:uart.c        **** void uart_putc(char c)
  31:uart.c        **** {
 134               	.LM7:
 135               	/* prologue: frame size=1 */
 136 002c CF93      		push r28
 137 002e DF93      		push r29
 138 0030 CDB7      		in r28,__SP_L__
 139 0032 DEB7      		in r29,__SP_H__
 140 0034 2197      		sbiw r28,1
 141 0036 0FB6      		in __tmp_reg__,__SREG__
 142 0038 F894      		cli
 143 003a DEBF      		out __SP_H__,r29
 144 003c 0FBE      		out __SREG__,__tmp_reg__
 145 003e CDBF      		out __SP_L__,r28
 146               	/* prologue end (size=10) */
 147 0040 8983      		std Y+1,r24
 148               	.L3:
  32:uart.c        **** 	/* warten bis der Sendepuffer leer ist */
  33:uart.c        **** 	while ( !( UCSRA & (1<<UDRE)) );
 150               	.LM8:
 151 0042 8091 2B00 		lds r24,43
 152 0046 9927      		clr r25
 153 0048 8072      		andi r24,lo8(32)
 154 004a 9070      		andi r25,hi8(32)
 155 004c 0097      		sbiw r24,0
 156 004e 09F4      		brne .L4
 157 0050 F8CF      		rjmp .L3
 158               	.L4:
  34:uart.c        **** 	
  35:uart.c        **** 	/* Zeichen senden */
  36:uart.c        **** 	UDR = c;
 160               	.LM9:
 161 0052 8981      		ldd r24,Y+1
 162 0054 8093 2C00 		sts 44,r24
 163               	/* epilogue: frame size=1 */
 164 0058 2196      		adiw r28,1
 165 005a 0FB6      		in __tmp_reg__,__SREG__
 166 005c F894      		cli
 167 005e DEBF      		out __SP_H__,r29
 168 0060 0FBE      		out __SREG__,__tmp_reg__
 169 0062 CDBF      		out __SP_L__,r28
 170 0064 DF91      		pop r29
 171 0066 CF91      		pop r28
 172 0068 0895      		ret
 173               	/* epilogue end (size=9) */
 174               	/* function uart_putc size 31 (12) */
 176               	.Lscope1:
 179               	.global	uart_puts
 181               	uart_puts:
  37:uart.c        **** }
  38:uart.c        **** 
  39:uart.c        **** /** sendet einen string **/
  40:uart.c        **** void uart_puts(char *s)
  41:uart.c        **** {
 183               	.LM10:
 184               	/* prologue: frame size=2 */
 185 006a CF93      		push r28
 186 006c DF93      		push r29
 187 006e CDB7      		in r28,__SP_L__
 188 0070 DEB7      		in r29,__SP_H__
 189 0072 2297      		sbiw r28,2
 190 0074 0FB6      		in __tmp_reg__,__SREG__
 191 0076 F894      		cli
 192 0078 DEBF      		out __SP_H__,r29
 193 007a 0FBE      		out __SREG__,__tmp_reg__
 194 007c CDBF      		out __SP_L__,r28
 195               	/* prologue end (size=10) */
 196 007e 9A83      		std Y+2,r25
 197 0080 8983      		std Y+1,r24
 198               	.L6:
  42:uart.c        **** 	while (*s) // so lange senden, bis das ende des Strings erreicht ist
 200               	.LM11:
 201 0082 E981      		ldd r30,Y+1
 202 0084 FA81      		ldd r31,Y+2
 203 0086 8081      		ld r24,Z
 204 0088 8823      		tst r24
 205 008a 59F0      		breq .L5
  43:uart.c        **** 	{
  44:uart.c        **** 		uart_putc(*s);
 207               	.LM12:
 208 008c E981      		ldd r30,Y+1
 209 008e FA81      		ldd r31,Y+2
 210 0090 8081      		ld r24,Z
 211 0092 0E94 0000 		call uart_putc
  45:uart.c        **** 		s++;
 213               	.LM13:
 214 0096 8981      		ldd r24,Y+1
 215 0098 9A81      		ldd r25,Y+2
 216 009a 0196      		adiw r24,1
 217 009c 9A83      		std Y+2,r25
 218 009e 8983      		std Y+1,r24
 219 00a0 F0CF      		rjmp .L6
 220               	.L5:
 221               	/* epilogue: frame size=2 */
 222 00a2 2296      		adiw r28,2
 223 00a4 0FB6      		in __tmp_reg__,__SREG__
 224 00a6 F894      		cli
 225 00a8 DEBF      		out __SP_H__,r29
 226 00aa 0FBE      		out __SREG__,__tmp_reg__
 227 00ac CDBF      		out __SP_L__,r28
 228 00ae DF91      		pop r29
 229 00b0 CF91      		pop r28
 230 00b2 0895      		ret
 231               	/* epilogue end (size=9) */
 232               	/* function uart_puts size 37 (18) */
 234               	.Lscope2:
 237               	.global	uart_puti
 239               	uart_puti:
  46:uart.c        **** 	}
  47:uart.c        **** 	//uart_putc('\r');
  48:uart.c        **** }
  49:uart.c        **** 
  50:uart.c        **** /** sendet einen Integer **/
  51:uart.c        **** void uart_puti(uint8_t *i)
  52:uart.c        **** {
 241               	.LM14:
 242               	/* prologue: frame size=7 */
 243 00b4 CF93      		push r28
 244 00b6 DF93      		push r29
 245 00b8 CDB7      		in r28,__SP_L__
 246 00ba DEB7      		in r29,__SP_H__
 247 00bc 2797      		sbiw r28,7
 248 00be 0FB6      		in __tmp_reg__,__SREG__
 249 00c0 F894      		cli
 250 00c2 DEBF      		out __SP_H__,r29
 251 00c4 0FBE      		out __SREG__,__tmp_reg__
 252 00c6 CDBF      		out __SP_L__,r28
 253               	/* prologue end (size=10) */
 254 00c8 9A83      		std Y+2,r25
 255 00ca 8983      		std Y+1,r24
  53:uart.c        **** 	unsigned char s[5];
  54:uart.c        **** 	itoa(*i, s,10);
 257               	.LM15:
 258 00cc 9E01      		movw r18,r28
 259 00ce 2D5F      		subi r18,lo8(-(3))
 260 00d0 3F4F      		sbci r19,hi8(-(3))
 261 00d2 E981      		ldd r30,Y+1
 262 00d4 FA81      		ldd r31,Y+2
 263 00d6 8081      		ld r24,Z
 264 00d8 9927      		clr r25
 265 00da 4AE0      		ldi r20,lo8(10)
 266 00dc 50E0      		ldi r21,hi8(10)
 267 00de B901      		movw r22,r18
 268 00e0 0E94 0000 		call itoa
  55:uart.c        **** 	uart_puts(s);
 270               	.LM16:
 271 00e4 CE01      		movw r24,r28
 272 00e6 0396      		adiw r24,3
 273 00e8 0E94 0000 		call uart_puts
 274               	/* epilogue: frame size=7 */
 275 00ec 2796      		adiw r28,7
 276 00ee 0FB6      		in __tmp_reg__,__SREG__
 277 00f0 F894      		cli
 278 00f2 DEBF      		out __SP_H__,r29
 279 00f4 0FBE      		out __SREG__,__tmp_reg__
 280 00f6 CDBF      		out __SP_L__,r28
 281 00f8 DF91      		pop r29
 282 00fa CF91      		pop r28
 283 00fc 0895      		ret
 284               	/* epilogue end (size=9) */
 285               	/* function uart_puti size 37 (18) */
 290               	.Lscope3:
 292               	.global	__vector_11
 294               	__vector_11:
  56:uart.c        **** }
  57:uart.c        **** 
  58:uart.c        **** 
  59:uart.c        **** 
  60:uart.c        **** /* Interrupt wird ausgelöst sobald neue Daten im USART-Empfangspuffer liegen */
  61:uart.c        **** ISR(USART_RXC_vect)
  62:uart.c        **** {
 296               	.LM17:
 297               	/* prologue: frame size=1 */
 298 00fe 1F92      		push __zero_reg__
 299 0100 0F92      		push __tmp_reg__
 300 0102 0FB6      		in __tmp_reg__,__SREG__
 301 0104 0F92      		push __tmp_reg__
 302 0106 1124      		clr __zero_reg__
 303 0108 8F93      		push r24
 304 010a 9F93      		push r25
 305 010c CF93      		push r28
 306 010e DF93      		push r29
 307 0110 CDB7      		in r28,__SP_L__
 308 0112 DEB7      		in r29,__SP_H__
 309 0114 2197      		sbiw r28,1
 310 0116 DEBF      		out __SP_H__,r29
 311 0118 CDBF      		out __SP_L__,r28
 312               	/* prologue end (size=14) */
  63:uart.c        **** 	 
  64:uart.c        **** 	unsigned char buffer;
  65:uart.c        **** 
  66:uart.c        **** 	/* Daten aus dem Puffer lesen */
  67:uart.c        **** 	buffer = UDR;
 314               	.LM18:
 315 011a 8091 2C00 		lds r24,44
 316 011e 8983      		std Y+1,r24
 317               	.L10:
  68:uart.c        **** 
  69:uart.c        **** 	/* warten bis der Sendepuffer leer ist */
  70:uart.c        **** 	while ( !( UCSRA & (1<<UDRE)) );
 319               	.LM19:
 320 0120 8091 2B00 		lds r24,43
 321 0124 9927      		clr r25
 322 0126 8072      		andi r24,lo8(32)
 323 0128 9070      		andi r25,hi8(32)
 324 012a 0097      		sbiw r24,0
 325 012c 09F4      		brne .L11
 326 012e F8CF      		rjmp .L10
 327               	.L11:
  71:uart.c        **** 		
  72:uart.c        **** 	/* und gleich wieder zurück schicken */
  73:uart.c        **** 	UDR = buffer;
 329               	.LM20:
 330 0130 8981      		ldd r24,Y+1
 331 0132 8093 2C00 		sts 44,r24
 332               	/* epilogue: frame size=1 */
 333 0136 2196      		adiw r28,1
 334 0138 F894      		cli
 335 013a DEBF      		out __SP_H__,r29
 336 013c CDBF      		out __SP_L__,r28
 337 013e DF91      		pop r29
 338 0140 CF91      		pop r28
 339 0142 9F91      		pop r25
 340 0144 8F91      		pop r24
 341 0146 0F90      		pop __tmp_reg__
 342 0148 0FBE      		out __SREG__,__tmp_reg__
 343 014a 0F90      		pop __tmp_reg__
 344 014c 1F90      		pop __zero_reg__
 345 014e 1895      		reti
 346               	/* epilogue end (size=13) */
 347               	/* function __vector_11 size 41 (14) */
 352               	.Lscope4:
 353               		.text
 355               	Letext:
 356               	/* File "uart.c": code  168 = 0x00a8 (  77), prologues  48, epilogues  43 */
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:3      *ABS*:0000003f __SREG__
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:4      *ABS*:0000003e __SP_H__
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:5      *ABS*:0000003d __SP_L__
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:6      *ABS*:00000000 __tmp_reg__
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:7      *ABS*:00000001 __zero_reg__
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:91     .text:00000000 uart_init
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:181    .text:0000006a uart_puts
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:132    .text:0000002c uart_putc
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:239    .text:000000b4 uart_puti
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:294    .text:000000fe __vector_11
C:\DOKUME~1\Olaf\LOKALE~1\Temp/ccOiaaaa.s:355    .text:00000150 Letext

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
itoa
