
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000828  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000828  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000008bc  2**0
                  ALLOC
  3 .noinit       00000000  00800061  00800061  000008bc  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  000008bc  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000028  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000dd  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000069b  00000000  00000000  00000db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000001ea  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000471  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000036  00000000  00000000  00001aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 47 00 	jmp	0x8e <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <main>:
void wait_until_key_pressed(void);
uint16_t ReadChannel(uint8_t mux);

int main(void)
{
  8e:	cf e3       	ldi	r28, 0x3F	; 63
  90:	d4 e0       	ldi	r29, 0x04	; 4
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
	DDRA &=~((1<<AD_PIN)|(1<<TASTE));
  96:	80 91 3a 00 	lds	r24, 0x003A
  9a:	86 7f       	andi	r24, 0xF6	; 246
  9c:	80 93 3a 00 	sts	0x003A, r24
	PORTA |=(1<<TASTE);
  a0:	80 91 3b 00 	lds	r24, 0x003B
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	80 93 3b 00 	sts	0x003B, r24
	
	lcd_init(LCD_DISP_ON);
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	0e 94 92 03 	call	0x724 <lcd_init>
	sei();
  b0:	78 94       	sei
	
	for(;;)
	{
		uint16_t data;
		char text[MAXLENGTH];
		
		/* liset den Aktuellen Wert am AD */
		data = ReadChannel(AD_PIN);
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	0e 94 af 00 	call	0x15e <ReadChannel>
  b8:	9a 83       	std	Y+2, r25	; 0x02
  ba:	89 83       	std	Y+1, r24	; 0x01
        
		/* convert interger into string */
        itoa( (data>>2) , text, 10);
  bc:	9e 01       	movw	r18, r28
  be:	2d 5f       	subi	r18, 0xFD	; 253
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	9a 81       	ldd	r25, Y+2	; 0x02
  c6:	96 95       	lsr	r25
  c8:	87 95       	ror	r24
  ca:	96 95       	lsr	r25
  cc:	87 95       	ror	r24
  ce:	4a e0       	ldi	r20, 0x0A	; 10
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	b9 01       	movw	r22, r18
  d4:	0e 94 cf 03 	call	0x79e <itoa>
		
		lcd_puts(text);
  d8:	ce 01       	movw	r24, r28
  da:	03 96       	adiw	r24, 0x03	; 3
  dc:	0e 94 eb 02 	call	0x5d6 <lcd_puts>
		
		/* wait until push button PD2 (INT0) is pressed */
        wait_until_key_pressed();
  e0:	0e 94 75 00 	call	0xea <wait_until_key_pressed>
		
		lcd_clrscr();
  e4:	0e 94 36 03 	call	0x66c <lcd_clrscr>
  e8:	e4 cf       	rjmp	.-56     	; 0xb2 <main+0x24>

000000ea <wait_until_key_pressed>:
	}
	
	return 0;
}


void wait_until_key_pressed(void)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	cd b7       	in	r28, 0x3d	; 61
  f0:	de b7       	in	r29, 0x3e	; 62
  f2:	24 97       	sbiw	r28, 0x04	; 4
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
    unsigned char temp1, temp2;
    unsigned int i;
    
    do {
        temp1 = PINA;                  // read input
  fe:	80 91 39 00 	lds	r24, 0x0039
 102:	89 83       	std	Y+1, r24	; 0x01
        for(i=0;i<65535;i++);
 104:	1c 82       	std	Y+4, r1	; 0x04
 106:	1b 82       	std	Y+3, r1	; 0x03
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	9c 81       	ldd	r25, Y+4	; 0x04
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	8f 3f       	cpi	r24, 0xFF	; 255
 110:	92 07       	cpc	r25, r18
 112:	31 f0       	breq	.+12     	; 0x120 <wait_until_key_pressed+0x36>
 114:	8b 81       	ldd	r24, Y+3	; 0x03
 116:	9c 81       	ldd	r25, Y+4	; 0x04
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	9c 83       	std	Y+4, r25	; 0x04
 11c:	8b 83       	std	Y+3, r24	; 0x03
 11e:	f4 cf       	rjmp	.-24     	; 0x108 <wait_until_key_pressed+0x1e>
        temp2 = PINA;                  // read input
 120:	80 91 39 00 	lds	r24, 0x0039
 124:	8a 83       	std	Y+2, r24	; 0x02
        temp1 = (temp1 & temp2);       // debounce input
 126:	99 81       	ldd	r25, Y+1	; 0x01
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	89 23       	and	r24, r25
 12c:	89 83       	std	Y+1, r24	; 0x01
    } while ( temp1 & _BV(PINA0) );
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	99 27       	eor	r25, r25
 132:	81 70       	andi	r24, 0x01	; 1
 134:	90 70       	andi	r25, 0x00	; 0
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	09 f0       	breq	.+2      	; 0x13c <wait_until_key_pressed+0x52>
 13a:	e1 cf       	rjmp	.-62     	; 0xfe <wait_until_key_pressed+0x14>
    
    loop_until_bit_is_set(PINA,PINA0);            /* wait until key is released */
 13c:	80 91 39 00 	lds	r24, 0x0039
 140:	99 27       	eor	r25, r25
 142:	81 70       	andi	r24, 0x01	; 1
 144:	90 70       	andi	r25, 0x00	; 0
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	09 f4       	brne	.+2      	; 0x14c <wait_until_key_pressed+0x62>
 14a:	f8 cf       	rjmp	.-16     	; 0x13c <wait_until_key_pressed+0x52>
 14c:	24 96       	adiw	r28, 0x04	; 4
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <ReadChannel>:
}

uint16_t ReadChannel(uint8_t mux)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	24 97       	sbiw	r28, 0x04	; 4
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	f8 94       	cli
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	0f be       	out	0x3f, r0	; 63
 170:	cd bf       	out	0x3d, r28	; 61
 172:	89 83       	std	Y+1, r24	; 0x01
  uint8_t i;
  uint16_t result = 0;         //Initialisieren wichtig, da lokale Variablen
 174:	1c 82       	std	Y+4, r1	; 0x04
 176:	1b 82       	std	Y+3, r1	; 0x03
                               //nicht automatisch initialisiert werden und
                               //zufällige Werte haben. Sonst kann Quatsch rauskommen
  ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);    // Frequenzvorteiler 
 178:	83 e8       	ldi	r24, 0x83	; 131
 17a:	80 93 26 00 	sts	0x0026, r24
                               // setzen auf 8 (1) und ADC aktivieren (1)

  ADMUX = mux;                      // Kanal waehlen
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	80 93 27 00 	sts	0x0027, r24
  ADMUX |= (1<<REFS0); // interne Referenzspannung nutzen 
 184:	80 91 27 00 	lds	r24, 0x0027
 188:	80 64       	ori	r24, 0x40	; 64
 18a:	80 93 27 00 	sts	0x0027, r24

  /* nach Aktivieren des ADC wird ein "Dummy-Readout" empfohlen, man liest
     also einen Wert und verwirft diesen, um den ADC "warmlaufen zu lassen" */
  ADCSRA |= (1<<ADSC);              // eine ADC-Wandlung 
 18e:	80 91 26 00 	lds	r24, 0x0026
 192:	80 64       	ori	r24, 0x40	; 64
 194:	80 93 26 00 	sts	0x0026, r24
  while ( ADCSRA & (1<<ADSC) );     // auf Abschluss der Konvertierung warten 
 198:	80 91 26 00 	lds	r24, 0x0026
 19c:	99 27       	eor	r25, r25
 19e:	80 74       	andi	r24, 0x40	; 64
 1a0:	90 70       	andi	r25, 0x00	; 0
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	09 f0       	breq	.+2      	; 0x1a8 <ReadChannel+0x4a>
 1a6:	f8 cf       	rjmp	.-16     	; 0x198 <ReadChannel+0x3a>
  result += ADCW;
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	9c 81       	ldd	r25, Y+4	; 0x04
 1ac:	20 91 24 00 	lds	r18, 0x0024
 1b0:	30 91 25 00 	lds	r19, 0x0025
 1b4:	82 0f       	add	r24, r18
 1b6:	93 1f       	adc	r25, r19
 1b8:	9c 83       	std	Y+4, r25	; 0x04
 1ba:	8b 83       	std	Y+3, r24	; 0x03
  
  /* Eigentliche Messung - Mittelwert aus 4 aufeinanderfolgenden Wandlungen */
  for(i=0;i<4;i++)
 1bc:	1a 82       	std	Y+2, r1	; 0x02
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	84 30       	cpi	r24, 0x04	; 4
 1c2:	d8 f4       	brcc	.+54     	; 0x1fa <ReadChannel+0x9c>
  {
    ADCSRA |= (1<<ADSC);            // eine Wandlung "single conversion"
 1c4:	80 91 26 00 	lds	r24, 0x0026
 1c8:	80 64       	ori	r24, 0x40	; 64
 1ca:	80 93 26 00 	sts	0x0026, r24
    while ( ADCSRA & (1<<ADSC) );   // auf Abschluss der Konvertierung warten
 1ce:	80 91 26 00 	lds	r24, 0x0026
 1d2:	99 27       	eor	r25, r25
 1d4:	80 74       	andi	r24, 0x40	; 64
 1d6:	90 70       	andi	r25, 0x00	; 0
 1d8:	00 97       	sbiw	r24, 0x00	; 0
 1da:	09 f0       	breq	.+2      	; 0x1de <ReadChannel+0x80>
 1dc:	f8 cf       	rjmp	.-16     	; 0x1ce <ReadChannel+0x70>
    result += ADCW;		    // Wandlungsergebnisse aufaddieren
 1de:	2b 81       	ldd	r18, Y+3	; 0x03
 1e0:	3c 81       	ldd	r19, Y+4	; 0x04
 1e2:	80 91 24 00 	lds	r24, 0x0024
 1e6:	90 91 25 00 	lds	r25, 0x0025
 1ea:	82 0f       	add	r24, r18
 1ec:	93 1f       	adc	r25, r19
 1ee:	9c 83       	std	Y+4, r25	; 0x04
 1f0:	8b 83       	std	Y+3, r24	; 0x03
 1f2:	8a 81       	ldd	r24, Y+2	; 0x02
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	8a 83       	std	Y+2, r24	; 0x02
 1f8:	e2 cf       	rjmp	.-60     	; 0x1be <ReadChannel+0x60>
  }
  ADCSRA &= ~(1<<ADEN);             // ADC deaktivieren (2)
 1fa:	9f e7       	ldi	r25, 0x7F	; 127
 1fc:	80 91 26 00 	lds	r24, 0x0026
 200:	89 23       	and	r24, r25
 202:	80 93 26 00 	sts	0x0026, r24

  result /= 4;                     // Summe durch vier teilen = arithm. Mittelwert
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	9c 81       	ldd	r25, Y+4	; 0x04
 20a:	96 95       	lsr	r25
 20c:	87 95       	ror	r24
 20e:	96 95       	lsr	r25
 210:	87 95       	ror	r24
 212:	9c 83       	std	Y+4, r25	; 0x04
 214:	8b 83       	std	Y+3, r24	; 0x03

  return result;
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	9c 81       	ldd	r25, Y+4	; 0x04
 21a:	24 96       	adiw	r28, 0x04	; 4
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <toggle_e>:
*************************************************************************/
#define delay(us)  _delayFourCycles( ( ( 1*(F_CPU/4000) )*us)/1000 )

static void toggle_e(void)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	cd b7       	in	r28, 0x3d	; 61
 232:	de b7       	in	r29, 0x3e	; 62
    lcd_e_high();
 234:	80 91 60 00 	lds	r24, 0x0060
 238:	28 2f       	mov	r18, r24
 23a:	33 27       	eor	r19, r19
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 c0       	rjmp	.+4      	; 0x246 <toggle_e+0x1a>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	2a 95       	dec	r18
 248:	e2 f7       	brpl	.-8      	; 0x242 <toggle_e+0x16>
 24a:	20 91 35 00 	lds	r18, 0x0035
 24e:	82 2b       	or	r24, r18
 250:	80 93 35 00 	sts	0x0035, r24
    lcd_e_delay();
 254:	00 c0       	rjmp	.+0      	; 0x256 <toggle_e+0x2a>
    lcd_e_low();
 256:	80 91 60 00 	lds	r24, 0x0060
 25a:	28 2f       	mov	r18, r24
 25c:	33 27       	eor	r19, r19
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <toggle_e+0x3c>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	2a 95       	dec	r18
 26a:	e2 f7       	brpl	.-8      	; 0x264 <toggle_e+0x38>
 26c:	98 2f       	mov	r25, r24
 26e:	90 95       	com	r25
 270:	80 91 35 00 	lds	r24, 0x0035
 274:	89 23       	and	r24, r25
 276:	80 93 35 00 	sts	0x0035, r24
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <lcd_write>:
}

static void lcd_write(uint8_t data,uint8_t rs) 
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	22 97       	sbiw	r28, 0x02	; 2
 28a:	0f b6       	in	r0, 0x3f	; 63
 28c:	f8 94       	cli
 28e:	de bf       	out	0x3e, r29	; 62
 290:	0f be       	out	0x3f, r0	; 63
 292:	cd bf       	out	0x3d, r28	; 61
 294:	89 83       	std	Y+1, r24	; 0x01
 296:	6a 83       	std	Y+2, r22	; 0x02
	if (rs)
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	88 23       	and	r24, r24
 29c:	31 f0       	breq	.+12     	; 0x2aa <lcd_write+0x2a>
	{   /* write data        (RS=1, RW=0) */
		lcd_rs_high();
 29e:	80 91 35 00 	lds	r24, 0x0035
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	80 93 35 00 	sts	0x0035, r24
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <lcd_write+0x34>
	}
	else
	{    /* write instruction (RS=0, RW=0) */
		lcd_rs_low();
 2aa:	80 91 35 00 	lds	r24, 0x0035
 2ae:	8e 7f       	andi	r24, 0xFE	; 254
 2b0:	80 93 35 00 	sts	0x0035, r24
	}
  
	lcd_rw_low();
 2b4:	80 91 35 00 	lds	r24, 0x0035
 2b8:	8d 7f       	andi	r24, 0xFD	; 253
 2ba:	80 93 35 00 	sts	0x0035, r24

    
	/* configure data pins as output */
	DDROFPORT(LCD_DATA_PORT) |= 0x0F << LCD_DATA_OFFSET;
 2be:	80 91 34 00 	lds	r24, 0x0034
 2c2:	80 6f       	ori	r24, 0xF0	; 240
 2c4:	80 93 34 00 	sts	0x0034, r24

	/* output high nibble first */
	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_OFFSET))) | ((data & 0xF0) >> (4-LCD_DATA_OFFSET));
 2c8:	9f e0       	ldi	r25, 0x0F	; 15
 2ca:	80 91 35 00 	lds	r24, 0x0035
 2ce:	29 2f       	mov	r18, r25
 2d0:	28 23       	and	r18, r24
 2d2:	90 ef       	ldi	r25, 0xF0	; 240
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	89 23       	and	r24, r25
 2d8:	82 2b       	or	r24, r18
 2da:	80 93 35 00 	sts	0x0035, r24
	toggle_e();
 2de:	0e 94 16 01 	call	0x22c <toggle_e>

	/* output low nibble */
	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_OFFSET))) | ((data & 0x0F) << LCD_DATA_OFFSET);
 2e2:	9f e0       	ldi	r25, 0x0F	; 15
 2e4:	80 91 35 00 	lds	r24, 0x0035
 2e8:	29 2f       	mov	r18, r25
 2ea:	28 23       	and	r18, r24
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	99 27       	eor	r25, r25
 2f0:	8f 70       	andi	r24, 0x0F	; 15
 2f2:	90 70       	andi	r25, 0x00	; 0
 2f4:	82 95       	swap	r24
 2f6:	92 95       	swap	r25
 2f8:	90 7f       	andi	r25, 0xF0	; 240
 2fa:	98 27       	eor	r25, r24
 2fc:	80 7f       	andi	r24, 0xF0	; 240
 2fe:	98 27       	eor	r25, r24
 300:	82 2b       	or	r24, r18
 302:	80 93 35 00 	sts	0x0035, r24
	toggle_e();
 306:	0e 94 16 01 	call	0x22c <toggle_e>
  
	/* all data pins high (inactive) */
	LCD_DATA_PORT = (LCD_DATA_PORT & (~(0x0F << LCD_DATA_OFFSET))) | (0x0F << LCD_DATA_OFFSET);
 30a:	9f e0       	ldi	r25, 0x0F	; 15
 30c:	80 91 35 00 	lds	r24, 0x0035
 310:	98 23       	and	r25, r24
 312:	80 ef       	ldi	r24, 0xF0	; 240
 314:	89 2b       	or	r24, r25
 316:	80 93 35 00 	sts	0x0035, r24
 31a:	22 96       	adiw	r28, 0x02	; 2
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	de bf       	out	0x3e, r29	; 62
 322:	0f be       	out	0x3f, r0	; 63
 324:	cd bf       	out	0x3d, r28	; 61
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <lcd_read>:
}

static unsigned char lcd_read(unsigned char rs) 
{
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	22 97       	sbiw	r28, 0x02	; 2
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
 340:	89 83       	std	Y+1, r24	; 0x01
    unsigned char data;
    
    if (rs)
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	88 23       	and	r24, r24
 346:	31 f0       	breq	.+12     	; 0x354 <lcd_read+0x28>
      lcd_rs_high();                       /* RS=1: read data      */
 348:	80 91 35 00 	lds	r24, 0x0035
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	80 93 35 00 	sts	0x0035, r24
 352:	05 c0       	rjmp	.+10     	; 0x35e <lcd_read+0x32>
		else
      lcd_rs_low();                        /* RS=0: read busy flag */
 354:	80 91 35 00 	lds	r24, 0x0035
 358:	8e 7f       	andi	r24, 0xFE	; 254
 35a:	80 93 35 00 	sts	0x0035, r24
    
    lcd_rw_high();                           /* RW=1  read mode      */
 35e:	80 91 35 00 	lds	r24, 0x0035
 362:	82 60       	ori	r24, 0x02	; 2
 364:	80 93 35 00 	sts	0x0035, r24
    
    DDROFPORT(LCD_DATA_PORT)=DDROFPORT(LCD_DATA_PORT) & (~(0x0F << LCD_DATA_OFFSET)); /* configure data pins as input */
 368:	9f e0       	ldi	r25, 0x0F	; 15
 36a:	80 91 34 00 	lds	r24, 0x0034
 36e:	89 23       	and	r24, r25
 370:	80 93 34 00 	sts	0x0034, r24
        
    lcd_e_high();
 374:	80 91 60 00 	lds	r24, 0x0060
 378:	28 2f       	mov	r18, r24
 37a:	33 27       	eor	r19, r19
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <lcd_read+0x5a>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	2a 95       	dec	r18
 388:	e2 f7       	brpl	.-8      	; 0x382 <lcd_read+0x56>
 38a:	20 91 35 00 	lds	r18, 0x0035
 38e:	82 2b       	or	r24, r18
 390:	80 93 35 00 	sts	0x0035, r24
    lcd_e_delay();        
 394:	00 c0       	rjmp	.+0      	; 0x396 <lcd_read+0x6a>
    data = (PINOFPORT(LCD_DATA_PORT) << (4-LCD_DATA_OFFSET)) & 0xF0;     /* read high nibble first */
 396:	90 ef       	ldi	r25, 0xF0	; 240
 398:	80 91 33 00 	lds	r24, 0x0033
 39c:	89 23       	and	r24, r25
 39e:	8a 83       	std	Y+2, r24	; 0x02
    lcd_e_low();
 3a0:	80 91 60 00 	lds	r24, 0x0060
 3a4:	28 2f       	mov	r18, r24
 3a6:	33 27       	eor	r19, r19
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <lcd_read+0x86>
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	2a 95       	dec	r18
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <lcd_read+0x82>
 3b6:	98 2f       	mov	r25, r24
 3b8:	90 95       	com	r25
 3ba:	80 91 35 00 	lds	r24, 0x0035
 3be:	89 23       	and	r24, r25
 3c0:	80 93 35 00 	sts	0x0035, r24
       
    lcd_e_delay();                       /* Enable 500ns low       */
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <lcd_read+0x9a>
        
    lcd_e_high();
 3c6:	80 91 60 00 	lds	r24, 0x0060
 3ca:	28 2f       	mov	r18, r24
 3cc:	33 27       	eor	r19, r19
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <lcd_read+0xac>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	2a 95       	dec	r18
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <lcd_read+0xa8>
 3dc:	20 91 35 00 	lds	r18, 0x0035
 3e0:	82 2b       	or	r24, r18
 3e2:	80 93 35 00 	sts	0x0035, r24
    lcd_e_delay();
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <lcd_read+0xbc>
    data |= (PINOFPORT(LCD_DATA_PORT) >> LCD_DATA_OFFSET) & 0x0F;    /* read low nibble        */
 3e8:	80 91 33 00 	lds	r24, 0x0033
 3ec:	82 95       	swap	r24
 3ee:	8f 70       	andi	r24, 0x0F	; 15
 3f0:	98 2f       	mov	r25, r24
 3f2:	9f 70       	andi	r25, 0x0F	; 15
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	89 2b       	or	r24, r25
 3f8:	8a 83       	std	Y+2, r24	; 0x02
    lcd_e_low();
 3fa:	80 91 60 00 	lds	r24, 0x0060
 3fe:	28 2f       	mov	r18, r24
 400:	33 27       	eor	r19, r19
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <lcd_read+0xe0>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	2a 95       	dec	r18
 40e:	e2 f7       	brpl	.-8      	; 0x408 <lcd_read+0xdc>
 410:	98 2f       	mov	r25, r24
 412:	90 95       	com	r25
 414:	80 91 35 00 	lds	r24, 0x0035
 418:	89 23       	and	r24, r25
 41a:	80 93 35 00 	sts	0x0035, r24
    
    return data;
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	99 27       	eor	r25, r25
 422:	22 96       	adiw	r28, 0x02	; 2
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <lcd_waitbusy>:
}

static unsigned char lcd_waitbusy(void)
{
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
    register unsigned char c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 96 01 	call	0x32c <lcd_read>
 442:	88 23       	and	r24, r24
 444:	0c f4       	brge	.+2      	; 0x448 <lcd_waitbusy+0x14>
 446:	fa cf       	rjmp	.-12     	; 0x43c <lcd_waitbusy+0x8>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);
 448:	85 e0       	ldi	r24, 0x05	; 5
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 2f 02 	call	0x45e <_delayFourCycles>

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 96 01 	call	0x32c <lcd_read>
 456:	99 27       	eor	r25, r25
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	08 95       	ret

0000045e <_delayFourCycles>:
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	22 97       	sbiw	r28, 0x02	; 2
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	9a 83       	std	Y+2, r25	; 0x02
 474:	89 83       	std	Y+1, r24	; 0x01
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	9a 81       	ldd	r25, Y+2	; 0x02
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	11 f4       	brne	.+4      	; 0x482 <__stack+0x23>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <__stack+0x21>
 480:	06 c0       	rjmp	.+12     	; 0x48e <__stack+0x2f>
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	9a 81       	ldd	r25, Y+2	; 0x02
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <__stack+0x27>
 48a:	9a 83       	std	Y+2, r25	; 0x02
 48c:	89 83       	std	Y+1, r24	; 0x01
 48e:	22 96       	adiw	r28, 0x02	; 2
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <lcd_command>:
}

static inline void lcd_newline(uint8_t pos)
{
    register uint8_t addressCounter;
	
	if (pos < 27)
        addressCounter = 64;
    else
	{
		addressCounter = 0;
		if (active_e == LCD_PIN_E1)
			active_e=LCD_PIN_E2;
		else
			active_e=LCD_PIN_E1;
	}
    lcd_command(LCD_SET_DDRAM + addressCounter);
}


void lcd_command(unsigned char cmd)
{
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	21 97       	sbiw	r28, 0x01	; 1
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	89 83       	std	Y+1, r24	; 0x01
    lcd_waitbusy();
 4b6:	0e 94 1a 02 	call	0x434 <lcd_waitbusy>
    lcd_write(cmd, 0);
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	0e 94 40 01 	call	0x280 <lcd_write>
 4c2:	21 96       	adiw	r28, 0x01	; 1
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <lcd_gotoxy>:
}


void lcd_gotoxy(uint8_t x, uint8_t y)
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	22 97       	sbiw	r28, 0x02	; 2
 4de:	0f b6       	in	r0, 0x3f	; 63
 4e0:	f8 94       	cli
 4e2:	de bf       	out	0x3e, r29	; 62
 4e4:	0f be       	out	0x3f, r0	; 63
 4e6:	cd bf       	out	0x3d, r28	; 61
 4e8:	89 83       	std	Y+1, r24	; 0x01
 4ea:	6a 83       	std	Y+2, r22	; 0x02
	if (y > 1)
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	38 f0       	brcs	.+14     	; 0x500 <lcd_gotoxy+0x2c>
	{
		active_e=LCD_PIN_E1;
 4f2:	83 e0       	ldi	r24, 0x03	; 3
 4f4:	80 93 60 00 	sts	0x0060, r24
		y-=2;
 4f8:	8a 81       	ldd	r24, Y+2	; 0x02
 4fa:	82 50       	subi	r24, 0x02	; 2
 4fc:	8a 83       	std	Y+2, r24	; 0x02
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <lcd_gotoxy+0x32>
	}
	else
		active_e=LCD_PIN_E2;
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	80 93 60 00 	sts	0x0060, r24
		
	lcd_command(LCD_SET_DDRAM + x + (y * 64));	
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	99 27       	eor	r25, r25
 50a:	00 24       	eor	r0, r0
 50c:	96 95       	lsr	r25
 50e:	87 95       	ror	r24
 510:	07 94       	ror	r0
 512:	96 95       	lsr	r25
 514:	87 95       	ror	r24
 516:	07 94       	ror	r0
 518:	98 2f       	mov	r25, r24
 51a:	80 2d       	mov	r24, r0
 51c:	29 81       	ldd	r18, Y+1	; 0x01
 51e:	98 2f       	mov	r25, r24
 520:	92 0f       	add	r25, r18
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	89 0f       	add	r24, r25
 526:	0e 94 50 02 	call	0x4a0 <lcd_command>
 52a:	22 96       	adiw	r28, 0x02	; 2
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	df 91       	pop	r29
 538:	cf 91       	pop	r28
 53a:	08 95       	ret

0000053c <lcd_putc>:
}


void lcd_putc(char c)
{
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	cd b7       	in	r28, 0x3d	; 61
 542:	de b7       	in	r29, 0x3e	; 62
 544:	22 97       	sbiw	r28, 0x02	; 2
 546:	0f b6       	in	r0, 0x3f	; 63
 548:	f8 94       	cli
 54a:	de bf       	out	0x3e, r29	; 62
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	cd bf       	out	0x3d, r28	; 61
 550:	89 83       	std	Y+1, r24	; 0x01
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 552:	0e 94 1a 02 	call	0x434 <lcd_waitbusy>
 556:	8a 83       	std	Y+2, r24	; 0x02
    if (c=='\n')
 558:	89 81       	ldd	r24, Y+1	; 0x01
 55a:	8a 30       	cpi	r24, 0x0A	; 10
 55c:	21 f4       	brne	.+8      	; 0x566 <lcd_putc+0x2a>
    {
        lcd_newline(pos);
 55e:	8a 81       	ldd	r24, Y+2	; 0x02
 560:	0e 94 c0 02 	call	0x580 <lcd_newline>
 564:	04 c0       	rjmp	.+8      	; 0x56e <lcd_putc+0x32>
    }
    else
    {
#if LCD_WORD_WRAP==1
		if (pos == 27)
		{
			lcd_write(LCD_SET_DDRAM + 64, 0);
		}
		else
		{
			if (pos == (64 + 27))
			{
				if (active_e == LCD_PIN_E1)
				{
					active_e=LCD_PIN_E2;
				}
				else
				{
					active_e=LCD_PIN_E1;
				}
				lcd_write(LCD_SET_DDRAM + 0, 0);
			}
		}
		
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	0e 94 40 01 	call	0x280 <lcd_write>
 56e:	22 96       	adiw	r28, 0x02	; 2
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	de bf       	out	0x3e, r29	; 62
 576:	0f be       	out	0x3f, r0	; 63
 578:	cd bf       	out	0x3d, r28	; 61
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <lcd_newline>:
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	22 97       	sbiw	r28, 0x02	; 2
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	f8 94       	cli
 58e:	de bf       	out	0x3e, r29	; 62
 590:	0f be       	out	0x3f, r0	; 63
 592:	cd bf       	out	0x3d, r28	; 61
 594:	89 83       	std	Y+1, r24	; 0x01
 596:	89 81       	ldd	r24, Y+1	; 0x01
 598:	8b 31       	cpi	r24, 0x1B	; 27
 59a:	18 f4       	brcc	.+6      	; 0x5a2 <lcd_newline+0x22>
 59c:	80 e4       	ldi	r24, 0x40	; 64
 59e:	8a 83       	std	Y+2, r24	; 0x02
 5a0:	0c c0       	rjmp	.+24     	; 0x5ba <lcd_newline+0x3a>
 5a2:	1a 82       	std	Y+2, r1	; 0x02
 5a4:	80 91 60 00 	lds	r24, 0x0060
 5a8:	83 30       	cpi	r24, 0x03	; 3
 5aa:	21 f4       	brne	.+8      	; 0x5b4 <lcd_newline+0x34>
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	80 93 60 00 	sts	0x0060, r24
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <lcd_newline+0x3a>
 5b4:	83 e0       	ldi	r24, 0x03	; 3
 5b6:	80 93 60 00 	sts	0x0060, r24
 5ba:	80 e8       	ldi	r24, 0x80	; 128
 5bc:	9a 81       	ldd	r25, Y+2	; 0x02
 5be:	89 0f       	add	r24, r25
 5c0:	0e 94 50 02 	call	0x4a0 <lcd_command>
 5c4:	22 96       	adiw	r28, 0x02	; 2
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	f8 94       	cli
 5ca:	de bf       	out	0x3e, r29	; 62
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	cd bf       	out	0x3d, r28	; 61
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <lcd_puts>:
    }
}


void lcd_puts(const char *s)
{
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	23 97       	sbiw	r28, 0x03	; 3
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
 5ea:	9a 83       	std	Y+2, r25	; 0x02
 5ec:	89 83       	std	Y+1, r24	; 0x01
  register char c;

  while ( (c = *s++) )
 5ee:	e9 81       	ldd	r30, Y+1	; 0x01
 5f0:	fa 81       	ldd	r31, Y+2	; 0x02
 5f2:	80 81       	ld	r24, Z
 5f4:	31 96       	adiw	r30, 0x01	; 1
 5f6:	fa 83       	std	Y+2, r31	; 0x02
 5f8:	e9 83       	std	Y+1, r30	; 0x01
 5fa:	8b 83       	std	Y+3, r24	; 0x03
 5fc:	88 23       	and	r24, r24
 5fe:	21 f0       	breq	.+8      	; 0x608 <lcd_puts+0x32>
  {
    lcd_putc(c);
 600:	8b 81       	ldd	r24, Y+3	; 0x03
 602:	0e 94 9e 02 	call	0x53c <lcd_putc>
 606:	f3 cf       	rjmp	.-26     	; 0x5ee <lcd_puts+0x18>
 608:	23 96       	adiw	r28, 0x03	; 3
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	f8 94       	cli
 60e:	de bf       	out	0x3e, r29	; 62
 610:	0f be       	out	0x3f, r0	; 63
 612:	cd bf       	out	0x3d, r28	; 61
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <lcd_puts_P>:
  }
}


void lcd_puts_P(const char *progmem_s)
{
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	26 97       	sbiw	r28, 0x06	; 6
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
 62e:	9a 83       	std	Y+2, r25	; 0x02
 630:	89 83       	std	Y+1, r24	; 0x01
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	9a 81       	ldd	r25, Y+2	; 0x02
 636:	9c 01       	movw	r18, r24
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	9a 83       	std	Y+2, r25	; 0x02
 63c:	89 83       	std	Y+1, r24	; 0x01
 63e:	3c 83       	std	Y+4, r19	; 0x04
 640:	2b 83       	std	Y+3, r18	; 0x03
 642:	eb 81       	ldd	r30, Y+3	; 0x03
 644:	fc 81       	ldd	r31, Y+4	; 0x04
 646:	84 91       	lpm	r24, Z
 648:	8d 83       	std	Y+5, r24	; 0x05
 64a:	8d 81       	ldd	r24, Y+5	; 0x05
 64c:	8e 83       	std	Y+6, r24	; 0x06
 64e:	88 23       	and	r24, r24
 650:	21 f0       	breq	.+8      	; 0x65a <lcd_puts_P+0x40>
        lcd_putc(c);
 652:	8e 81       	ldd	r24, Y+6	; 0x06
 654:	0e 94 9e 02 	call	0x53c <lcd_putc>
 658:	ec cf       	rjmp	.-40     	; 0x632 <lcd_puts_P+0x18>
 65a:	26 96       	adiw	r28, 0x06	; 6
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	f8 94       	cli
 660:	de bf       	out	0x3e, r29	; 62
 662:	0f be       	out	0x3f, r0	; 63
 664:	cd bf       	out	0x3d, r28	; 61
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <lcd_clrscr>:
    }
}


void lcd_clrscr(void)
{
 66c:	cf 93       	push	r28
 66e:	df 93       	push	r29
 670:	cd b7       	in	r28, 0x3d	; 61
 672:	de b7       	in	r29, 0x3e	; 62
	active_e=LCD_PIN_E2;
 674:	82 e0       	ldi	r24, 0x02	; 2
 676:	80 93 60 00 	sts	0x0060, r24
	lcd_command(LCD_CLEAR);
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 50 02 	call	0x4a0 <lcd_command>
	active_e=LCD_PIN_E1;
 680:	83 e0       	ldi	r24, 0x03	; 3
 682:	80 93 60 00 	sts	0x0060, r24
	lcd_command(LCD_CLEAR);
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	0e 94 50 02 	call	0x4a0 <lcd_command>
 68c:	df 91       	pop	r29
 68e:	cf 91       	pop	r28
 690:	08 95       	ret

00000692 <init_controller>:
}


void init_controller(unsigned char cmd)
{
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	21 97       	sbiw	r28, 0x01	; 1
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	f8 94       	cli
 6a0:	de bf       	out	0x3e, r29	; 62
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	cd bf       	out	0x3d, r28	; 61
 6a6:	89 83       	std	Y+1, r24	; 0x01
/* initial write to lcd is 8bit */
	LCD_DATA_PORT=(LCD_DATA_PORT & (~(0x0F << LCD_DATA_OFFSET))) | (0x03 << LCD_DATA_OFFSET);
 6a8:	9f e0       	ldi	r25, 0x0F	; 15
 6aa:	80 91 35 00 	lds	r24, 0x0035
 6ae:	89 23       	and	r24, r25
 6b0:	80 63       	ori	r24, 0x30	; 48
 6b2:	80 93 35 00 	sts	0x0035, r24
	toggle_e();
 6b6:	0e 94 16 01 	call	0x22c <toggle_e>
	delay(4992);         /* delay, busy flag can't be checked here */
 6ba:	85 ee       	ldi	r24, 0xE5	; 229
 6bc:	95 e3       	ldi	r25, 0x35	; 53
 6be:	0e 94 2f 02 	call	0x45e <_delayFourCycles>

	/* repeat last command */ 
	toggle_e();      
 6c2:	0e 94 16 01 	call	0x22c <toggle_e>
	delay(64);           /* delay, busy flag can't be checked here */
 6c6:	80 eb       	ldi	r24, 0xB0	; 176
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 2f 02 	call	0x45e <_delayFourCycles>
    
	/* repeat last command a third time */
	toggle_e();      
 6ce:	0e 94 16 01 	call	0x22c <toggle_e>
	delay(64);           /* delay, busy flag can't be checked here */
 6d2:	80 eb       	ldi	r24, 0xB0	; 176
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 2f 02 	call	0x45e <_delayFourCycles>

	/* now configure for 4bit mode */
	LCD_DATA_PORT=(LCD_DATA_PORT & (~(0x0F << LCD_DATA_OFFSET))) | (0x02 << LCD_DATA_OFFSET); // LCD_FUNCTION_4BIT_1LINE>>4
 6da:	9f e0       	ldi	r25, 0x0F	; 15
 6dc:	80 91 35 00 	lds	r24, 0x0035
 6e0:	89 23       	and	r24, r25
 6e2:	80 62       	ori	r24, 0x20	; 32
 6e4:	80 93 35 00 	sts	0x0035, r24
	toggle_e();
 6e8:	0e 94 16 01 	call	0x22c <toggle_e>
	delay(64);           /* some displays need this additional delay */
 6ec:	80 eb       	ldi	r24, 0xB0	; 176
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 2f 02 	call	0x45e <_delayFourCycles>
	
	/* from now the LCD only accepts 4 bit I/O, we can use lcd_command() */    
	lcd_command(LCD_FUNCTION_4BIT_2LINES);
 6f4:	88 e2       	ldi	r24, 0x28	; 40
 6f6:	0e 94 50 02 	call	0x4a0 <lcd_command>
	lcd_command(LCD_DISP_OFF);              /* display off                  */
 6fa:	88 e0       	ldi	r24, 0x08	; 8
 6fc:	0e 94 50 02 	call	0x4a0 <lcd_command>
	lcd_command(LCD_CLEAR);                 /* display clear                */ 
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	0e 94 50 02 	call	0x4a0 <lcd_command>
	lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 706:	86 e0       	ldi	r24, 0x06	; 6
 708:	0e 94 50 02 	call	0x4a0 <lcd_command>
	lcd_command(cmd);		                /* display/cursor control       */
 70c:	89 81       	ldd	r24, Y+1	; 0x01
 70e:	0e 94 50 02 	call	0x4a0 <lcd_command>
 712:	21 96       	adiw	r28, 0x01	; 1
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	f8 94       	cli
 718:	de bf       	out	0x3e, r29	; 62
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	cd bf       	out	0x3d, r28	; 61
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	08 95       	ret

00000724 <lcd_init>:
}

void lcd_init(unsigned char cmd)
{
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62
 72c:	21 97       	sbiw	r28, 0x01	; 1
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	de bf       	out	0x3e, r29	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	cd bf       	out	0x3d, r28	; 61
 738:	89 83       	std	Y+1, r24	; 0x01
	//set IO directions
	DDROFPORT(LCD_DATA_PORT) |= 0x0F << LCD_DATA_OFFSET;
 73a:	80 91 34 00 	lds	r24, 0x0034
 73e:	80 6f       	ori	r24, 0xF0	; 240
 740:	80 93 34 00 	sts	0x0034, r24
	DDROFPORT(LCD_CTRL_PORT) |= 1<<LCD_PIN_RS;
 744:	80 91 34 00 	lds	r24, 0x0034
 748:	81 60       	ori	r24, 0x01	; 1
 74a:	80 93 34 00 	sts	0x0034, r24
	DDROFPORT(LCD_CTRL_PORT) |= 1<<LCD_PIN_RW;
 74e:	80 91 34 00 	lds	r24, 0x0034
 752:	82 60       	ori	r24, 0x02	; 2
 754:	80 93 34 00 	sts	0x0034, r24
	DDROFPORT(LCD_CTRL_PORT) |= 1<<LCD_PIN_E1;
 758:	80 91 34 00 	lds	r24, 0x0034
 75c:	88 60       	ori	r24, 0x08	; 8
 75e:	80 93 34 00 	sts	0x0034, r24
	DDROFPORT(LCD_CTRL_PORT) |= 1<<LCD_PIN_E2;
 762:	80 91 34 00 	lds	r24, 0x0034
 766:	84 60       	ori	r24, 0x04	; 4
 768:	80 93 34 00 	sts	0x0034, r24
	  
	  
	//initialize lcd in 4 bit mode
	delay(16000);
 76c:	80 ec       	ldi	r24, 0xC0	; 192
 76e:	9c ea       	ldi	r25, 0xAC	; 172
 770:	0e 94 2f 02 	call	0x45e <_delayFourCycles>
	
	active_e = LCD_PIN_E1;
 774:	83 e0       	ldi	r24, 0x03	; 3
 776:	80 93 60 00 	sts	0x0060, r24
	init_controller(cmd);
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	0e 94 49 03 	call	0x692 <init_controller>
	active_e = LCD_PIN_E2;
 780:	82 e0       	ldi	r24, 0x02	; 2
 782:	80 93 60 00 	sts	0x0060, r24
	init_controller(cmd);
 786:	89 81       	ldd	r24, Y+1	; 0x01
 788:	0e 94 49 03 	call	0x692 <init_controller>
 78c:	21 96       	adiw	r28, 0x01	; 1
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
 798:	df 91       	pop	r29
 79a:	cf 91       	pop	r28
 79c:	08 95       	ret

0000079e <itoa>:
 79e:	fb 01       	movw	r30, r22
 7a0:	9f 01       	movw	r18, r30
 7a2:	e8 94       	clt
 7a4:	42 30       	cpi	r20, 0x02	; 2
 7a6:	c4 f0       	brlt	.+48     	; 0x7d8 <itoa+0x3a>
 7a8:	45 32       	cpi	r20, 0x25	; 37
 7aa:	b4 f4       	brge	.+44     	; 0x7d8 <itoa+0x3a>
 7ac:	4a 30       	cpi	r20, 0x0A	; 10
 7ae:	29 f4       	brne	.+10     	; 0x7ba <itoa+0x1c>
 7b0:	97 fb       	bst	r25, 7
 7b2:	1e f4       	brtc	.+6      	; 0x7ba <itoa+0x1c>
 7b4:	90 95       	com	r25
 7b6:	81 95       	neg	r24
 7b8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ba:	64 2f       	mov	r22, r20
 7bc:	77 27       	eor	r23, r23
 7be:	0e 94 00 04 	call	0x800 <__udivmodhi4>
 7c2:	80 5d       	subi	r24, 0xD0	; 208
 7c4:	8a 33       	cpi	r24, 0x3A	; 58
 7c6:	0c f0       	brlt	.+2      	; 0x7ca <itoa+0x2c>
 7c8:	89 5d       	subi	r24, 0xD9	; 217
 7ca:	81 93       	st	Z+, r24
 7cc:	cb 01       	movw	r24, r22
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	a1 f7       	brne	.-24     	; 0x7ba <itoa+0x1c>
 7d2:	16 f4       	brtc	.+4      	; 0x7d8 <itoa+0x3a>
 7d4:	5d e2       	ldi	r21, 0x2D	; 45
 7d6:	51 93       	st	Z+, r21
 7d8:	10 82       	st	Z, r1
 7da:	c9 01       	movw	r24, r18
 7dc:	0c 94 f0 03 	jmp	0x7e0 <strrev>

000007e0 <strrev>:
 7e0:	dc 01       	movw	r26, r24
 7e2:	fc 01       	movw	r30, r24
 7e4:	01 90       	ld	r0, Z+
 7e6:	00 20       	and	r0, r0
 7e8:	e9 f7       	brne	.-6      	; 0x7e4 <strrev+0x4>
 7ea:	32 97       	sbiw	r30, 0x02	; 2
 7ec:	ae 17       	cp	r26, r30
 7ee:	bf 07       	cpc	r27, r31
 7f0:	30 f4       	brcc	.+12     	; 0x7fe <strrev+0x1e>
 7f2:	7c 91       	ld	r23, X
 7f4:	60 81       	ld	r22, Z
 7f6:	70 83       	st	Z, r23
 7f8:	31 97       	sbiw	r30, 0x01	; 1
 7fa:	6d 93       	st	X+, r22
 7fc:	f7 cf       	rjmp	.-18     	; 0x7ec <strrev+0xc>
 7fe:	08 95       	ret

00000800 <__udivmodhi4>:
 800:	aa 1b       	sub	r26, r26
 802:	bb 1b       	sub	r27, r27
 804:	51 e1       	ldi	r21, 0x11	; 17
 806:	07 c0       	rjmp	.+14     	; 0x816 <__udivmodhi4_ep>

00000808 <__udivmodhi4_loop>:
 808:	aa 1f       	adc	r26, r26
 80a:	bb 1f       	adc	r27, r27
 80c:	a6 17       	cp	r26, r22
 80e:	b7 07       	cpc	r27, r23
 810:	10 f0       	brcs	.+4      	; 0x816 <__udivmodhi4_ep>
 812:	a6 1b       	sub	r26, r22
 814:	b7 0b       	sbc	r27, r23

00000816 <__udivmodhi4_ep>:
 816:	88 1f       	adc	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	5a 95       	dec	r21
 81c:	a9 f7       	brne	.-22     	; 0x808 <__udivmodhi4_loop>
 81e:	80 95       	com	r24
 820:	90 95       	com	r25
 822:	bc 01       	movw	r22, r24
 824:	cd 01       	movw	r24, r26
 826:	08 95       	ret
