
adwandler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000378  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000071  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000601  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000027  00000000  00000000  00000621  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000190  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000078  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000151  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  000009a4  2**2
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#define ADC_PIN 3

int main(void)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	//LED Ausgabe
	DDRC = 0xff;
  9e:	e4 e3       	ldi	r30, 0x34	; 52
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	80 83       	st	Z, r24
	PORTC = 0x00;
  a6:	e5 e3       	ldi	r30, 0x35	; 53
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	
	// Status LEDs
	DDRB |=(1<<PB3)|(1<<PB2);
  ac:	a7 e3       	ldi	r26, 0x37	; 55
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e7 e3       	ldi	r30, 0x37	; 55
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8c 60       	ori	r24, 0x0C	; 12
  b8:	8c 93       	st	X, r24
	PORTB |=(1<<PB3)|(1<<PB2);
  ba:	a8 e3       	ldi	r26, 0x38	; 56
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e8 e3       	ldi	r30, 0x38	; 56
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8c 60       	ori	r24, 0x0C	; 12
  c6:	8c 93       	st	X, r24
	
	//Pins für Taste und ADC
	DDRA &=~((1<<PA0)|(1<<PA3));
  c8:	aa e3       	ldi	r26, 0x3A	; 58
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	ea e3       	ldi	r30, 0x3A	; 58
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	86 7f       	andi	r24, 0xF6	; 246
  d4:	8c 93       	st	X, r24
	PORTA = (1<<PA0);
  d6:	eb e3       	ldi	r30, 0x3B	; 59
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 83       	st	Z, r24
		
	// ADwandler initialisieren

	sei();	//global interrupts aktivieren
  de:	78 94       	sei
	
	for(;;)
	{
		PORTC = (uint8_t)get_adc(ADC_PIN); //messwert auf den LEDs anzeigen
  e0:	05 e3       	ldi	r16, 0x35	; 53
  e2:	10 e0       	ldi	r17, 0x00	; 0
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	0e 94 78 00 	call	0xf0	; 0xf0 <get_adc>
  ea:	f8 01       	movw	r30, r16
  ec:	80 83       	st	Z, r24

	}
  ee:	f8 cf       	rjmp	.-16     	; 0xe0 <main+0x4e>

000000f0 <get_adc>:
 	
}

/***/
/**		Routine zum auslesen eines einzelnen A/D-Wertes	*/		
/***/
uint16_t get_adc(uint8_t adc_pin)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	24 97       	sbiw	r28, 0x04	; 4
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	8c 83       	std	Y+4, r24	; 0x04
  uint8_t i;
  uint16_t result = 0;         		//Initialisieren wichtig, da lokale Variablen
 106:	1a 82       	std	Y+2, r1	; 0x02
 108:	19 82       	std	Y+1, r1	; 0x01
									//nicht automatisch initialisiert werden und
									//zufällige Werte haben. Sonst kann Quatsch rauskommen
  ADCSRA = (1<<ADEN) | AD_PRE;    	// Frequenzvorteiler 
 10a:	e6 e2       	ldi	r30, 0x26	; 38
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	87 e8       	ldi	r24, 0x87	; 135
 110:	80 83       	st	Z, r24
									// setzen auf 8 (1) und ADC aktivieren (1)

  ADMUX = adc_pin;                      // Kanal waehlen
 112:	e7 e2       	ldi	r30, 0x27	; 39
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	8c 81       	ldd	r24, Y+4	; 0x04
 118:	80 83       	st	Z, r24
  ADMUX |= AD_REF; 					// interne Referenzspannung nutzen 
 11a:	a7 e2       	ldi	r26, 0x27	; 39
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	e7 e2       	ldi	r30, 0x27	; 39
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	80 6c       	ori	r24, 0xC0	; 192
 126:	8c 93       	st	X, r24

  /* nach Aktivieren des ADC wird ein "Dummy-Readout" empfohlen, man liest
     also einen Wert und verwirft diesen, um den ADC "warmlaufen zu lassen" */
  ADCSRA |= (1<<ADSC);				// eine ADC-Wandlung 
 128:	a6 e2       	ldi	r26, 0x26	; 38
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e6 e2       	ldi	r30, 0x26	; 38
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 64       	ori	r24, 0x40	; 64
 134:	8c 93       	st	X, r24
  while ( ADCSRA & (1<<ADSC) );	// auf Abschluss der Konvertierung warten 
 136:	e6 e2       	ldi	r30, 0x26	; 38
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	99 27       	eor	r25, r25
 13e:	80 74       	andi	r24, 0x40	; 64
 140:	90 70       	andi	r25, 0x00	; 0
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	c1 f7       	brne	.-16     	; 0x136 <get_adc+0x46>

  /* Eigentliche Messung: Mittelwertbildung aus MITTELWERT aufeinanderfolgenden Wandlungen */
  for(i=0;i<MITTELWERT;i++)
 146:	1b 82       	std	Y+3, r1	; 0x03
 148:	1c c0       	rjmp	.+56     	; 0x182 <get_adc+0x92>
  {
    ADCSRA |= (1<<ADSC);         	// eine Wandlung "single conversion"
 14a:	a6 e2       	ldi	r26, 0x26	; 38
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	e6 e2       	ldi	r30, 0x26	; 38
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 64       	ori	r24, 0x40	; 64
 156:	8c 93       	st	X, r24
    while ( ADCSRA & (1<<ADSC) );	// auf Abschluss der Konvertierung warten
 158:	e6 e2       	ldi	r30, 0x26	; 38
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	99 27       	eor	r25, r25
 160:	80 74       	andi	r24, 0x40	; 64
 162:	90 70       	andi	r25, 0x00	; 0
 164:	00 97       	sbiw	r24, 0x00	; 0
 166:	c1 f7       	brne	.-16     	; 0x158 <get_adc+0x68>
    result += ADCW;		    		// Wandlungsergebnisse aufaddieren
 168:	e4 e2       	ldi	r30, 0x24	; 36
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	20 81       	ld	r18, Z
 16e:	31 81       	ldd	r19, Z+1	; 0x01
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	82 0f       	add	r24, r18
 176:	93 1f       	adc	r25, r19
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	8b 81       	ldd	r24, Y+3	; 0x03
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	8b 83       	std	Y+3, r24	; 0x03
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	08 f3       	brcs	.-62     	; 0x14a <get_adc+0x5a>
  }
  ADCSRA &= ~(1<<ADEN); 			// ADC deaktivieren (2)
 188:	a6 e2       	ldi	r26, 0x26	; 38
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	e6 e2       	ldi	r30, 0x26	; 38
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	90 81       	ld	r25, Z
 192:	8f e7       	ldi	r24, 0x7F	; 127
 194:	89 23       	and	r24, r25
 196:	8c 93       	st	X, r24

  result /= MITTELWERT;        		// Summe durch MITTELWERT teilen = arithm. Mittelwert
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	96 95       	lsr	r25
 19e:	87 95       	ror	r24
 1a0:	96 95       	lsr	r25
 1a2:	87 95       	ror	r24
 1a4:	96 95       	lsr	r25
 1a6:	87 95       	ror	r24
 1a8:	9a 83       	std	Y+2, r25	; 0x02
 1aa:	89 83       	std	Y+1, r24	; 0x01

  return result;
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	24 96       	adiw	r28, 0x04	; 4
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	08 95       	ret

000001c2 <_exit>:
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <_exit>
