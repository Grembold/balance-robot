
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fca  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00000fca  0000105e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  00800088  00800088  00001086  2**0
                  ALLOC
  3 .noinit       00000000  008000be  008000be  00001086  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00001086  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00001088  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000078  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000003b0  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000be2  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000505  00000000  00000000  00002482  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000aac  00000000  00000000  00002987  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000364  00000000  00000000  00003433  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000000c  00000fca  00000fca  00003797  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 5e 05 	jmp	0xabc <__vector_1>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 cf 05 	jmp	0xb9e <__vector_9>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 c5 06 	jmp	0xd8a <__vector_11>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3b       	cpi	r26, 0xBE	; 190
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 47 00 	jmp	0x8e <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <main>:
#define DEBUG 1


int main(void) 
{ 
  8e:	c0 e4       	ldi	r28, 0x40	; 64
  90:	d4 e0       	ldi	r29, 0x04	; 4
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

	/** Motoren **/
	motor_init();   //motoren initialisieren
  96:	0e 94 e9 01 	call	0x3d2 <motor_init>
	motor_l(0);		//linker motor aus (keine bremse)
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 5e 02 	call	0x4bc <motor_l>
	motor_r(0);		//rechter motor aus
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 72 02 	call	0x4e4 <motor_r>
	
	volatile int16_t speed_l = 0;  // motordrehzahl von -6000 ... 6000
  aa:	1a 82       	std	Y+2, r1	; 0x02
  ac:	19 82       	std	Y+1, r1	; 0x01
	volatile int16_t speed_r = 0;  // motordrehzahl von -6000 ... 6000
  ae:	1c 82       	std	Y+4, r1	; 0x04
  b0:	1b 82       	std	Y+3, r1	; 0x03
	int32_t	strecke_l = 0;			// zurückgelegte strecke in mm
	int32_t	strecke_r = 0;			// zurückgelegte strecke in mm
  b2:	88 24       	eor	r8, r8
  b4:	99 24       	eor	r9, r9
  b6:	54 01       	movw	r10, r8
	
	/** UART  	**/
	uart_init();	
  b8:	0e 94 88 06 	call	0xd10 <uart_init>
	
	/** Timer **/
	timer0_init();
  bc:	0e 94 c2 05 	call	0xb84 <timer0_init>
	
	/** steuerung der Tasten **/
	taste_init();
  c0:	0e 94 1a 06 	call	0xc34 <taste_init>
	
	/** LEDs	**/
	LED_DDR |=(1<<LED1); // LED2 auf dem Bord
  c4:	ba 9a       	sbi	0x17, 2	; 23
	LED_PORT |=(1<<LED1);// LED aus (low aktive)
  c6:	c2 9a       	sbi	0x18, 2	; 24
	

	uint8_t sm = 0;		// state machine (verschiedene programmzustände)
	char buffer[10];	// String
	uint8_t alt, alt2, alt3, alt4, alt5;
	alt=alt2=alt3=alt4=alt5=0;
  c8:	00 e0       	ldi	r16, 0x00	; 0
	double __tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
	else if (__tmp > 65535)
		__ticks = 0;	/* i.e. 65536 */
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x42>
  d4:	3c 01       	movw	r6, r24
  d6:	1c 01       	movw	r2, r24
  d8:	7c 01       	movw	r14, r24
  da:	85 e0       	ldi	r24, 0x05	; 5
  dc:	48 2e       	mov	r4, r24
  de:	51 2c       	mov	r5, r1
  e0:	4c 0e       	add	r4, r28
  e2:	5d 1e       	adc	r5, r29
  e4:	7d 8e       	std	Y+29, r7	; 0x1d
  e6:	6c 8e       	std	Y+28, r6	; 0x1c
  e8:	7b 8e       	std	Y+27, r7	; 0x1b
  ea:	6a 8e       	std	Y+26, r6	; 0x1a
  ec:	7f 8e       	std	Y+31, r7	; 0x1f
  ee:	6e 8e       	std	Y+30, r6	; 0x1e
	
	
	_delay_ms(150);
	
	
	while(1) 
	{ 
		/** Überprüfen der Tasten **/
 		if( get_key_press( 1<<TASTE0))			// START/STOP
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 5e 06 	call	0xcbc <get_key_press>
  f6:	88 23       	and	r24, r24
  f8:	09 f0       	breq	.+2      	; 0xfc <main+0x6e>
  fa:	fe c0       	rjmp	.+508    	; 0x2f8 <main+0x26a>
		{
			//LED_PORT ^=(1<<LED1);				//LED blinken, ist immer gut
			
			motor_l(0);							// linker motor aus (keine bremse)
			motor_r(0);							// rechter motor aus
			
			speed_l = 0; 						// motordrehzahl von -6000 ... 6000
			speed_r = 0; 						// motordrehzahl
			
			if (sm & 0x01) sm&=~0x01;			// Programmteil 1 (motor) starten/stoppen
			else sm |=0x01;
		}
		if( get_key_press( 1<<TASTE1))			// SEND UART
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 5e 06 	call	0xcbc <get_key_press>
 102:	88 23       	and	r24, r24
 104:	29 f0       	breq	.+10     	; 0x110 <main+0x82>
		{
			if (sm & 0x02) sm&=~0x02; 			// Programmteil 2 (UART) starten/stoppen
 106:	61 fe       	sbrs	r6, 1
 108:	0b c1       	rjmp	.+534    	; 0x320 <main+0x292>
 10a:	0d 7f       	andi	r16, 0xFD	; 253
 10c:	60 2e       	mov	r6, r16
 10e:	77 24       	eor	r7, r7
			else sm|=0x02;
		}
 		if( get_key_press( 1<<TASTE2))			// Vorwärts/Rückwärts
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	0e 94 5e 06 	call	0xcbc <get_key_press>
 116:	88 23       	and	r24, r24
 118:	29 f0       	breq	.+10     	; 0x124 <main+0x96>
		{
			//LED_PORT ^=(1<<LED1);				//LED blinken, ist immer gut
			
			if (sm & 0x04) sm&=~0x04;			// Programmteil 1 (motor) starten/stoppen
 11a:	62 fe       	sbrs	r6, 2
 11c:	ff c0       	rjmp	.+510    	; 0x31c <main+0x28e>
 11e:	0b 7f       	andi	r16, 0xFB	; 251
 120:	60 2e       	mov	r6, r16
 122:	77 24       	eor	r7, r7
			else sm |=0x04;
		}	
	
	
	
		/** Programmteil 1 **/
		/** Mit PWM rumspielen **/
		if((alt2!=(timer0_counter&128))&&sm & 0x01)
 124:	80 91 8e 00 	lds	r24, 0x008E
 128:	99 27       	eor	r25, r25
 12a:	80 78       	andi	r24, 0x80	; 128
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	28 16       	cp	r2, r24
 130:	39 06       	cpc	r3, r25
 132:	09 f4       	brne	.+2      	; 0x136 <main+0xa8>
 134:	7b c0       	rjmp	.+246    	; 0x22c <main+0x19e>
 136:	60 fe       	sbrs	r6, 0
 138:	79 c0       	rjmp	.+242    	; 0x22c <main+0x19e>
		{ 			
			alt2 = (timer0_counter&128);
 13a:	20 91 8e 00 	lds	r18, 0x008E
 13e:	20 78       	andi	r18, 0x80	; 128
			
			//LED_PORT ^=(1<<LED1);	// LED blinken, ist immer gut
			if(strecke_r < 2000) speed_r = 1000;
 140:	30 ed       	ldi	r19, 0xD0	; 208
 142:	83 16       	cp	r8, r19
 144:	37 e0       	ldi	r19, 0x07	; 7
 146:	93 06       	cpc	r9, r19
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	a3 06       	cpc	r10, r19
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b3 06       	cpc	r11, r19
 150:	24 f4       	brge	.+8      	; 0x15a <main+0xcc>
 152:	48 ee       	ldi	r20, 0xE8	; 232
 154:	53 e0       	ldi	r21, 0x03	; 3
 156:	5c 83       	std	Y+4, r21	; 0x04
 158:	4b 83       	std	Y+3, r20	; 0x03
			if((strecke_r >= 2000) && (strecke_r < 6000)) speed_r = 2000; 
 15a:	d5 01       	movw	r26, r10
 15c:	c4 01       	movw	r24, r8
 15e:	80 5d       	subi	r24, 0xD0	; 208
 160:	97 40       	sbci	r25, 0x07	; 7
 162:	a0 40       	sbci	r26, 0x00	; 0
 164:	b0 40       	sbci	r27, 0x00	; 0
 166:	80 5a       	subi	r24, 0xA0	; 160
 168:	9f 40       	sbci	r25, 0x0F	; 15
 16a:	a0 40       	sbci	r26, 0x00	; 0
 16c:	b0 40       	sbci	r27, 0x00	; 0
 16e:	20 f4       	brcc	.+8      	; 0x178 <main+0xea>
 170:	60 ed       	ldi	r22, 0xD0	; 208
 172:	77 e0       	ldi	r23, 0x07	; 7
 174:	7c 83       	std	Y+4, r23	; 0x04
 176:	6b 83       	std	Y+3, r22	; 0x03
			if((strecke_r >= 6000) && (strecke_r < 11000)) speed_r = 5000;
 178:	b5 01       	movw	r22, r10
 17a:	a4 01       	movw	r20, r8
 17c:	40 57       	subi	r20, 0x70	; 112
 17e:	57 41       	sbci	r21, 0x17	; 23
 180:	60 40       	sbci	r22, 0x00	; 0
 182:	70 40       	sbci	r23, 0x00	; 0
 184:	48 58       	subi	r20, 0x88	; 136
 186:	53 41       	sbci	r21, 0x13	; 19
 188:	60 40       	sbci	r22, 0x00	; 0
 18a:	70 40       	sbci	r23, 0x00	; 0
 18c:	20 f4       	brcc	.+8      	; 0x196 <main+0x108>
 18e:	a8 e8       	ldi	r26, 0x88	; 136
 190:	b3 e1       	ldi	r27, 0x13	; 19
 192:	bc 83       	std	Y+4, r27	; 0x04
 194:	ab 83       	std	Y+3, r26	; 0x03
			if((strecke_r >= 11000) && (strecke_r < 15000)) speed_r = 1000;
 196:	d5 01       	movw	r26, r10
 198:	c4 01       	movw	r24, r8
 19a:	88 5f       	subi	r24, 0xF8	; 248
 19c:	9a 42       	sbci	r25, 0x2A	; 42
 19e:	a0 40       	sbci	r26, 0x00	; 0
 1a0:	b0 40       	sbci	r27, 0x00	; 0
 1a2:	80 5a       	subi	r24, 0xA0	; 160
 1a4:	9f 40       	sbci	r25, 0x0F	; 15
 1a6:	a0 40       	sbci	r26, 0x00	; 0
 1a8:	b0 40       	sbci	r27, 0x00	; 0
 1aa:	20 f4       	brcc	.+8      	; 0x1b4 <main+0x126>
 1ac:	e8 ee       	ldi	r30, 0xE8	; 232
 1ae:	f3 e0       	ldi	r31, 0x03	; 3
 1b0:	fc 83       	std	Y+4, r31	; 0x04
 1b2:	eb 83       	std	Y+3, r30	; 0x03
			if((strecke_r >= 15000) && (strecke_r < 20000)) speed_r = 2500;
 1b4:	b5 01       	movw	r22, r10
 1b6:	a4 01       	movw	r20, r8
 1b8:	48 59       	subi	r20, 0x98	; 152
 1ba:	5a 43       	sbci	r21, 0x3A	; 58
 1bc:	60 40       	sbci	r22, 0x00	; 0
 1be:	70 40       	sbci	r23, 0x00	; 0
 1c0:	48 58       	subi	r20, 0x88	; 136
 1c2:	53 41       	sbci	r21, 0x13	; 19
 1c4:	60 40       	sbci	r22, 0x00	; 0
 1c6:	70 40       	sbci	r23, 0x00	; 0
 1c8:	20 f4       	brcc	.+8      	; 0x1d2 <main+0x144>
 1ca:	64 ec       	ldi	r22, 0xC4	; 196
 1cc:	79 e0       	ldi	r23, 0x09	; 9
 1ce:	7c 83       	std	Y+4, r23	; 0x04
 1d0:	6b 83       	std	Y+3, r22	; 0x03
			if((strecke_r >= 20000) && (strecke_r < 24000)) speed_r = 700;
 1d2:	d5 01       	movw	r26, r10
 1d4:	c4 01       	movw	r24, r8
 1d6:	80 52       	subi	r24, 0x20	; 32
 1d8:	9e 44       	sbci	r25, 0x4E	; 78
 1da:	a0 40       	sbci	r26, 0x00	; 0
 1dc:	b0 40       	sbci	r27, 0x00	; 0
 1de:	80 5a       	subi	r24, 0xA0	; 160
 1e0:	9f 40       	sbci	r25, 0x0F	; 15
 1e2:	a0 40       	sbci	r26, 0x00	; 0
 1e4:	b0 40       	sbci	r27, 0x00	; 0
 1e6:	20 f4       	brcc	.+8      	; 0x1f0 <main+0x162>
 1e8:	ac eb       	ldi	r26, 0xBC	; 188
 1ea:	b2 e0       	ldi	r27, 0x02	; 2
 1ec:	bc 83       	std	Y+4, r27	; 0x04
 1ee:	ab 83       	std	Y+3, r26	; 0x03
			if((strecke_r >= 24000) && (strecke_r < 30000)) speed_r = 3500;
 1f0:	b5 01       	movw	r22, r10
 1f2:	a4 01       	movw	r20, r8
 1f4:	40 5c       	subi	r20, 0xC0	; 192
 1f6:	5d 45       	sbci	r21, 0x5D	; 93
 1f8:	60 40       	sbci	r22, 0x00	; 0
 1fa:	70 40       	sbci	r23, 0x00	; 0
 1fc:	40 57       	subi	r20, 0x70	; 112
 1fe:	57 41       	sbci	r21, 0x17	; 23
 200:	60 40       	sbci	r22, 0x00	; 0
 202:	70 40       	sbci	r23, 0x00	; 0
 204:	20 f4       	brcc	.+8      	; 0x20e <main+0x180>
 206:	ec ea       	ldi	r30, 0xAC	; 172
 208:	fd e0       	ldi	r31, 0x0D	; 13
 20a:	fc 83       	std	Y+4, r31	; 0x04
 20c:	eb 83       	std	Y+3, r30	; 0x03
			if(strecke_r >= 30000) speed_r = 2200;
 20e:	80 e3       	ldi	r24, 0x30	; 48
 210:	88 16       	cp	r8, r24
 212:	85 e7       	ldi	r24, 0x75	; 117
 214:	98 06       	cpc	r9, r24
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	a8 06       	cpc	r10, r24
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	b8 06       	cpc	r11, r24
 21e:	24 f0       	brlt	.+8      	; 0x228 <main+0x19a>
 220:	68 e9       	ldi	r22, 0x98	; 152
 222:	78 e0       	ldi	r23, 0x08	; 8
 224:	7c 83       	std	Y+4, r23	; 0x04
 226:	6b 83       	std	Y+3, r22	; 0x03
 228:	22 2e       	mov	r2, r18
 22a:	33 24       	eor	r3, r3
		}
		
		
		
		/** Programmteil 2 **/
		/** status über UARt ausgeben **/
		/* Timer0_counter hat sich geändert und sm2 ist aktiv */
		if((alt!=(timer0_counter&4))&&(sm & 0x02))		
 22c:	80 91 8e 00 	lds	r24, 0x008E
 230:	99 27       	eor	r25, r25
 232:	84 70       	andi	r24, 0x04	; 4
 234:	90 70       	andi	r25, 0x00	; 0
 236:	e8 16       	cp	r14, r24
 238:	f9 06       	cpc	r15, r25
 23a:	11 f0       	breq	.+4      	; 0x240 <main+0x1b2>
 23c:	61 fc       	sbrc	r6, 1
 23e:	72 c0       	rjmp	.+228    	; 0x324 <main+0x296>
		{
			alt = (timer0_counter&4);	
			//LED_PORT ^=(1<<LED1);	//LED blinken, ist immer gut
			
			uint16_t strom;
			uint16_t drehzahl;
			strom = get_Motorstrom(MOTOR_RECHTS_SHUNT);		// ermittelt dden Strom
			drehzahl= get_Motordrehzahl();					// ermittelt die Drehzahl
#ifndef DEBUG			
			uart_putc(0x0c);								// terminal clearsceen (bildschirm löschen)
			
			
			uart_puts("\r\n");
			uart_puts("Statusmeldung\t\trechter Motor\r\n\r\n");
			uart_puts("PWM   Drehzahl   Motorstrom\r\n ");
			
#endif			
			/* Gefahrene Strecke */
			ltoa(strecke_r, buffer, 10);
			uart_puts(buffer);
			uart_puts("\t");
			/* Wert der sollDrehzahl ausgeben */
			itoa(speed_r, buffer, 10);
			uart_puts(buffer);
			uart_puts("\t");
			/* istDrehzahl ausgeben */
			utoa(drehzahl, buffer, 10);
			uart_puts(buffer);
			uart_puts("\t");
			/* Strom ausgeben */
			utoa(strom, buffer, 10);
			uart_puts(buffer);
			uart_puts("\t");
			/* Stromsolwert ausgeben */
			utoa(sollstrom_rechts, buffer, 10);
			uart_puts(buffer);
			uart_puts("\r\n");
		}
		
		
		
		/** Stromregelung **/	
		if((alt3!=(timer0_counter&4)))		//alle 6ms
 240:	80 91 8e 00 	lds	r24, 0x008E
 244:	99 27       	eor	r25, r25
 246:	84 70       	andi	r24, 0x04	; 4
 248:	90 70       	andi	r25, 0x00	; 0
 24a:	2a 8d       	ldd	r18, Y+26	; 0x1a
 24c:	3b 8d       	ldd	r19, Y+27	; 0x1b
 24e:	28 17       	cp	r18, r24
 250:	39 07       	cpc	r19, r25
 252:	39 f0       	breq	.+14     	; 0x262 <main+0x1d4>
		{	
			alt3 = (timer0_counter&4);
 254:	30 91 8e 00 	lds	r19, 0x008E
 258:	34 70       	andi	r19, 0x04	; 4
 25a:	a3 2f       	mov	r26, r19
 25c:	bb 27       	eor	r27, r27
 25e:	bb 8f       	std	Y+27, r27	; 0x1b
 260:	aa 8f       	std	Y+26, r26	; 0x1a
			//LED_PORT ^=(1<<LED1);			// LED blinken, ist immer gut
			
			//stromreglung_rechts();
		}
		
		
		
		/** Drehzahlregelung **/
		if(alt4!=(timer0_counter&22))		// alle 33ms
 262:	80 91 8e 00 	lds	r24, 0x008E
 266:	99 27       	eor	r25, r25
 268:	86 71       	andi	r24, 0x16	; 22
 26a:	90 70       	andi	r25, 0x00	; 0
 26c:	4c 8d       	ldd	r20, Y+28	; 0x1c
 26e:	5d 8d       	ldd	r21, Y+29	; 0x1d
 270:	48 17       	cp	r20, r24
 272:	59 07       	cpc	r21, r25
 274:	59 f0       	breq	.+22     	; 0x28c <main+0x1fe>
		{
			alt4 = (timer0_counter&22);
 276:	10 91 8e 00 	lds	r17, 0x008E
 27a:	16 71       	andi	r17, 0x16	; 22
			//LED_PORT ^=(1<<LED1);			// LED blinken, ist immer gut
			
			drehzahlregelung_rechts(speed_r);
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	9c 81       	ldd	r25, Y+4	; 0x04
 280:	0e 94 ec 03 	call	0x7d8 <drehzahlregelung_rechts>
 284:	81 2f       	mov	r24, r17
 286:	99 27       	eor	r25, r25
 288:	9d 8f       	std	Y+29, r25	; 0x1d
 28a:	8c 8f       	std	Y+28, r24	; 0x1c
		}
		
		
		
		/** Odometrie **/
		if(alt5!=(timer0_counter&128))		// alle 96ms
 28c:	80 91 8e 00 	lds	r24, 0x008E
 290:	99 27       	eor	r25, r25
 292:	80 78       	andi	r24, 0x80	; 128
 294:	90 70       	andi	r25, 0x00	; 0
 296:	ee 8d       	ldd	r30, Y+30	; 0x1e
 298:	ff 8d       	ldd	r31, Y+31	; 0x1f
 29a:	e8 17       	cp	r30, r24
 29c:	f9 07       	cpc	r31, r25
 29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0x214>
 2a0:	27 cf       	rjmp	.-434    	; 0xf0 <main+0x62>
		{
			int32_t tmp;
			char buffer[11];
			alt5 = (timer0_counter&128);
 2a2:	10 91 8e 00 	lds	r17, 0x008E
 2a6:	10 78       	andi	r17, 0x80	; 128
			LED_PORT ^=(1<<LED1);			// LED blinken, ist immer gut
 2a8:	78 b2       	in	r7, 0x18	; 24
 2aa:	94 e0       	ldi	r25, 0x04	; 4
 2ac:	79 26       	eor	r7, r25
 2ae:	78 ba       	out	0x18, r7	; 24
			
			tmp = get_Motordrehzahl();			
 2b0:	0e 94 98 02 	call	0x530 <get_Motordrehzahl>
 2b4:	aa 27       	eor	r26, r26
 2b6:	bb 27       	eor	r27, r27
			tmp = (int32_t)(tmp * RADUMFANG_R * 473);
 2b8:	bc 01       	movw	r22, r24
 2ba:	cd 01       	movw	r24, r26
 2bc:	28 e7       	ldi	r18, 0x78	; 120
 2be:	30 e4       	ldi	r19, 0x40	; 64
 2c0:	42 e0       	ldi	r20, 0x02	; 2
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	0e 94 75 07 	call	0xeea <__mulsi3>
 2c8:	dc 01       	movw	r26, r24
 2ca:	cb 01       	movw	r24, r22
			tmp = (int32_t)(tmp / 13500000);
 2cc:	bc 01       	movw	r22, r24
 2ce:	cd 01       	movw	r24, r26
 2d0:	20 e6       	ldi	r18, 0x60	; 96
 2d2:	3e ef       	ldi	r19, 0xFE	; 254
 2d4:	4d ec       	ldi	r20, 0xCD	; 205
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	0e 94 ca 07 	call	0xf94 <__divmodsi4>
			strecke_r +=tmp;			
 2dc:	82 0e       	add	r8, r18
 2de:	93 1e       	adc	r9, r19
 2e0:	a4 1e       	adc	r10, r20
 2e2:	b5 1e       	adc	r11, r21
 2e4:	61 2f       	mov	r22, r17
 2e6:	77 27       	eor	r23, r23
 2e8:	7f 8f       	std	Y+31, r23	; 0x1f
 2ea:	6e 8f       	std	Y+30, r22	; 0x1e
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 5e 06 	call	0xcbc <get_key_press>
 2f2:	88 23       	and	r24, r24
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <main+0x26a>
 2f6:	02 cf       	rjmp	.-508    	; 0xfc <main+0x6e>
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 5e 02 	call	0x4bc <motor_l>
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 72 02 	call	0x4e4 <motor_r>
 308:	1a 82       	std	Y+2, r1	; 0x02
 30a:	19 82       	std	Y+1, r1	; 0x01
 30c:	1c 82       	std	Y+4, r1	; 0x04
 30e:	1b 82       	std	Y+3, r1	; 0x03
 310:	60 fe       	sbrs	r6, 0
 312:	5b c0       	rjmp	.+182    	; 0x3ca <main+0x33c>
 314:	0e 7f       	andi	r16, 0xFE	; 254
 316:	60 2e       	mov	r6, r16
 318:	77 24       	eor	r7, r7
 31a:	f0 ce       	rjmp	.-544    	; 0xfc <main+0x6e>
 31c:	04 60       	ori	r16, 0x04	; 4
 31e:	00 cf       	rjmp	.-512    	; 0x120 <main+0x92>
 320:	02 60       	ori	r16, 0x02	; 2
 322:	f4 ce       	rjmp	.-536    	; 0x10c <main+0x7e>
 324:	10 91 8e 00 	lds	r17, 0x008E
 328:	14 70       	andi	r17, 0x04	; 4
 32a:	87 e0       	ldi	r24, 0x07	; 7
 32c:	0e 94 86 02 	call	0x50c <get_Motorstrom>
 330:	6c 01       	movw	r12, r24
 332:	0e 94 98 02 	call	0x530 <get_Motordrehzahl>
 336:	7c 01       	movw	r14, r24
 338:	2a e0       	ldi	r18, 0x0A	; 10
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	a2 01       	movw	r20, r4
 33e:	c5 01       	movw	r24, r10
 340:	b4 01       	movw	r22, r8
 342:	0e 94 1b 07 	call	0xe36 <ltoa>
 346:	c2 01       	movw	r24, r4
 348:	0e 94 7e 06 	call	0xcfc <uart_puts>
 34c:	80 e6       	ldi	r24, 0x60	; 96
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	0e 94 7e 06 	call	0xcfc <uart_puts>
 354:	4a e0       	ldi	r20, 0x0A	; 10
 356:	50 e0       	ldi	r21, 0x00	; 0
 358:	b2 01       	movw	r22, r4
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	9c 81       	ldd	r25, Y+4	; 0x04
 35e:	0e 94 fa 06 	call	0xdf4 <itoa>
 362:	c2 01       	movw	r24, r4
 364:	0e 94 7e 06 	call	0xcfc <uart_puts>
 368:	80 e6       	ldi	r24, 0x60	; 96
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 7e 06 	call	0xcfc <uart_puts>
 370:	4a e0       	ldi	r20, 0x0A	; 10
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	b2 01       	movw	r22, r4
 376:	c7 01       	movw	r24, r14
 378:	0e 94 4f 07 	call	0xe9e <utoa>
 37c:	c2 01       	movw	r24, r4
 37e:	0e 94 7e 06 	call	0xcfc <uart_puts>
 382:	80 e6       	ldi	r24, 0x60	; 96
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 7e 06 	call	0xcfc <uart_puts>
 38a:	4a e0       	ldi	r20, 0x0A	; 10
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	b2 01       	movw	r22, r4
 390:	c6 01       	movw	r24, r12
 392:	0e 94 4f 07 	call	0xe9e <utoa>
 396:	c2 01       	movw	r24, r4
 398:	0e 94 7e 06 	call	0xcfc <uart_puts>
 39c:	80 e6       	ldi	r24, 0x60	; 96
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 7e 06 	call	0xcfc <uart_puts>
 3a4:	4a e0       	ldi	r20, 0x0A	; 10
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	b2 01       	movw	r22, r4
 3aa:	80 91 8b 00 	lds	r24, 0x008B
 3ae:	90 91 8c 00 	lds	r25, 0x008C
 3b2:	0e 94 4f 07 	call	0xe9e <utoa>
 3b6:	c2 01       	movw	r24, r4
 3b8:	0e 94 7e 06 	call	0xcfc <uart_puts>
 3bc:	82 e6       	ldi	r24, 0x62	; 98
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 7e 06 	call	0xcfc <uart_puts>
 3c4:	e1 2e       	mov	r14, r17
 3c6:	ff 24       	eor	r15, r15
 3c8:	3b cf       	rjmp	.-394    	; 0x240 <main+0x1b2>
 3ca:	01 60       	ori	r16, 0x01	; 1
 3cc:	60 2e       	mov	r6, r16
 3ce:	77 24       	eor	r7, r7
 3d0:	95 ce       	rjmp	.-726    	; 0xfc <main+0x6e>

000003d2 <motor_init>:
void motor_init(void) 
{ 
	/** DATENRICHTUNG und ANFANGSWERT **/
	// Motor links
	MOTOR_LINKS_PWM_DDR |= (1<<MOTOR_LINKS_PWM); 	// Ausgang
 3d2:	8d 9a       	sbi	0x11, 5	; 17
	MOTOR_LINKS_PWM_PORT &=~(1<<MOTOR_LINKS_PWM); 	//0 Anfangswert AUS
 3d4:	95 98       	cbi	0x12, 5	; 18
	MOTOR_LINKS_RICHTUNG_DDR  |= (1<<MOTOR_LINKS_RICHTUNG0)|(1<<MOTOR_LINKS_RICHTUNG1);	// Ausgang
 3d6:	b4 b3       	in	r27, 0x14	; 20
 3d8:	b0 6c       	ori	r27, 0xC0	; 192
 3da:	b4 bb       	out	0x14, r27	; 20
	MOTOR_LINKS_RICHTUNG_PORT &=~((1<<MOTOR_LINKS_RICHTUNG0)|(1<<MOTOR_LINKS_RICHTUNG1));	//0 Anfangswert AUS
 3dc:	a5 b3       	in	r26, 0x15	; 21
 3de:	af 73       	andi	r26, 0x3F	; 63
 3e0:	a5 bb       	out	0x15, r26	; 21
	MOTOR_LINKS_SHUNT_DDR &=~(1<<MOTOR_LINKS_SHUNT);	// Eingang KEIN PULLUP
 3e2:	d6 98       	cbi	0x1a, 6	; 26


	// Motor rechts
	MOTOR_RECHTS_PWM_DDR |= (1<<MOTOR_RECHTS_PWM);		// Ausgang
 3e4:	8c 9a       	sbi	0x11, 4	; 17
	MOTOR_RECHTS_PWM_PORT &=~(1<<MOTOR_RECHTS_PWM );	//0 Anfangswert AUS
 3e6:	94 98       	cbi	0x12, 4	; 18
	MOTOR_RECHTS_RICHTUNG_DDR |=(1<<MOTOR_RECHTS_RICHTUNG0)|(1<<MOTOR_RECHTS_RICHTUNG1);		// Ausgang
 3e8:	94 b3       	in	r25, 0x14	; 20
 3ea:	90 63       	ori	r25, 0x30	; 48
 3ec:	94 bb       	out	0x14, r25	; 20
	MOTOR_RECHTS_RICHTUNG_PORT &=~((1<<MOTOR_RECHTS_RICHTUNG0)|(1<<MOTOR_RECHTS_RICHTUNG1)); 	//0 Anfangswert AUS
 3ee:	75 b3       	in	r23, 0x15	; 21
 3f0:	7f 7c       	andi	r23, 0xCF	; 207
 3f2:	75 bb       	out	0x15, r23	; 21
	MOTOR_RECHTS_SHUNT_DDR &=~(1<<MOTOR_RECHTS_SHUNT);	// Eingang KEIN PULLUP
 3f4:	d7 98       	cbi	0x1a, 7	; 26
	
	/* Impulsgeber rechts */	
	DDRD &= ~(1<<PD2);		//PORTD.2 als Eingang
 3f6:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1<<PD2);		//PORTD.2 mit Pullup
 3f8:	92 9a       	sbi	0x12, 2	; 18
	GICR |= (1<<INT0);		// External Interrupt Request 0 Enable
 3fa:	6b b7       	in	r22, 0x3b	; 59
 3fc:	60 64       	ori	r22, 0x40	; 64
 3fe:	6b bf       	out	0x3b, r22	; 59
	MCUCR |= (1<<ISC00)|(1<<ISC00);	// Die steigende Flanke an INT0 erzeugt einen Interrupt. 	
 400:	55 b7       	in	r21, 0x35	; 53
 402:	51 60       	ori	r21, 0x01	; 1
 404:	55 bf       	out	0x35, r21	; 53
	
	/* fast 9-bit PWM aktivieren ( nicht invertiert ) */ 
	TCCR1A = (1<<WGM11); 
 406:	42 e0       	ldi	r20, 0x02	; 2
 408:	4f bd       	out	0x2f, r20	; 47
	/* Einstellen der PWM-Frequenz auf ca. 21,6kHz ( Prescaler = 1 ) */ 
	TCCR1B = (1<<CS10)|(1<<WGM12); 
 40a:	39 e0       	ldi	r19, 0x09	; 9
 40c:	3e bd       	out	0x2e, r19	; 46
	/* PWN einschalten -- > PIN mit PWM verbinden */ 
	PWM_LINKS_ON; 
 40e:	2f b5       	in	r18, 0x2f	; 47
 410:	20 68       	ori	r18, 0x80	; 128
 412:	2f bd       	out	0x2f, r18	; 47
	PWM_RECHTS_ON;
 414:	8f b5       	in	r24, 0x2f	; 47
 416:	80 62       	ori	r24, 0x20	; 32
 418:	8f bd       	out	0x2f, r24	; 47

	/* Globale Variablen initialisieren */
	m1=m2=m3=m4=m5=m6=m7=m8=m9=m0=0x00;	//zum Mittelwertbilden der Drehzahl
 41a:	10 92 95 00 	sts	0x0095, r1
 41e:	10 92 94 00 	sts	0x0094, r1
 422:	10 92 b6 00 	sts	0x00B6, r1
 426:	10 92 b5 00 	sts	0x00B5, r1
 42a:	10 92 a2 00 	sts	0x00A2, r1
 42e:	10 92 a1 00 	sts	0x00A1, r1
 432:	10 92 ba 00 	sts	0x00BA, r1
 436:	10 92 b9 00 	sts	0x00B9, r1
 43a:	10 92 9d 00 	sts	0x009D, r1
 43e:	10 92 9c 00 	sts	0x009C, r1
 442:	10 92 a8 00 	sts	0x00A8, r1
 446:	10 92 a7 00 	sts	0x00A7, r1
 44a:	10 92 99 00 	sts	0x0099, r1
 44e:	10 92 98 00 	sts	0x0098, r1
 452:	10 92 b4 00 	sts	0x00B4, r1
 456:	10 92 b3 00 	sts	0x00B3, r1
 45a:	10 92 9b 00 	sts	0x009B, r1
 45e:	10 92 9a 00 	sts	0x009A, r1
 462:	10 92 ae 00 	sts	0x00AE, r1
 466:	10 92 ad 00 	sts	0x00AD, r1
	time_delta=0x00;
 46a:	10 92 9f 00 	sts	0x009F, r1
 46e:	10 92 9e 00 	sts	0x009E, r1
	counter_alt=0;							// alter Timerstand
 472:	10 92 97 00 	sts	0x0097, r1
 476:	10 92 96 00 	sts	0x0096, r1
	counter_neu=0;							// neuer Timerstand
 47a:	10 92 b2 00 	sts	0x00B2, r1
 47e:	10 92 b1 00 	sts	0x00B1, r1
	sollstrom_rechts=0;						// sollstrom
 482:	10 92 8c 00 	sts	0x008C, r1
 486:	10 92 8b 00 	sts	0x008B, r1
	esum_strom_rechts=0;					// Integrator Anfangswert		
 48a:	10 92 a3 00 	sts	0x00A3, r1
 48e:	10 92 a4 00 	sts	0x00A4, r1
 492:	10 92 a5 00 	sts	0x00A5, r1
 496:	10 92 a6 00 	sts	0x00A6, r1
	esum_drehzahl_rechts=0;					// Integrator Anfangswert
 49a:	10 92 a9 00 	sts	0x00A9, r1
 49e:	10 92 aa 00 	sts	0x00AA, r1
 4a2:	10 92 ab 00 	sts	0x00AB, r1
 4a6:	10 92 ac 00 	sts	0x00AC, r1
	ealt_drehzahl_rechts=0;					// alte Regelabweichung
 4aa:	10 92 90 00 	sts	0x0090, r1
 4ae:	10 92 91 00 	sts	0x0091, r1
 4b2:	10 92 92 00 	sts	0x0092, r1
 4b6:	10 92 93 00 	sts	0x0093, r1
 4ba:	08 95       	ret

000004bc <motor_l>:
	
} 

/** setzt die Richtung und die Geschwindigkeit des linken Motors **/
void motor_l(int16_t speed) // Linker Motor(A)
{
	if(speed<0) 			//bei negativen zahlen rückwärts fahren
 4bc:	97 fd       	sbrc	r25, 7
 4be:	09 c0       	rjmp	.+18     	; 0x4d2 <motor_l+0x16>
	{
		speed= (~speed)+1;	// bildet das zweierkomplement zurück
		MOTOR_LINKS_RICHTUNG_PORT &= ~(1<<MOTOR_LINKS_RICHTUNG1);	//0
		MOTOR_LINKS_RICHTUNG_PORT |=(1<<MOTOR_LINKS_RICHTUNG0);	//1
	}
	else{					//bei positiven, vorwärts
		MOTOR_LINKS_RICHTUNG_PORT &= ~(1<<MOTOR_LINKS_RICHTUNG0);	//0	
 4c0:	ae 98       	cbi	0x15, 6	; 21
		MOTOR_LINKS_RICHTUNG_PORT |=(1<<MOTOR_LINKS_RICHTUNG1);	//1		
 4c2:	af 9a       	sbi	0x15, 7	; 21
	}
	if(speed>(PWM_MAX)) speed=PWM_MAX;	// begrenzt den speed auf maximum
 4c4:	22 e0       	ldi	r18, 0x02	; 2
 4c6:	80 30       	cpi	r24, 0x00	; 0
 4c8:	92 07       	cpc	r25, r18
 4ca:	4c f0       	brlt	.+18     	; 0x4de <motor_l+0x22>
 4cc:	8f ef       	ldi	r24, 0xFF	; 255
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	06 c0       	rjmp	.+12     	; 0x4de <motor_l+0x22>
 4d2:	90 95       	com	r25
 4d4:	81 95       	neg	r24
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	af 98       	cbi	0x15, 7	; 21
 4da:	ae 9a       	sbi	0x15, 6	; 21
 4dc:	f3 cf       	rjmp	.-26     	; 0x4c4 <motor_l+0x8>
	PWM_LINKS = speed; 					// PWM mit 9Bit
 4de:	9b bd       	out	0x2b, r25	; 43
 4e0:	8a bd       	out	0x2a, r24	; 42
 4e2:	08 95       	ret

000004e4 <motor_r>:
}

/** setzt die Richtung und die Geschwindigkeit des rechten Motors **/
void motor_r(int16_t speed) // Rechter Motor(B)
{
	if(speed<0) 		//bei negativen zahlen rückwärts fahren
 4e4:	97 fd       	sbrc	r25, 7
 4e6:	09 c0       	rjmp	.+18     	; 0x4fa <motor_r+0x16>
	{
		speed= (~speed)+1;	// bildet das zweierkomplement zurück
		MOTOR_RECHTS_RICHTUNG_PORT &= ~(1<<MOTOR_RECHTS_RICHTUNG1);//0
		MOTOR_RECHTS_RICHTUNG_PORT |=(1<<MOTOR_RECHTS_RICHTUNG0);	//1
		
	} else {			//bei 0 oder positiven, vorwärts
		MOTOR_RECHTS_RICHTUNG_PORT &= ~(1<<MOTOR_RECHTS_RICHTUNG0);//0
 4e8:	ac 98       	cbi	0x15, 4	; 21
		MOTOR_RECHTS_RICHTUNG_PORT |=(1<<MOTOR_RECHTS_RICHTUNG1);	//1
 4ea:	ad 9a       	sbi	0x15, 5	; 21
	}
	if(speed>(PWM_MAX)) speed=PWM_MAX;	// begrenzt den speed auf maximum
 4ec:	22 e0       	ldi	r18, 0x02	; 2
 4ee:	80 30       	cpi	r24, 0x00	; 0
 4f0:	92 07       	cpc	r25, r18
 4f2:	4c f0       	brlt	.+18     	; 0x506 <motor_r+0x22>
 4f4:	8f ef       	ldi	r24, 0xFF	; 255
 4f6:	91 e0       	ldi	r25, 0x01	; 1
 4f8:	06 c0       	rjmp	.+12     	; 0x506 <motor_r+0x22>
 4fa:	90 95       	com	r25
 4fc:	81 95       	neg	r24
 4fe:	9f 4f       	sbci	r25, 0xFF	; 255
 500:	ad 98       	cbi	0x15, 5	; 21
 502:	ac 9a       	sbi	0x15, 4	; 21
 504:	f3 cf       	rjmp	.-26     	; 0x4ec <motor_r+0x8>
	PWM_RECHTS = speed; 				// PWM mit 9Bit
 506:	99 bd       	out	0x29, r25	; 41
 508:	88 bd       	out	0x28, r24	; 40
 50a:	08 95       	ret

0000050c <get_Motorstrom>:
}

/* Ermittelt den Motorstrom */
uint16_t get_Motorstrom(uint8_t motor_shunt)
{
	uint16_t data;
	
	/* liest den Aktuellen Wert am AD */
	data = get_adc(motor_shunt);
 50c:	0e 94 d5 06 	call	0xdaa <get_adc>

	/* Umrechnen in mA */
	data = (data * 24)/10;
 510:	28 e1       	ldi	r18, 0x18	; 24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	82 9f       	mul	r24, r18
 516:	a0 01       	movw	r20, r0
 518:	83 9f       	mul	r24, r19
 51a:	50 0d       	add	r21, r0
 51c:	92 9f       	mul	r25, r18
 51e:	50 0d       	add	r21, r0
 520:	11 24       	eor	r1, r1
 522:	ca 01       	movw	r24, r20
 524:	6a e0       	ldi	r22, 0x0A	; 10
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	0e 94 94 07 	call	0xf28 <__udivmodhi4>
 52c:	cb 01       	movw	r24, r22
 52e:	08 95       	ret

00000530 <get_Motordrehzahl>:
	
	return(data);
}



/* Ermittelt die Motordrehzahl */
/* BUG: keine Unterscheidung der Drehrichtungen */
uint16_t get_Motordrehzahl()
{
 530:	ef 92       	push	r14
 532:	ff 92       	push	r15
 534:	0f 93       	push	r16
 536:	1f 93       	push	r17
 538:	cf 93       	push	r28
	uint32_t tmp;
	

	/* wenn 4 mal kein Interrupt kam, steht der Motor */
	if(is_not_moving_rechts<5) 
 53a:	c0 91 a0 00 	lds	r28, 0x00A0
 53e:	c5 30       	cpi	r28, 0x05	; 5
 540:	08 f0       	brcs	.+2      	; 0x544 <get_Motordrehzahl+0x14>
 542:	78 c0       	rjmp	.+240    	; 0x634 <get_Motordrehzahl+0x104>
	{
		/* gleitender Mittelwert über 8 Messugen */
		m8=m7;m7=m6;m6=m5;m5=m4;m4=m3;m3=m2;m2=m1;m1=time_delta;
 544:	e0 90 b9 00 	lds	r14, 0x00B9
 548:	f0 90 ba 00 	lds	r15, 0x00BA
 54c:	f0 92 a2 00 	sts	0x00A2, r15
 550:	e0 92 a1 00 	sts	0x00A1, r14
 554:	00 91 9c 00 	lds	r16, 0x009C
 558:	10 91 9d 00 	lds	r17, 0x009D
 55c:	10 93 ba 00 	sts	0x00BA, r17
 560:	00 93 b9 00 	sts	0x00B9, r16
 564:	a0 91 a7 00 	lds	r26, 0x00A7
 568:	b0 91 a8 00 	lds	r27, 0x00A8
 56c:	b0 93 9d 00 	sts	0x009D, r27
 570:	a0 93 9c 00 	sts	0x009C, r26
 574:	e0 91 98 00 	lds	r30, 0x0098
 578:	f0 91 99 00 	lds	r31, 0x0099
 57c:	f0 93 a8 00 	sts	0x00A8, r31
 580:	e0 93 a7 00 	sts	0x00A7, r30
 584:	60 91 b3 00 	lds	r22, 0x00B3
 588:	70 91 b4 00 	lds	r23, 0x00B4
 58c:	70 93 99 00 	sts	0x0099, r23
 590:	60 93 98 00 	sts	0x0098, r22
 594:	40 91 9a 00 	lds	r20, 0x009A
 598:	50 91 9b 00 	lds	r21, 0x009B
 59c:	50 93 b4 00 	sts	0x00B4, r21
 5a0:	40 93 b3 00 	sts	0x00B3, r20
 5a4:	20 91 ad 00 	lds	r18, 0x00AD
 5a8:	30 91 ae 00 	lds	r19, 0x00AE
 5ac:	30 93 9b 00 	sts	0x009B, r19
 5b0:	20 93 9a 00 	sts	0x009A, r18
 5b4:	80 91 9e 00 	lds	r24, 0x009E
 5b8:	90 91 9f 00 	lds	r25, 0x009F
 5bc:	90 93 ae 00 	sts	0x00AE, r25
 5c0:	80 93 ad 00 	sts	0x00AD, r24
		tmp=(m1+m2+m3+m4+m5+m6+m7+m8)/8;	
 5c4:	28 0f       	add	r18, r24
 5c6:	39 1f       	adc	r19, r25
 5c8:	24 0f       	add	r18, r20
 5ca:	35 1f       	adc	r19, r21
 5cc:	26 0f       	add	r18, r22
 5ce:	37 1f       	adc	r19, r23
 5d0:	2e 0f       	add	r18, r30
 5d2:	3f 1f       	adc	r19, r31
 5d4:	2a 0f       	add	r18, r26
 5d6:	3b 1f       	adc	r19, r27
 5d8:	20 0f       	add	r18, r16
 5da:	31 1f       	adc	r19, r17
 5dc:	2e 0d       	add	r18, r14
 5de:	3f 1d       	adc	r19, r15
 5e0:	37 fd       	sbrc	r19, 7
 5e2:	34 c0       	rjmp	.+104    	; 0x64c <get_Motordrehzahl+0x11c>
 5e4:	35 95       	asr	r19
 5e6:	27 95       	ror	r18
 5e8:	35 95       	asr	r19
 5ea:	27 95       	ror	r18
 5ec:	35 95       	asr	r19
 5ee:	27 95       	ror	r18
 5f0:	44 27       	eor	r20, r20
 5f2:	37 fd       	sbrc	r19, 7
 5f4:	40 95       	com	r20
 5f6:	54 2f       	mov	r21, r20
	
		/* Umrechnung in Upm und begrenzung */
		tmp=tmp*256*2;	//
 5f8:	89 e0       	ldi	r24, 0x09	; 9
 5fa:	22 0f       	add	r18, r18
 5fc:	33 1f       	adc	r19, r19
 5fe:	44 1f       	adc	r20, r20
 600:	55 1f       	adc	r21, r21
 602:	8a 95       	dec	r24
 604:	d1 f7       	brne	.-12     	; 0x5fa <get_Motordrehzahl+0xca>
		if(tmp!=0)
 606:	21 15       	cp	r18, r1
 608:	31 05       	cpc	r19, r1
 60a:	41 05       	cpc	r20, r1
 60c:	51 05       	cpc	r21, r1
 60e:	51 f0       	breq	.+20     	; 0x624 <get_Motordrehzahl+0xf4>
			drehzahl_rechts=(11059000*60)/tmp;	//
 610:	60 e2       	ldi	r22, 0x20	; 32
 612:	71 ed       	ldi	r23, 0xD1	; 209
 614:	8c e8       	ldi	r24, 0x8C	; 140
 616:	97 e2       	ldi	r25, 0x27	; 39
 618:	0e 94 a8 07 	call	0xf50 <__udivmodsi4>
 61c:	30 93 b8 00 	sts	0x00B8, r19
 620:	20 93 b7 00 	sts	0x00B7, r18
		if(drehzahl_rechts>7000) drehzahl_rechts=0;
 624:	80 91 b7 00 	lds	r24, 0x00B7
 628:	90 91 b8 00 	lds	r25, 0x00B8
 62c:	2b e1       	ldi	r18, 0x1B	; 27
 62e:	89 35       	cpi	r24, 0x59	; 89
 630:	92 07       	cpc	r25, r18
 632:	34 f0       	brlt	.+12     	; 0x640 <get_Motordrehzahl+0x110>
	}
	else
	{
		/* vier mal kein interrupt setzt die Drehzahl auf 0 */
		//m1=m2=m3=m4=m5=m6=m7=m8=m9=m0=0xff; //Mittelwertbidlung zurücksetzen
		drehzahl_rechts=0;
 634:	10 92 b8 00 	sts	0x00B8, r1
 638:	10 92 b7 00 	sts	0x00B7, r1
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	90 e0       	ldi	r25, 0x00	; 0
	}
	if(is_not_moving_rechts<0xff)	is_not_moving_rechts++;	//Motor dreht nicht ++
 640:	cf 3f       	cpi	r28, 0xFF	; 255
 642:	39 f0       	breq	.+14     	; 0x652 <get_Motordrehzahl+0x122>
 644:	cf 5f       	subi	r28, 0xFF	; 255
 646:	c0 93 a0 00 	sts	0x00A0, r28
 64a:	03 c0       	rjmp	.+6      	; 0x652 <get_Motordrehzahl+0x122>
 64c:	29 5f       	subi	r18, 0xF9	; 249
 64e:	3f 4f       	sbci	r19, 0xFF	; 255
 650:	c9 cf       	rjmp	.-110    	; 0x5e4 <get_Motordrehzahl+0xb4>
 652:	cf 91       	pop	r28
 654:	1f 91       	pop	r17
 656:	0f 91       	pop	r16
 658:	ff 90       	pop	r15
 65a:	ef 90       	pop	r14
 65c:	08 95       	ret

0000065e <stromreglung_rechts>:
	
	return drehzahl_rechts;
}



/* der Strom soll über einen PI-Glied geregelt werden */
void stromreglung_rechts()	// alle 6ms
{
 65e:	ef 92       	push	r14
 660:	ff 92       	push	r15
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	87 e0       	ldi	r24, 0x07	; 7
 668:	0e 94 d5 06 	call	0xdaa <get_adc>
 66c:	08 e1       	ldi	r16, 0x18	; 24
 66e:	10 e0       	ldi	r17, 0x00	; 0
 670:	80 9f       	mul	r24, r16
 672:	a0 01       	movw	r20, r0
 674:	81 9f       	mul	r24, r17
 676:	50 0d       	add	r21, r0
 678:	90 9f       	mul	r25, r16
 67a:	50 0d       	add	r21, r0
 67c:	11 24       	eor	r1, r1
 67e:	ca 01       	movw	r24, r20
 680:	6a e0       	ldi	r22, 0x0A	; 10
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	0e 94 94 07 	call	0xf28 <__udivmodhi4>
	int16_t iststrom;			// Istwert
	int32_t e = 0;				// Regelabwerichung
	uint8_t Kr = 2;				// Verstärkung in Tausenstel
	uint8_t Ki = 2;				// Verstärkung Integrator
	uint8_t Ta = 6;				// Abtastzeit in ms 
	int32_t y = 0;
	
#if DEBUG_STROM
	char buffer[20];
	uart_puts("*\t");
	ltoa(sollstrom_rechts, buffer, 10);
	uart_puts(buffer);
	uart_puts("\t");
#endif	

	/* Iststrom ermitteln */
	iststrom = get_Motorstrom(MOTOR_RECHTS_SHUNT);
	
#if DEBUG_STROM
	ltoa(iststrom, buffer, 10);
	uart_puts(buffer);
	uart_puts("\t");
#endif

	/* Regelabweichung */
	e = (int16_t) (sollstrom_rechts - iststrom);
 688:	e0 90 8b 00 	lds	r14, 0x008B
 68c:	f0 90 8c 00 	lds	r15, 0x008C
 690:	e6 1a       	sub	r14, r22
 692:	f7 0a       	sbc	r15, r23
 694:	97 01       	movw	r18, r14
 696:	44 27       	eor	r20, r20
 698:	37 fd       	sbrc	r19, 7
 69a:	40 95       	com	r20
 69c:	54 2f       	mov	r21, r20
	if(e<10 && e>-10) e=0;
 69e:	da 01       	movw	r26, r20
 6a0:	c9 01       	movw	r24, r18
 6a2:	09 96       	adiw	r24, 0x09	; 9
 6a4:	a1 1d       	adc	r26, r1
 6a6:	b1 1d       	adc	r27, r1
 6a8:	43 97       	sbiw	r24, 0x13	; 19
 6aa:	a1 05       	cpc	r26, r1
 6ac:	b1 05       	cpc	r27, r1
 6ae:	20 f4       	brcc	.+8      	; 0x6b8 <stromreglung_rechts+0x5a>
 6b0:	20 e0       	ldi	r18, 0x00	; 0
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	50 e0       	ldi	r21, 0x00	; 0
	
#if DEBUG_STROM
	ltoa(e, buffer, 10);
	uart_puts(buffer);
	uart_puts("\t");
#endif

	/* Integrieren */
	esum_strom_rechts += e;
 6b8:	e0 90 a3 00 	lds	r14, 0x00A3
 6bc:	f0 90 a4 00 	lds	r15, 0x00A4
 6c0:	00 91 a5 00 	lds	r16, 0x00A5
 6c4:	10 91 a6 00 	lds	r17, 0x00A6
 6c8:	e2 0e       	add	r14, r18
 6ca:	f3 1e       	adc	r15, r19
 6cc:	04 1f       	adc	r16, r20
 6ce:	15 1f       	adc	r17, r21
 6d0:	e0 92 a3 00 	sts	0x00A3, r14
 6d4:	f0 92 a4 00 	sts	0x00A4, r15
 6d8:	00 93 a5 00 	sts	0x00A5, r16
 6dc:	10 93 a6 00 	sts	0x00A6, r17
	if(esum_strom_rechts < 0) { esum_strom_rechts = 0;} 	// Begrenzung I-Anteil
 6e0:	80 91 a3 00 	lds	r24, 0x00A3
 6e4:	90 91 a4 00 	lds	r25, 0x00A4
 6e8:	a0 91 a5 00 	lds	r26, 0x00A5
 6ec:	b0 91 a6 00 	lds	r27, 0x00A6
 6f0:	b7 fd       	sbrc	r27, 7
 6f2:	58 c0       	rjmp	.+176    	; 0x7a4 <stromreglung_rechts+0x146>
	if(esum_strom_rechts > 60000){ esum_strom_rechts = 60000;}
 6f4:	80 91 a3 00 	lds	r24, 0x00A3
 6f8:	90 91 a4 00 	lds	r25, 0x00A4
 6fc:	a0 91 a5 00 	lds	r26, 0x00A5
 700:	b0 91 a6 00 	lds	r27, 0x00A6
 704:	81 56       	subi	r24, 0x61	; 97
 706:	9a 4e       	sbci	r25, 0xEA	; 234
 708:	a0 40       	sbci	r26, 0x00	; 0
 70a:	b0 40       	sbci	r27, 0x00	; 0
 70c:	64 f0       	brlt	.+24     	; 0x726 <stromreglung_rechts+0xc8>
 70e:	80 e6       	ldi	r24, 0x60	; 96
 710:	9a ee       	ldi	r25, 0xEA	; 234
 712:	a0 e0       	ldi	r26, 0x00	; 0
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	80 93 a3 00 	sts	0x00A3, r24
 71a:	90 93 a4 00 	sts	0x00A4, r25
 71e:	a0 93 a5 00 	sts	0x00A5, r26
 722:	b0 93 a6 00 	sts	0x00A6, r27
	
#if DEBUG_STROM
	ltoa(esum_strom_rechts, buffer, 10);
	uart_puts(buffer);
	uart_puts("\t");
#endif

	/* Reglergleichung PI*/
	y = Kr * e + Ki * Ta * esum_strom_rechts / 1000;
 726:	79 01       	movw	r14, r18
 728:	8a 01       	movw	r16, r20
 72a:	ee 0c       	add	r14, r14
 72c:	ff 1c       	adc	r15, r15
 72e:	00 1f       	adc	r16, r16
 730:	11 1f       	adc	r17, r17
 732:	20 91 a3 00 	lds	r18, 0x00A3
 736:	30 91 a4 00 	lds	r19, 0x00A4
 73a:	40 91 a5 00 	lds	r20, 0x00A5
 73e:	50 91 a6 00 	lds	r21, 0x00A6
 742:	6c e0       	ldi	r22, 0x0C	; 12
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 75 07 	call	0xeea <__mulsi3>
 74e:	dc 01       	movw	r26, r24
 750:	cb 01       	movw	r24, r22
 752:	bc 01       	movw	r22, r24
 754:	cd 01       	movw	r24, r26
 756:	28 ee       	ldi	r18, 0xE8	; 232
 758:	33 e0       	ldi	r19, 0x03	; 3
 75a:	40 e0       	ldi	r20, 0x00	; 0
 75c:	50 e0       	ldi	r21, 0x00	; 0
 75e:	0e 94 ca 07 	call	0xf94 <__divmodsi4>
 762:	e2 0e       	add	r14, r18
 764:	f3 1e       	adc	r15, r19
 766:	04 1f       	adc	r16, r20
 768:	15 1f       	adc	r17, r21
	if(y < 0){ y = 0;}
 76a:	17 fd       	sbrc	r17, 7
 76c:	2a c0       	rjmp	.+84     	; 0x7c2 <stromreglung_rechts+0x164>
	if(y > PWM_MAX){ y = PWM_MAX;}
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	e8 16       	cp	r14, r24
 772:	82 e0       	ldi	r24, 0x02	; 2
 774:	f8 06       	cpc	r15, r24
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	08 07       	cpc	r16, r24
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	18 07       	cpc	r17, r24
 77e:	34 f0       	brlt	.+12     	; 0x78c <stromreglung_rechts+0x12e>
 780:	2f ef       	ldi	r18, 0xFF	; 255
 782:	e2 2e       	mov	r14, r18
 784:	21 e0       	ldi	r18, 0x01	; 1
 786:	f2 2e       	mov	r15, r18
 788:	01 2d       	mov	r16, r1
 78a:	11 2d       	mov	r17, r1
 78c:	c7 01       	movw	r24, r14
 78e:	f7 fc       	sbrc	r15, 7
 790:	12 c0       	rjmp	.+36     	; 0x7b6 <stromreglung_rechts+0x158>
 792:	ac 98       	cbi	0x15, 4	; 21
 794:	ad 9a       	sbi	0x15, 5	; 21
 796:	22 e0       	ldi	r18, 0x02	; 2
 798:	80 30       	cpi	r24, 0x00	; 0
 79a:	92 07       	cpc	r25, r18
 79c:	b4 f0       	brlt	.+44     	; 0x7ca <stromreglung_rechts+0x16c>
 79e:	8f ef       	ldi	r24, 0xFF	; 255
 7a0:	91 e0       	ldi	r25, 0x01	; 1
 7a2:	13 c0       	rjmp	.+38     	; 0x7ca <stromreglung_rechts+0x16c>
 7a4:	10 92 a3 00 	sts	0x00A3, r1
 7a8:	10 92 a4 00 	sts	0x00A4, r1
 7ac:	10 92 a5 00 	sts	0x00A5, r1
 7b0:	10 92 a6 00 	sts	0x00A6, r1
 7b4:	9f cf       	rjmp	.-194    	; 0x6f4 <stromreglung_rechts+0x96>
 7b6:	90 95       	com	r25
 7b8:	81 95       	neg	r24
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	ad 98       	cbi	0x15, 5	; 21
 7be:	ac 9a       	sbi	0x15, 4	; 21
 7c0:	ea cf       	rjmp	.-44     	; 0x796 <stromreglung_rechts+0x138>
 7c2:	ee 24       	eor	r14, r14
 7c4:	ff 24       	eor	r15, r15
 7c6:	87 01       	movw	r16, r14
 7c8:	d2 cf       	rjmp	.-92     	; 0x76e <stromreglung_rechts+0x110>
 7ca:	99 bd       	out	0x29, r25	; 41
 7cc:	88 bd       	out	0x28, r24	; 40
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	ff 90       	pop	r15
 7d4:	ef 90       	pop	r14
 7d6:	08 95       	ret

000007d8 <drehzahlregelung_rechts>:
	
#if DEBUG_STROM	
	ltoa(y, buffer, 10);
	uart_puts(buffer);
	uart_puts("\r\n");
#endif

	/* neue Stellgrößen */
	motor_r(y);
}



/* Der Drehzahlregler sollte als PID Regler aufgebaut werden */
void drehzahlregelung_rechts(uint16_t solldrehzahl)
{
 7d8:	8f 92       	push	r8
 7da:	9f 92       	push	r9
 7dc:	af 92       	push	r10
 7de:	bf 92       	push	r11
 7e0:	cf 92       	push	r12
 7e2:	df 92       	push	r13
 7e4:	ef 92       	push	r14
 7e6:	ff 92       	push	r15
 7e8:	0f 93       	push	r16
 7ea:	1f 93       	push	r17
 7ec:	cf 93       	push	r28
 7ee:	4c 01       	movw	r8, r24
 7f0:	c0 91 a0 00 	lds	r28, 0x00A0
 7f4:	c5 30       	cpi	r28, 0x05	; 5
 7f6:	08 f0       	brcs	.+2      	; 0x7fa <drehzahlregelung_rechts+0x22>
 7f8:	78 c0       	rjmp	.+240    	; 0x8ea <drehzahlregelung_rechts+0x112>
 7fa:	e0 90 b9 00 	lds	r14, 0x00B9
 7fe:	f0 90 ba 00 	lds	r15, 0x00BA
 802:	f0 92 a2 00 	sts	0x00A2, r15
 806:	e0 92 a1 00 	sts	0x00A1, r14
 80a:	00 91 9c 00 	lds	r16, 0x009C
 80e:	10 91 9d 00 	lds	r17, 0x009D
 812:	10 93 ba 00 	sts	0x00BA, r17
 816:	00 93 b9 00 	sts	0x00B9, r16
 81a:	a0 91 a7 00 	lds	r26, 0x00A7
 81e:	b0 91 a8 00 	lds	r27, 0x00A8
 822:	b0 93 9d 00 	sts	0x009D, r27
 826:	a0 93 9c 00 	sts	0x009C, r26
 82a:	e0 91 98 00 	lds	r30, 0x0098
 82e:	f0 91 99 00 	lds	r31, 0x0099
 832:	f0 93 a8 00 	sts	0x00A8, r31
 836:	e0 93 a7 00 	sts	0x00A7, r30
 83a:	60 91 b3 00 	lds	r22, 0x00B3
 83e:	70 91 b4 00 	lds	r23, 0x00B4
 842:	70 93 99 00 	sts	0x0099, r23
 846:	60 93 98 00 	sts	0x0098, r22
 84a:	40 91 9a 00 	lds	r20, 0x009A
 84e:	50 91 9b 00 	lds	r21, 0x009B
 852:	50 93 b4 00 	sts	0x00B4, r21
 856:	40 93 b3 00 	sts	0x00B3, r20
 85a:	20 91 ad 00 	lds	r18, 0x00AD
 85e:	30 91 ae 00 	lds	r19, 0x00AE
 862:	30 93 9b 00 	sts	0x009B, r19
 866:	20 93 9a 00 	sts	0x009A, r18
 86a:	80 91 9e 00 	lds	r24, 0x009E
 86e:	90 91 9f 00 	lds	r25, 0x009F
 872:	90 93 ae 00 	sts	0x00AE, r25
 876:	80 93 ad 00 	sts	0x00AD, r24
 87a:	28 0f       	add	r18, r24
 87c:	39 1f       	adc	r19, r25
 87e:	24 0f       	add	r18, r20
 880:	35 1f       	adc	r19, r21
 882:	26 0f       	add	r18, r22
 884:	37 1f       	adc	r19, r23
 886:	2e 0f       	add	r18, r30
 888:	3f 1f       	adc	r19, r31
 88a:	2a 0f       	add	r18, r26
 88c:	3b 1f       	adc	r19, r27
 88e:	20 0f       	add	r18, r16
 890:	31 1f       	adc	r19, r17
 892:	2e 0d       	add	r18, r14
 894:	3f 1d       	adc	r19, r15
 896:	37 fd       	sbrc	r19, 7
 898:	00 c1       	rjmp	.+512    	; 0xa9a <drehzahlregelung_rechts+0x2c2>
 89a:	35 95       	asr	r19
 89c:	27 95       	ror	r18
 89e:	35 95       	asr	r19
 8a0:	27 95       	ror	r18
 8a2:	35 95       	asr	r19
 8a4:	27 95       	ror	r18
 8a6:	44 27       	eor	r20, r20
 8a8:	37 fd       	sbrc	r19, 7
 8aa:	40 95       	com	r20
 8ac:	54 2f       	mov	r21, r20
 8ae:	69 e0       	ldi	r22, 0x09	; 9
 8b0:	22 0f       	add	r18, r18
 8b2:	33 1f       	adc	r19, r19
 8b4:	44 1f       	adc	r20, r20
 8b6:	55 1f       	adc	r21, r21
 8b8:	6a 95       	dec	r22
 8ba:	d1 f7       	brne	.-12     	; 0x8b0 <drehzahlregelung_rechts+0xd8>
 8bc:	21 15       	cp	r18, r1
 8be:	31 05       	cpc	r19, r1
 8c0:	41 05       	cpc	r20, r1
 8c2:	51 05       	cpc	r21, r1
 8c4:	51 f0       	breq	.+20     	; 0x8da <drehzahlregelung_rechts+0x102>
 8c6:	60 e2       	ldi	r22, 0x20	; 32
 8c8:	71 ed       	ldi	r23, 0xD1	; 209
 8ca:	8c e8       	ldi	r24, 0x8C	; 140
 8cc:	97 e2       	ldi	r25, 0x27	; 39
 8ce:	0e 94 a8 07 	call	0xf50 <__udivmodsi4>
 8d2:	30 93 b8 00 	sts	0x00B8, r19
 8d6:	20 93 b7 00 	sts	0x00B7, r18
 8da:	80 91 b7 00 	lds	r24, 0x00B7
 8de:	90 91 b8 00 	lds	r25, 0x00B8
 8e2:	2b e1       	ldi	r18, 0x1B	; 27
 8e4:	89 35       	cpi	r24, 0x59	; 89
 8e6:	92 07       	cpc	r25, r18
 8e8:	34 f0       	brlt	.+12     	; 0x8f6 <drehzahlregelung_rechts+0x11e>
 8ea:	10 92 b8 00 	sts	0x00B8, r1
 8ee:	10 92 b7 00 	sts	0x00B7, r1
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	cf 3f       	cpi	r28, 0xFF	; 255
 8f8:	19 f0       	breq	.+6      	; 0x900 <drehzahlregelung_rechts+0x128>
 8fa:	cf 5f       	subi	r28, 0xFF	; 255
 8fc:	c0 93 a0 00 	sts	0x00A0, r28
	uint16_t istdrehzahl;		// Istwert
	int32_t e;					// Regelabwerichung
	uint8_t Kr = 3;				// Verstärkung in 1/Kr P-Anteil
	uint8_t Ki = 3;				// Verstärkung in 1/Kr Integrator
	uint8_t Kd = 2;				// Verstärkung in 1/Kr Differenzierer
	uint8_t Ta = 33;			// Abtastzeit
	int32_t y = 0;			

#if DEBUG_DREHZAHL
	char buffer[10];
	
	uart_puts("#\t");
	ltoa(solldrehzahl, buffer, 10);
	uart_puts(buffer);
	uart_puts("\t");
#endif	

	/* Istdrehzahl ermitteln */
	istdrehzahl= get_Motordrehzahl();
	
#if DEBUG_DREHZAHL	
	ltoa(istdrehzahl, buffer, 10);
	uart_puts(buffer);
	uart_puts("\t");
#endif

	/* Regelabweichung */
	e = (int16_t)(solldrehzahl - istdrehzahl);
 900:	54 01       	movw	r10, r8
 902:	a8 1a       	sub	r10, r24
 904:	b9 0a       	sbc	r11, r25
 906:	75 01       	movw	r14, r10
 908:	57 01       	movw	r10, r14
 90a:	cc 24       	eor	r12, r12
 90c:	b7 fc       	sbrc	r11, 7
 90e:	c0 94       	com	r12
 910:	dc 2c       	mov	r13, r12
	
#if DEBUG_DREHZAHL
	ltoa(e, buffer, 10);
	uart_puts(buffer);
	uart_puts("\t");
#endif

	/* Integrieren */
	esum_drehzahl_rechts +=e;
 912:	20 91 a9 00 	lds	r18, 0x00A9
 916:	30 91 aa 00 	lds	r19, 0x00AA
 91a:	40 91 ab 00 	lds	r20, 0x00AB
 91e:	50 91 ac 00 	lds	r21, 0x00AC
 922:	2a 0d       	add	r18, r10
 924:	3b 1d       	adc	r19, r11
 926:	4c 1d       	adc	r20, r12
 928:	5d 1d       	adc	r21, r13
 92a:	20 93 a9 00 	sts	0x00A9, r18
 92e:	30 93 aa 00 	sts	0x00AA, r19
 932:	40 93 ab 00 	sts	0x00AB, r20
 936:	50 93 ac 00 	sts	0x00AC, r21
	if(solldrehzahl==0) esum_drehzahl_rechts -=20;
 93a:	89 28       	or	r8, r9
 93c:	99 f4       	brne	.+38     	; 0x964 <drehzahlregelung_rechts+0x18c>
 93e:	80 91 a9 00 	lds	r24, 0x00A9
 942:	90 91 aa 00 	lds	r25, 0x00AA
 946:	a0 91 ab 00 	lds	r26, 0x00AB
 94a:	b0 91 ac 00 	lds	r27, 0x00AC
 94e:	44 97       	sbiw	r24, 0x14	; 20
 950:	a1 09       	sbc	r26, r1
 952:	b1 09       	sbc	r27, r1
 954:	80 93 a9 00 	sts	0x00A9, r24
 958:	90 93 aa 00 	sts	0x00AA, r25
 95c:	a0 93 ab 00 	sts	0x00AB, r26
 960:	b0 93 ac 00 	sts	0x00AC, r27
	if(esum_drehzahl_rechts < 0){ esum_drehzahl_rechts = 0;}		// Begrenzung I-Anteil
 964:	00 91 a9 00 	lds	r16, 0x00A9
 968:	10 91 aa 00 	lds	r17, 0x00AA
 96c:	20 91 ab 00 	lds	r18, 0x00AB
 970:	30 91 ac 00 	lds	r19, 0x00AC
 974:	37 fd       	sbrc	r19, 7
 976:	88 c0       	rjmp	.+272    	; 0xa88 <drehzahlregelung_rechts+0x2b0>
	if(esum_drehzahl_rechts > 60000){ esum_drehzahl_rechts = 60000;}
 978:	40 91 a9 00 	lds	r20, 0x00A9
 97c:	50 91 aa 00 	lds	r21, 0x00AA
 980:	60 91 ab 00 	lds	r22, 0x00AB
 984:	70 91 ac 00 	lds	r23, 0x00AC
 988:	41 56       	subi	r20, 0x61	; 97
 98a:	5a 4e       	sbci	r21, 0xEA	; 234
 98c:	60 40       	sbci	r22, 0x00	; 0
 98e:	70 40       	sbci	r23, 0x00	; 0
 990:	64 f0       	brlt	.+24     	; 0x9aa <drehzahlregelung_rechts+0x1d2>
 992:	20 e6       	ldi	r18, 0x60	; 96
 994:	3a ee       	ldi	r19, 0xEA	; 234
 996:	40 e0       	ldi	r20, 0x00	; 0
 998:	50 e0       	ldi	r21, 0x00	; 0
 99a:	20 93 a9 00 	sts	0x00A9, r18
 99e:	30 93 aa 00 	sts	0x00AA, r19
 9a2:	40 93 ab 00 	sts	0x00AB, r20
 9a6:	50 93 ac 00 	sts	0x00AC, r21
	
#if DEBUG_DREHZAHL
 	ltoa(esum_drehzahl_rechts, buffer, 10);
	uart_puts(buffer);
	uart_puts("\t");
#endif
	
	/* Reglergleichung PID */
	y = e/Kr + Ta * esum_drehzahl_rechts/(1000*Ki) + Kd/Ta * (e - ealt_drehzahl_rechts);
 9aa:	c6 01       	movw	r24, r12
 9ac:	b5 01       	movw	r22, r10
 9ae:	23 e0       	ldi	r18, 0x03	; 3
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	40 e0       	ldi	r20, 0x00	; 0
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	0e 94 ca 07 	call	0xf94 <__divmodsi4>
 9ba:	79 01       	movw	r14, r18
 9bc:	8a 01       	movw	r16, r20
 9be:	20 91 a9 00 	lds	r18, 0x00A9
 9c2:	30 91 aa 00 	lds	r19, 0x00AA
 9c6:	40 91 ab 00 	lds	r20, 0x00AB
 9ca:	50 91 ac 00 	lds	r21, 0x00AC
 9ce:	61 e2       	ldi	r22, 0x21	; 33
 9d0:	70 e0       	ldi	r23, 0x00	; 0
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 75 07 	call	0xeea <__mulsi3>
 9da:	dc 01       	movw	r26, r24
 9dc:	cb 01       	movw	r24, r22
 9de:	bc 01       	movw	r22, r24
 9e0:	cd 01       	movw	r24, r26
 9e2:	28 eb       	ldi	r18, 0xB8	; 184
 9e4:	3b e0       	ldi	r19, 0x0B	; 11
 9e6:	40 e0       	ldi	r20, 0x00	; 0
 9e8:	50 e0       	ldi	r21, 0x00	; 0
 9ea:	0e 94 ca 07 	call	0xf94 <__divmodsi4>
 9ee:	e2 0e       	add	r14, r18
 9f0:	f3 1e       	adc	r15, r19
 9f2:	04 1f       	adc	r16, r20
 9f4:	15 1f       	adc	r17, r21
 9f6:	80 91 90 00 	lds	r24, 0x0090
 9fa:	90 91 91 00 	lds	r25, 0x0091
 9fe:	a0 91 92 00 	lds	r26, 0x0092
 a02:	b0 91 93 00 	lds	r27, 0x0093
 a06:	a6 01       	movw	r20, r12
 a08:	95 01       	movw	r18, r10
 a0a:	28 1b       	sub	r18, r24
 a0c:	39 0b       	sbc	r19, r25
 a0e:	4a 0b       	sbc	r20, r26
 a10:	5b 0b       	sbc	r21, r27
 a12:	60 e0       	ldi	r22, 0x00	; 0
 a14:	70 e0       	ldi	r23, 0x00	; 0
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 75 07 	call	0xeea <__mulsi3>
 a1e:	dc 01       	movw	r26, r24
 a20:	cb 01       	movw	r24, r22
 a22:	e8 0e       	add	r14, r24
 a24:	f9 1e       	adc	r15, r25
 a26:	0a 1f       	adc	r16, r26
 a28:	1b 1f       	adc	r17, r27
	if(y < 0){ y = 0;}
 a2a:	17 fd       	sbrc	r17, 7
 a2c:	29 c0       	rjmp	.+82     	; 0xa80 <drehzahlregelung_rechts+0x2a8>
	if(y > PWM_MAX){ y = PWM_MAX;}	// sollstrombegrenzung
 a2e:	80 e0       	ldi	r24, 0x00	; 0
 a30:	e8 16       	cp	r14, r24
 a32:	82 e0       	ldi	r24, 0x02	; 2
 a34:	f8 06       	cpc	r15, r24
 a36:	80 e0       	ldi	r24, 0x00	; 0
 a38:	08 07       	cpc	r16, r24
 a3a:	80 e0       	ldi	r24, 0x00	; 0
 a3c:	18 07       	cpc	r17, r24
 a3e:	34 f0       	brlt	.+12     	; 0xa4c <drehzahlregelung_rechts+0x274>
 a40:	4f ef       	ldi	r20, 0xFF	; 255
 a42:	e4 2e       	mov	r14, r20
 a44:	41 e0       	ldi	r20, 0x01	; 1
 a46:	f4 2e       	mov	r15, r20
 a48:	01 2d       	mov	r16, r1
 a4a:	11 2d       	mov	r17, r1
	ealt_drehzahl_rechts = e;	// alte Regelabweichung merken
 a4c:	a0 92 90 00 	sts	0x0090, r10
 a50:	b0 92 91 00 	sts	0x0091, r11
 a54:	c0 92 92 00 	sts	0x0092, r12
 a58:	d0 92 93 00 	sts	0x0093, r13
 a5c:	c7 01       	movw	r24, r14
 a5e:	f7 fc       	sbrc	r15, 7
 a60:	09 c0       	rjmp	.+18     	; 0xa74 <drehzahlregelung_rechts+0x29c>
 a62:	ac 98       	cbi	0x15, 4	; 21
 a64:	ad 9a       	sbi	0x15, 5	; 21
 a66:	22 e0       	ldi	r18, 0x02	; 2
 a68:	80 30       	cpi	r24, 0x00	; 0
 a6a:	92 07       	cpc	r25, r18
 a6c:	cc f0       	brlt	.+50     	; 0xaa0 <drehzahlregelung_rechts+0x2c8>
 a6e:	8f ef       	ldi	r24, 0xFF	; 255
 a70:	91 e0       	ldi	r25, 0x01	; 1
 a72:	16 c0       	rjmp	.+44     	; 0xaa0 <drehzahlregelung_rechts+0x2c8>
 a74:	90 95       	com	r25
 a76:	81 95       	neg	r24
 a78:	9f 4f       	sbci	r25, 0xFF	; 255
 a7a:	ad 98       	cbi	0x15, 5	; 21
 a7c:	ac 9a       	sbi	0x15, 4	; 21
 a7e:	f3 cf       	rjmp	.-26     	; 0xa66 <drehzahlregelung_rechts+0x28e>
 a80:	ee 24       	eor	r14, r14
 a82:	ff 24       	eor	r15, r15
 a84:	87 01       	movw	r16, r14
 a86:	d3 cf       	rjmp	.-90     	; 0xa2e <drehzahlregelung_rechts+0x256>
 a88:	10 92 a9 00 	sts	0x00A9, r1
 a8c:	10 92 aa 00 	sts	0x00AA, r1
 a90:	10 92 ab 00 	sts	0x00AB, r1
 a94:	10 92 ac 00 	sts	0x00AC, r1
 a98:	6f cf       	rjmp	.-290    	; 0x978 <drehzahlregelung_rechts+0x1a0>
 a9a:	29 5f       	subi	r18, 0xF9	; 249
 a9c:	3f 4f       	sbci	r19, 0xFF	; 255
 a9e:	fd ce       	rjmp	.-518    	; 0x89a <drehzahlregelung_rechts+0xc2>
 aa0:	99 bd       	out	0x29, r25	; 41
 aa2:	88 bd       	out	0x28, r24	; 40
 aa4:	cf 91       	pop	r28
 aa6:	1f 91       	pop	r17
 aa8:	0f 91       	pop	r16
 aaa:	ff 90       	pop	r15
 aac:	ef 90       	pop	r14
 aae:	df 90       	pop	r13
 ab0:	cf 90       	pop	r12
 ab2:	bf 90       	pop	r11
 ab4:	af 90       	pop	r10
 ab6:	9f 90       	pop	r9
 ab8:	8f 90       	pop	r8
 aba:	08 95       	ret

00000abc <__vector_1>:
	
#if DEBUG_DREHZAHL
 	ltoa(y, buffer, 10);
	uart_puts(buffer);
	uart_puts("\r\n");
#endif	
	/* neue Stellgröße */
	//sollstrom_rechts = y;
	motor_r(y);
}



// Interrupt Service Routine bei Flanke an int0(extern) */
ISR(INT0_vect)
{
 abc:	1f 92       	push	r1
 abe:	0f 92       	push	r0
 ac0:	0f b6       	in	r0, 0x3f	; 63
 ac2:	0f 92       	push	r0
 ac4:	11 24       	eor	r1, r1
 ac6:	2f 93       	push	r18
 ac8:	3f 93       	push	r19
 aca:	4f 93       	push	r20
 acc:	5f 93       	push	r21
 ace:	6f 93       	push	r22
 ad0:	7f 93       	push	r23
 ad2:	8f 93       	push	r24
 ad4:	9f 93       	push	r25
 ad6:	af 93       	push	r26
 ad8:	bf 93       	push	r27
 ada:	ef 93       	push	r30
 adc:	ff 93       	push	r31
	//PORTB ^=(1<<PB2);								// Toggel Led, wildes blinken ist immer gut
	counter_neu = (timer0_counter_D1*256) + TCNT0;	// Merke Dir die Uhrzeit
 ade:	80 91 8d 00 	lds	r24, 0x008D
 ae2:	99 27       	eor	r25, r25
 ae4:	58 2f       	mov	r21, r24
 ae6:	44 27       	eor	r20, r20
 ae8:	22 b7       	in	r18, 0x32	; 50
 aea:	42 0f       	add	r20, r18
 aec:	51 1d       	adc	r21, r1
 aee:	50 93 b2 00 	sts	0x00B2, r21
 af2:	40 93 b1 00 	sts	0x00B1, r20
	if(d1_error==0) 								// Wenn kein Timerfehler aufgetreten ist
 af6:	80 91 8f 00 	lds	r24, 0x008F
 afa:	88 23       	and	r24, r24
 afc:	31 f5       	brne	.+76     	; 0xb4a <__vector_1+0x8e>
	{
		if(counter_neu > counter_alt){
 afe:	a0 91 b1 00 	lds	r26, 0x00B1
 b02:	b0 91 b2 00 	lds	r27, 0x00B2
 b06:	60 91 96 00 	lds	r22, 0x0096
 b0a:	70 91 97 00 	lds	r23, 0x0097
 b0e:	6a 17       	cp	r22, r26
 b10:	7b 07       	cpc	r23, r27
 b12:	80 f0       	brcs	.+32     	; 0xb34 <__vector_1+0x78>
			time_delta = counter_neu - counter_alt;}			// ermittel die Zeitdifferenz
		else{
			time_delta = (65535-counter_alt) + counter_neu;}	// ermittel die Zeitdifferenz
 b14:	80 91 b1 00 	lds	r24, 0x00B1
 b18:	90 91 b2 00 	lds	r25, 0x00B2
 b1c:	40 91 96 00 	lds	r20, 0x0096
 b20:	50 91 97 00 	lds	r21, 0x0097
 b24:	84 1b       	sub	r24, r20
 b26:	95 0b       	sbc	r25, r21
 b28:	01 97       	sbiw	r24, 0x01	; 1
 b2a:	90 93 9f 00 	sts	0x009F, r25
 b2e:	80 93 9e 00 	sts	0x009E, r24
 b32:	0b c0       	rjmp	.+22     	; 0xb4a <__vector_1+0x8e>
 b34:	80 91 b1 00 	lds	r24, 0x00B1
 b38:	90 91 b2 00 	lds	r25, 0x00B2
 b3c:	e0 91 96 00 	lds	r30, 0x0096
 b40:	f0 91 97 00 	lds	r31, 0x0097
 b44:	8e 1b       	sub	r24, r30
 b46:	9f 0b       	sbc	r25, r31
 b48:	f0 cf       	rjmp	.-32     	; 0xb2a <__vector_1+0x6e>
	}	
	counter_alt = counter_neu;						// Merke mir die Uhrzeit für die nächste Messung
 b4a:	80 91 b1 00 	lds	r24, 0x00B1
 b4e:	90 91 b2 00 	lds	r25, 0x00B2
 b52:	90 93 97 00 	sts	0x0097, r25
 b56:	80 93 96 00 	sts	0x0096, r24
	is_not_moving_rechts=0;							// Motor hat sich bewegt
 b5a:	10 92 a0 00 	sts	0x00A0, r1
	d1_error=0;
 b5e:	10 92 8f 00 	sts	0x008F, r1
 b62:	ff 91       	pop	r31
 b64:	ef 91       	pop	r30
 b66:	bf 91       	pop	r27
 b68:	af 91       	pop	r26
 b6a:	9f 91       	pop	r25
 b6c:	8f 91       	pop	r24
 b6e:	7f 91       	pop	r23
 b70:	6f 91       	pop	r22
 b72:	5f 91       	pop	r21
 b74:	4f 91       	pop	r20
 b76:	3f 91       	pop	r19
 b78:	2f 91       	pop	r18
 b7a:	0f 90       	pop	r0
 b7c:	0f be       	out	0x3f, r0	; 63
 b7e:	0f 90       	pop	r0
 b80:	1f 90       	pop	r1
 b82:	18 95       	reti

00000b84 <timer0_init>:
void timer0_init(void)
{
	/* Prescaler auf 64: Clock alle 5,78us (172,8KHz). */
	/* Überlauf alle 1,48ms (675 Hz)  */
	TCCR0 = (1<<CS01)|(1<<CS00);	// (1<<CS01)|(1<<CS00);
 b84:	23 e0       	ldi	r18, 0x03	; 3
 b86:	23 bf       	out	0x33, r18	; 51

	/* Interrupts für Timer0 aktivieren */	
	TIMSK |= (1<<TOIE0);
 b88:	89 b7       	in	r24, 0x39	; 57
 b8a:	81 60       	ori	r24, 0x01	; 1
 b8c:	89 bf       	out	0x39, r24	; 57
	
	/* LED als Ausgang deklarieren */
	DDRB |= (1<<PB3); 
 b8e:	bb 9a       	sbi	0x17, 3	; 23
	
	
	/* Anfangswerte */ 
	timer0_counter_D1=0;	
 b90:	10 92 8d 00 	sts	0x008D, r1
	timer0_counter=0;
 b94:	10 92 8e 00 	sts	0x008E, r1
	d1_error=0;
 b98:	10 92 8f 00 	sts	0x008F, r1
 b9c:	08 95       	ret

00000b9e <__vector_9>:
}	

ISR(TIMER0_OVF_vect) /* veraltet: SIGNAL(SIG_OVERFLOW1) */
{
 b9e:	1f 92       	push	r1
 ba0:	0f 92       	push	r0
 ba2:	0f b6       	in	r0, 0x3f	; 63
 ba4:	0f 92       	push	r0
 ba6:	11 24       	eor	r1, r1
 ba8:	2f 93       	push	r18
 baa:	3f 93       	push	r19
 bac:	4f 93       	push	r20
 bae:	5f 93       	push	r21
 bb0:	6f 93       	push	r22
 bb2:	7f 93       	push	r23
 bb4:	8f 93       	push	r24
 bb6:	9f 93       	push	r25
 bb8:	af 93       	push	r26
 bba:	bf 93       	push	r27
 bbc:	ef 93       	push	r30
 bbe:	ff 93       	push	r31
    /* Interrupt Code */
	timer0_counter++;			// Merker für Überläufe des Timers
 bc0:	30 91 8e 00 	lds	r19, 0x008E
 bc4:	3f 5f       	subi	r19, 0xFF	; 255
 bc6:	30 93 8e 00 	sts	0x008E, r19
	timer0_counter_D1++;		// Merker für Überläufe des Timers, für die Drehzahl1
 bca:	20 91 8d 00 	lds	r18, 0x008D
 bce:	2f 5f       	subi	r18, 0xFF	; 255
 bd0:	20 93 8d 00 	sts	0x008D, r18
	
	if(timer0_counter_D1==0xff)
 bd4:	80 91 8d 00 	lds	r24, 0x008D
 bd8:	8f 3f       	cpi	r24, 0xFF	; 255
 bda:	79 f0       	breq	.+30     	; 0xbfa <__vector_9+0x5c>
	{
		timer0_counter_D1=0;
		if (d1_error<0xff) d1_error++;
	}
	
	if( (timer0_counter == 0)){	// alle 380ms 
 bdc:	60 91 8e 00 	lds	r22, 0x008E
 be0:	66 23       	and	r22, r22
 be2:	21 f4       	brne	.+8      	; 0xbec <__vector_9+0x4e>
		PORTB ^=(1<<PB3);				// eine LED getoggelt, blinken ist immer gut
 be4:	78 b3       	in	r23, 0x18	; 24
 be6:	98 e0       	ldi	r25, 0x08	; 8
 be8:	79 27       	eor	r23, r25
 bea:	78 bb       	out	0x18, r23	; 24
	}
	
	if(!(timer0_counter % 4)){ 	// alle 6ms 
 bec:	a0 91 8e 00 	lds	r26, 0x008E
 bf0:	a3 70       	andi	r26, 0x03	; 3
 bf2:	79 f4       	brne	.+30     	; 0xc12 <__vector_9+0x74>
		tasten();					// Tasten entprellen und status ermitteln
 bf4:	0e 94 21 06 	call	0xc42 <tasten>
 bf8:	0c c0       	rjmp	.+24     	; 0xc12 <__vector_9+0x74>
 bfa:	10 92 8d 00 	sts	0x008D, r1
 bfe:	40 91 8f 00 	lds	r20, 0x008F
 c02:	4f 3f       	cpi	r20, 0xFF	; 255
 c04:	59 f3       	breq	.-42     	; 0xbdc <__vector_9+0x3e>
 c06:	50 91 8f 00 	lds	r21, 0x008F
 c0a:	5f 5f       	subi	r21, 0xFF	; 255
 c0c:	50 93 8f 00 	sts	0x008F, r21
 c10:	e5 cf       	rjmp	.-54     	; 0xbdc <__vector_9+0x3e>
 c12:	ff 91       	pop	r31
 c14:	ef 91       	pop	r30
 c16:	bf 91       	pop	r27
 c18:	af 91       	pop	r26
 c1a:	9f 91       	pop	r25
 c1c:	8f 91       	pop	r24
 c1e:	7f 91       	pop	r23
 c20:	6f 91       	pop	r22
 c22:	5f 91       	pop	r21
 c24:	4f 91       	pop	r20
 c26:	3f 91       	pop	r19
 c28:	2f 91       	pop	r18
 c2a:	0f 90       	pop	r0
 c2c:	0f be       	out	0x3f, r0	; 63
 c2e:	0f 90       	pop	r0
 c30:	1f 90       	pop	r1
 c32:	18 95       	reti

00000c34 <taste_init>:

void taste_init(void)
{
	/** TASTEN als Eingänge deffinieren plus pullup **/
	TASTE_DDR &=~((1<<TASTE0)|(1<<TASTE1)|(1<<TASTE2)); 	// Tasten als Eingänge
 c34:	2a b3       	in	r18, 0x1a	; 26
 c36:	28 7f       	andi	r18, 0xF8	; 248
 c38:	2a bb       	out	0x1a, r18	; 26
	TASTE_PORT |=(1<<TASTE0)|(1<<TASTE1)|(1<<TASTE2);		//pullup aktivieren
 c3a:	8b b3       	in	r24, 0x1b	; 27
 c3c:	87 60       	ori	r24, 0x07	; 7
 c3e:	8b bb       	out	0x1b, r24	; 27
 c40:	08 95       	ret

00000c42 <tasten>:
}

void tasten( void )
{
  static char ct0, ct1, rpt;
  char i;

  i = key_state ^ ~TASTE_PIN;	// key changed ?
 c42:	49 b3       	in	r20, 0x19	; 25
 c44:	40 95       	com	r20
 c46:	60 91 bd 00 	lds	r22, 0x00BD
 c4a:	46 27       	eor	r20, r22
  ct0 = ~( ct0 & i );			// reset or count ct0
 c4c:	30 91 88 00 	lds	r19, 0x0088
 c50:	34 23       	and	r19, r20
 c52:	30 95       	com	r19
 c54:	30 93 88 00 	sts	0x0088, r19
  ct1 = (ct0 ^ ct1) & i;		// reset or count ct1
 c58:	50 91 89 00 	lds	r21, 0x0089
 c5c:	53 27       	eor	r21, r19
 c5e:	54 23       	and	r21, r20
 c60:	50 93 89 00 	sts	0x0089, r21
  i &= ct0 & ct1;				// count until roll over 
 c64:	35 23       	and	r19, r21
 c66:	34 23       	and	r19, r20
  key_state ^= i;				// then toggle debounced state
 c68:	20 91 bd 00 	lds	r18, 0x00BD
 c6c:	23 27       	eor	r18, r19
 c6e:	20 93 bd 00 	sts	0x00BD, r18
  key_press |= key_state & i;	// 0->1: key pressing detect
 c72:	80 91 bd 00 	lds	r24, 0x00BD
 c76:	83 23       	and	r24, r19
 c78:	90 91 bc 00 	lds	r25, 0x00BC
 c7c:	89 2b       	or	r24, r25
 c7e:	80 93 bc 00 	sts	0x00BC, r24

  if( (key_state & REPEAT_MASK) == 0 )	// check repeat function
 c82:	80 91 bd 00 	lds	r24, 0x00BD
 c86:	99 27       	eor	r25, r25
 c88:	83 70       	andi	r24, 0x03	; 3
 c8a:	90 70       	andi	r25, 0x00	; 0
 c8c:	89 2b       	or	r24, r25
 c8e:	79 f4       	brne	.+30     	; 0xcae <tasten+0x6c>
    rpt = REPEAT_START;			// start delay
 c90:	8d e7       	ldi	r24, 0x7D	; 125
  if( --rpt == 0 ){
 c92:	81 50       	subi	r24, 0x01	; 1
 c94:	81 f4       	brne	.+32     	; 0xcb6 <tasten+0x74>
    rpt = REPEAT_NEXT;			// repeat delay
 c96:	b9 e1       	ldi	r27, 0x19	; 25
 c98:	b0 93 8a 00 	sts	0x008A, r27
    key_rpt |= key_state & REPEAT_MASK;
 c9c:	70 91 bd 00 	lds	r23, 0x00BD
 ca0:	73 70       	andi	r23, 0x03	; 3
 ca2:	a0 91 bb 00 	lds	r26, 0x00BB
 ca6:	7a 2b       	or	r23, r26
 ca8:	70 93 bb 00 	sts	0x00BB, r23
 cac:	08 95       	ret
 cae:	80 91 8a 00 	lds	r24, 0x008A
 cb2:	81 50       	subi	r24, 0x01	; 1
 cb4:	81 f3       	breq	.-32     	; 0xc96 <tasten+0x54>
 cb6:	80 93 8a 00 	sts	0x008A, r24
 cba:	08 95       	ret

00000cbc <get_key_press>:
  }
}



char get_key_press( char key_mask )
{
 cbc:	98 2f       	mov	r25, r24
  cli();
 cbe:	f8 94       	cli
  key_mask &= key_press;                        // read key(s)
 cc0:	20 91 bc 00 	lds	r18, 0x00BC
 cc4:	92 23       	and	r25, r18
  key_press ^= key_mask;                        // clear key(s)
 cc6:	80 91 bc 00 	lds	r24, 0x00BC
 cca:	89 27       	eor	r24, r25
 ccc:	80 93 bc 00 	sts	0x00BC, r24
  sei();
 cd0:	78 94       	sei
  return key_mask;
}
 cd2:	89 2f       	mov	r24, r25
 cd4:	99 27       	eor	r25, r25
 cd6:	08 95       	ret

00000cd8 <get_key_rpt>:
char get_key_rpt( char key_mask )
{
 cd8:	98 2f       	mov	r25, r24
  cli();
 cda:	f8 94       	cli
  key_mask &= key_rpt;                        	// read key(s)
 cdc:	20 91 bb 00 	lds	r18, 0x00BB
 ce0:	92 23       	and	r25, r18
  key_rpt ^= key_mask;                        	// clear key(s)
 ce2:	80 91 bb 00 	lds	r24, 0x00BB
 ce6:	89 27       	eor	r24, r25
 ce8:	80 93 bb 00 	sts	0x00BB, r24
  sei();
 cec:	78 94       	sei
  return key_mask;
}
 cee:	89 2f       	mov	r24, r25
 cf0:	99 27       	eor	r25, r25
 cf2:	08 95       	ret

00000cf4 <uart_putc>:
/** sendet ein einzelnes Zeichen **/
void uart_putc(char c)
{
	/* warten bis der Sendepuffer leer ist */
	while ( !( UCSRA & (1<<UDRE)) );
 cf4:	5d 9b       	sbis	0x0b, 5	; 11
 cf6:	fe cf       	rjmp	.-4      	; 0xcf4 <uart_putc>
	
	/* Zeichen senden */
	UDR = c;
 cf8:	8c b9       	out	0x0c, r24	; 12
 cfa:	08 95       	ret

00000cfc <uart_puts>:
}

/** sendet einen string **/
void uart_puts(char *s)
{
 cfc:	fc 01       	movw	r30, r24
 cfe:	04 c0       	rjmp	.+8      	; 0xd08 <uart_puts+0xc>
 d00:	5d 9b       	sbis	0x0b, 5	; 11
 d02:	fe cf       	rjmp	.-4      	; 0xd00 <uart_puts+0x4>
 d04:	8c b9       	out	0x0c, r24	; 12
	while (*s) // so lange senden, bis das ende des Strings erreicht ist
	{
		uart_putc(*s);
		s++;
 d06:	31 96       	adiw	r30, 0x01	; 1
 d08:	80 81       	ld	r24, Z
 d0a:	88 23       	and	r24, r24
 d0c:	c9 f7       	brne	.-14     	; 0xd00 <uart_puts+0x4>
 d0e:	08 95       	ret

00000d10 <uart_init>:
 d10:	10 bc       	out	0x20, r1	; 32
 d12:	35 e0       	ldi	r19, 0x05	; 5
 d14:	39 b9       	out	0x09, r19	; 9
 d16:	28 e9       	ldi	r18, 0x98	; 152
 d18:	2a b9       	out	0x0a, r18	; 10
 d1a:	86 e8       	ldi	r24, 0x86	; 134
 d1c:	80 bd       	out	0x20, r24	; 32
 d1e:	e5 e6       	ldi	r30, 0x65	; 101
 d20:	f0 e0       	ldi	r31, 0x00	; 0
 d22:	80 91 65 00 	lds	r24, 0x0065
 d26:	05 c0       	rjmp	.+10     	; 0xd32 <uart_init+0x22>
 d28:	5d 9b       	sbis	0x0b, 5	; 11
 d2a:	fe cf       	rjmp	.-4      	; 0xd28 <uart_init+0x18>
 d2c:	8c b9       	out	0x0c, r24	; 12
 d2e:	31 96       	adiw	r30, 0x01	; 1
 d30:	80 81       	ld	r24, Z
 d32:	88 23       	and	r24, r24
 d34:	c9 f7       	brne	.-14     	; 0xd28 <uart_init+0x18>
 d36:	08 95       	ret

00000d38 <uart_puti>:
	}
	//uart_putc('\r');
}

/** sendet einen Integer **/
void uart_puti(uint8_t *i)
{
 d38:	cf 93       	push	r28
 d3a:	df 93       	push	r29
 d3c:	cd b7       	in	r28, 0x3d	; 61
 d3e:	de b7       	in	r29, 0x3e	; 62
 d40:	25 97       	sbiw	r28, 0x05	; 5
 d42:	0f b6       	in	r0, 0x3f	; 63
 d44:	f8 94       	cli
 d46:	de bf       	out	0x3e, r29	; 62
 d48:	0f be       	out	0x3f, r0	; 63
 d4a:	cd bf       	out	0x3d, r28	; 61
 d4c:	fc 01       	movw	r30, r24
	unsigned char s[5];
	itoa(*i, s,10);
 d4e:	80 81       	ld	r24, Z
 d50:	4a e0       	ldi	r20, 0x0A	; 10
 d52:	50 e0       	ldi	r21, 0x00	; 0
 d54:	be 01       	movw	r22, r28
 d56:	6f 5f       	subi	r22, 0xFF	; 255
 d58:	7f 4f       	sbci	r23, 0xFF	; 255
 d5a:	99 27       	eor	r25, r25
 d5c:	0e 94 fa 06 	call	0xdf4 <itoa>
 d60:	fe 01       	movw	r30, r28
 d62:	31 96       	adiw	r30, 0x01	; 1
 d64:	89 81       	ldd	r24, Y+1	; 0x01
 d66:	88 23       	and	r24, r24
 d68:	39 f0       	breq	.+14     	; 0xd78 <uart_puti+0x40>
 d6a:	5d 9b       	sbis	0x0b, 5	; 11
 d6c:	fe cf       	rjmp	.-4      	; 0xd6a <uart_puti+0x32>
 d6e:	8c b9       	out	0x0c, r24	; 12
 d70:	31 96       	adiw	r30, 0x01	; 1
 d72:	80 81       	ld	r24, Z
 d74:	88 23       	and	r24, r24
 d76:	c9 f7       	brne	.-14     	; 0xd6a <uart_puti+0x32>
 d78:	25 96       	adiw	r28, 0x05	; 5
 d7a:	0f b6       	in	r0, 0x3f	; 63
 d7c:	f8 94       	cli
 d7e:	de bf       	out	0x3e, r29	; 62
 d80:	0f be       	out	0x3f, r0	; 63
 d82:	cd bf       	out	0x3d, r28	; 61
 d84:	df 91       	pop	r29
 d86:	cf 91       	pop	r28
 d88:	08 95       	ret

00000d8a <__vector_11>:
	uart_puts(s);
}



/* Interrupt wird ausgelöst sobald neue Daten im USART-Empfangspuffer liegen */
ISR(USART_RXC_vect)
{
 d8a:	1f 92       	push	r1
 d8c:	0f 92       	push	r0
 d8e:	0f b6       	in	r0, 0x3f	; 63
 d90:	0f 92       	push	r0
 d92:	11 24       	eor	r1, r1
 d94:	8f 93       	push	r24
	 
	unsigned char buffer;

	/* Daten aus dem Puffer lesen */
	buffer = UDR;
 d96:	8c b1       	in	r24, 0x0c	; 12

	/* warten bis der Sendepuffer leer ist */
	while ( !( UCSRA & (1<<UDRE)) );
 d98:	5d 9b       	sbis	0x0b, 5	; 11
 d9a:	fe cf       	rjmp	.-4      	; 0xd98 <__vector_11+0xe>
		
	/* und gleich wieder zurück schicken */
	UDR = buffer;
 d9c:	8c b9       	out	0x0c, r24	; 12
 d9e:	8f 91       	pop	r24
 da0:	0f 90       	pop	r0
 da2:	0f be       	out	0x3f, r0	; 63
 da4:	0f 90       	pop	r0
 da6:	1f 90       	pop	r1
 da8:	18 95       	reti

00000daa <get_adc>:
/***/
/**		Routine zum auslesen eines einzelnen A/D-Wertes	*/		
/***/
uint16_t get_adc(uint8_t adc_pin)
{
 daa:	98 2f       	mov	r25, r24
  uint8_t i;
  uint32_t result = 0;         		//Initialisieren wichtig, da lokale Variablen
 dac:	20 e0       	ldi	r18, 0x00	; 0
 dae:	30 e0       	ldi	r19, 0x00	; 0
 db0:	40 e0       	ldi	r20, 0x00	; 0
 db2:	50 e0       	ldi	r21, 0x00	; 0
									//nicht automatisch initialisiert werden und
									//zufällige Werte haben. Sonst kann Quatsch rauskommen
									
  ADCSRA = (1<<ADEN) | AD_PRE;    	// Frequenzvorteiler 
 db4:	86 e8       	ldi	r24, 0x86	; 134
 db6:	86 b9       	out	0x06, r24	; 6
									// setzen auf 8 (1) und ADC aktivieren (1)

  ADMUX = adc_pin;                  // Kanal waehlen
 db8:	97 b9       	out	0x07, r25	; 7
  ADMUX |= AD_REF; 					// Referenzspannung nutzen 
 dba:	3e 9a       	sbi	0x07, 6	; 7
  //ADMUX |=(1<<ADLAR);				// Werte linksbündig schreiben
  
  /* nach Aktivieren des ADC wird ein "Dummy-Readout" empfohlen, man liest
     also einen Wert und verwirft diesen, um den ADC "warmlaufen zu lassen" */
  ADCSRA |= (1<<ADSC);				// eine ADC-Wandlung 
 dbc:	36 9a       	sbi	0x06, 6	; 6
  while ( ADCSRA & (1<<ADSC) );	// auf Abschluss der Konvertierung warten 
 dbe:	36 99       	sbic	0x06, 6	; 6
 dc0:	fe cf       	rjmp	.-4      	; 0xdbe <get_adc+0x14>

  /* Eigentliche Messung: Mittelwertbildung aus MITTELWERT aufeinanderfolgenden Wandlungen */
  for(i=0;i<MITTELWERT;i++)
 dc2:	60 e0       	ldi	r22, 0x00	; 0
  {
    ADCSRA |= (1<<ADSC);         	// eine Wandlung "single conversion"
 dc4:	36 9a       	sbi	0x06, 6	; 6
    while ( ADCSRA & (1<<ADSC) );	// auf Abschluss der Konvertierung warten
 dc6:	36 99       	sbic	0x06, 6	; 6
 dc8:	fe cf       	rjmp	.-4      	; 0xdc6 <get_adc+0x1c>
    result += ADCW;		    		// Wandlungsergebnisse aufaddieren
 dca:	84 b1       	in	r24, 0x04	; 4
 dcc:	95 b1       	in	r25, 0x05	; 5
 dce:	aa 27       	eor	r26, r26
 dd0:	bb 27       	eor	r27, r27
 dd2:	28 0f       	add	r18, r24
 dd4:	39 1f       	adc	r19, r25
 dd6:	4a 1f       	adc	r20, r26
 dd8:	5b 1f       	adc	r21, r27
 dda:	6f 5f       	subi	r22, 0xFF	; 255
 ddc:	68 30       	cpi	r22, 0x08	; 8
 dde:	90 f3       	brcs	.-28     	; 0xdc4 <get_adc+0x1a>
  }
  ADCSRA &= ~(1<<ADEN); 			// ADC deaktivieren (2)
 de0:	37 98       	cbi	0x06, 7	; 6

  result /= MITTELWERT;        		// Summe durch MITTELWERT teilen = arithm. Mittelwert
 de2:	83 e0       	ldi	r24, 0x03	; 3
 de4:	56 95       	lsr	r21
 de6:	47 95       	ror	r20
 de8:	37 95       	ror	r19
 dea:	27 95       	ror	r18
 dec:	8a 95       	dec	r24
 dee:	d1 f7       	brne	.-12     	; 0xde4 <get_adc+0x3a>

  return result;	
}
 df0:	c9 01       	movw	r24, r18
 df2:	08 95       	ret

00000df4 <itoa>:
 df4:	fb 01       	movw	r30, r22
 df6:	9f 01       	movw	r18, r30
 df8:	e8 94       	clt
 dfa:	42 30       	cpi	r20, 0x02	; 2
 dfc:	c4 f0       	brlt	.+48     	; 0xe2e <itoa+0x3a>
 dfe:	45 32       	cpi	r20, 0x25	; 37
 e00:	b4 f4       	brge	.+44     	; 0xe2e <itoa+0x3a>
 e02:	4a 30       	cpi	r20, 0x0A	; 10
 e04:	29 f4       	brne	.+10     	; 0xe10 <itoa+0x1c>
 e06:	97 fb       	bst	r25, 7
 e08:	1e f4       	brtc	.+6      	; 0xe10 <itoa+0x1c>
 e0a:	90 95       	com	r25
 e0c:	81 95       	neg	r24
 e0e:	9f 4f       	sbci	r25, 0xFF	; 255
 e10:	64 2f       	mov	r22, r20
 e12:	77 27       	eor	r23, r23
 e14:	0e 94 94 07 	call	0xf28 <__udivmodhi4>
 e18:	80 5d       	subi	r24, 0xD0	; 208
 e1a:	8a 33       	cpi	r24, 0x3A	; 58
 e1c:	0c f0       	brlt	.+2      	; 0xe20 <itoa+0x2c>
 e1e:	89 5d       	subi	r24, 0xD9	; 217
 e20:	81 93       	st	Z+, r24
 e22:	cb 01       	movw	r24, r22
 e24:	00 97       	sbiw	r24, 0x00	; 0
 e26:	a1 f7       	brne	.-24     	; 0xe10 <itoa+0x1c>
 e28:	16 f4       	brtc	.+4      	; 0xe2e <itoa+0x3a>
 e2a:	5d e2       	ldi	r21, 0x2D	; 45
 e2c:	51 93       	st	Z+, r21
 e2e:	10 82       	st	Z, r1
 e30:	c9 01       	movw	r24, r18
 e32:	0c 94 65 07 	jmp	0xeca <strrev>

00000e36 <ltoa>:
 e36:	fa 01       	movw	r30, r20
 e38:	cf 93       	push	r28
 e3a:	ff 93       	push	r31
 e3c:	ef 93       	push	r30
 e3e:	22 30       	cpi	r18, 0x02	; 2
 e40:	44 f1       	brlt	.+80     	; 0xe92 <ltoa+0x5c>
 e42:	25 32       	cpi	r18, 0x25	; 37
 e44:	34 f5       	brge	.+76     	; 0xe92 <ltoa+0x5c>
 e46:	c2 2f       	mov	r28, r18
 e48:	e8 94       	clt
 e4a:	ca 30       	cpi	r28, 0x0A	; 10
 e4c:	49 f4       	brne	.+18     	; 0xe60 <ltoa+0x2a>
 e4e:	97 fb       	bst	r25, 7
 e50:	3e f4       	brtc	.+14     	; 0xe60 <ltoa+0x2a>
 e52:	90 95       	com	r25
 e54:	80 95       	com	r24
 e56:	70 95       	com	r23
 e58:	61 95       	neg	r22
 e5a:	7f 4f       	sbci	r23, 0xFF	; 255
 e5c:	8f 4f       	sbci	r24, 0xFF	; 255
 e5e:	9f 4f       	sbci	r25, 0xFF	; 255
 e60:	2c 2f       	mov	r18, r28
 e62:	33 27       	eor	r19, r19
 e64:	44 27       	eor	r20, r20
 e66:	55 27       	eor	r21, r21
 e68:	ff 93       	push	r31
 e6a:	ef 93       	push	r30
 e6c:	0e 94 a8 07 	call	0xf50 <__udivmodsi4>
 e70:	ef 91       	pop	r30
 e72:	ff 91       	pop	r31
 e74:	60 5d       	subi	r22, 0xD0	; 208
 e76:	6a 33       	cpi	r22, 0x3A	; 58
 e78:	0c f0       	brlt	.+2      	; 0xe7c <ltoa+0x46>
 e7a:	69 5d       	subi	r22, 0xD9	; 217
 e7c:	61 93       	st	Z+, r22
 e7e:	b9 01       	movw	r22, r18
 e80:	ca 01       	movw	r24, r20
 e82:	60 50       	subi	r22, 0x00	; 0
 e84:	70 40       	sbci	r23, 0x00	; 0
 e86:	80 40       	sbci	r24, 0x00	; 0
 e88:	90 40       	sbci	r25, 0x00	; 0
 e8a:	51 f7       	brne	.-44     	; 0xe60 <ltoa+0x2a>
 e8c:	16 f4       	brtc	.+4      	; 0xe92 <ltoa+0x5c>
 e8e:	cd e2       	ldi	r28, 0x2D	; 45
 e90:	c1 93       	st	Z+, r28
 e92:	10 82       	st	Z, r1
 e94:	8f 91       	pop	r24
 e96:	9f 91       	pop	r25
 e98:	cf 91       	pop	r28
 e9a:	0c 94 65 07 	jmp	0xeca <strrev>

00000e9e <utoa>:
 e9e:	fb 01       	movw	r30, r22
 ea0:	9f 01       	movw	r18, r30
 ea2:	42 30       	cpi	r20, 0x02	; 2
 ea4:	74 f0       	brlt	.+28     	; 0xec2 <utoa+0x24>
 ea6:	45 32       	cpi	r20, 0x25	; 37
 ea8:	64 f4       	brge	.+24     	; 0xec2 <utoa+0x24>
 eaa:	64 2f       	mov	r22, r20
 eac:	77 27       	eor	r23, r23
 eae:	0e 94 94 07 	call	0xf28 <__udivmodhi4>
 eb2:	80 5d       	subi	r24, 0xD0	; 208
 eb4:	8a 33       	cpi	r24, 0x3A	; 58
 eb6:	0c f0       	brlt	.+2      	; 0xeba <utoa+0x1c>
 eb8:	89 5d       	subi	r24, 0xD9	; 217
 eba:	81 93       	st	Z+, r24
 ebc:	cb 01       	movw	r24, r22
 ebe:	00 97       	sbiw	r24, 0x00	; 0
 ec0:	a1 f7       	brne	.-24     	; 0xeaa <utoa+0xc>
 ec2:	10 82       	st	Z, r1
 ec4:	c9 01       	movw	r24, r18
 ec6:	0c 94 65 07 	jmp	0xeca <strrev>

00000eca <strrev>:
 eca:	dc 01       	movw	r26, r24
 ecc:	fc 01       	movw	r30, r24
 ece:	01 90       	ld	r0, Z+
 ed0:	00 20       	and	r0, r0
 ed2:	e9 f7       	brne	.-6      	; 0xece <strrev+0x4>
 ed4:	32 97       	sbiw	r30, 0x02	; 2
 ed6:	ae 17       	cp	r26, r30
 ed8:	bf 07       	cpc	r27, r31
 eda:	30 f4       	brcc	.+12     	; 0xee8 <strrev+0x1e>
 edc:	7c 91       	ld	r23, X
 ede:	60 81       	ld	r22, Z
 ee0:	70 83       	st	Z, r23
 ee2:	31 97       	sbiw	r30, 0x01	; 1
 ee4:	6d 93       	st	X+, r22
 ee6:	f7 cf       	rjmp	.-18     	; 0xed6 <strrev+0xc>
 ee8:	08 95       	ret

00000eea <__mulsi3>:
 eea:	62 9f       	mul	r22, r18
 eec:	d0 01       	movw	r26, r0
 eee:	73 9f       	mul	r23, r19
 ef0:	f0 01       	movw	r30, r0
 ef2:	82 9f       	mul	r24, r18
 ef4:	e0 0d       	add	r30, r0
 ef6:	f1 1d       	adc	r31, r1
 ef8:	64 9f       	mul	r22, r20
 efa:	e0 0d       	add	r30, r0
 efc:	f1 1d       	adc	r31, r1
 efe:	92 9f       	mul	r25, r18
 f00:	f0 0d       	add	r31, r0
 f02:	83 9f       	mul	r24, r19
 f04:	f0 0d       	add	r31, r0
 f06:	74 9f       	mul	r23, r20
 f08:	f0 0d       	add	r31, r0
 f0a:	65 9f       	mul	r22, r21
 f0c:	f0 0d       	add	r31, r0
 f0e:	99 27       	eor	r25, r25
 f10:	72 9f       	mul	r23, r18
 f12:	b0 0d       	add	r27, r0
 f14:	e1 1d       	adc	r30, r1
 f16:	f9 1f       	adc	r31, r25
 f18:	63 9f       	mul	r22, r19
 f1a:	b0 0d       	add	r27, r0
 f1c:	e1 1d       	adc	r30, r1
 f1e:	f9 1f       	adc	r31, r25
 f20:	bd 01       	movw	r22, r26
 f22:	cf 01       	movw	r24, r30
 f24:	11 24       	eor	r1, r1
 f26:	08 95       	ret

00000f28 <__udivmodhi4>:
 f28:	aa 1b       	sub	r26, r26
 f2a:	bb 1b       	sub	r27, r27
 f2c:	51 e1       	ldi	r21, 0x11	; 17
 f2e:	07 c0       	rjmp	.+14     	; 0xf3e <__udivmodhi4_ep>

00000f30 <__udivmodhi4_loop>:
 f30:	aa 1f       	adc	r26, r26
 f32:	bb 1f       	adc	r27, r27
 f34:	a6 17       	cp	r26, r22
 f36:	b7 07       	cpc	r27, r23
 f38:	10 f0       	brcs	.+4      	; 0xf3e <__udivmodhi4_ep>
 f3a:	a6 1b       	sub	r26, r22
 f3c:	b7 0b       	sbc	r27, r23

00000f3e <__udivmodhi4_ep>:
 f3e:	88 1f       	adc	r24, r24
 f40:	99 1f       	adc	r25, r25
 f42:	5a 95       	dec	r21
 f44:	a9 f7       	brne	.-22     	; 0xf30 <__udivmodhi4_loop>
 f46:	80 95       	com	r24
 f48:	90 95       	com	r25
 f4a:	bc 01       	movw	r22, r24
 f4c:	cd 01       	movw	r24, r26
 f4e:	08 95       	ret

00000f50 <__udivmodsi4>:
 f50:	a1 e2       	ldi	r26, 0x21	; 33
 f52:	1a 2e       	mov	r1, r26
 f54:	aa 1b       	sub	r26, r26
 f56:	bb 1b       	sub	r27, r27
 f58:	fd 01       	movw	r30, r26
 f5a:	0d c0       	rjmp	.+26     	; 0xf76 <__udivmodsi4_ep>

00000f5c <__udivmodsi4_loop>:
 f5c:	aa 1f       	adc	r26, r26
 f5e:	bb 1f       	adc	r27, r27
 f60:	ee 1f       	adc	r30, r30
 f62:	ff 1f       	adc	r31, r31
 f64:	a2 17       	cp	r26, r18
 f66:	b3 07       	cpc	r27, r19
 f68:	e4 07       	cpc	r30, r20
 f6a:	f5 07       	cpc	r31, r21
 f6c:	20 f0       	brcs	.+8      	; 0xf76 <__udivmodsi4_ep>
 f6e:	a2 1b       	sub	r26, r18
 f70:	b3 0b       	sbc	r27, r19
 f72:	e4 0b       	sbc	r30, r20
 f74:	f5 0b       	sbc	r31, r21

00000f76 <__udivmodsi4_ep>:
 f76:	66 1f       	adc	r22, r22
 f78:	77 1f       	adc	r23, r23
 f7a:	88 1f       	adc	r24, r24
 f7c:	99 1f       	adc	r25, r25
 f7e:	1a 94       	dec	r1
 f80:	69 f7       	brne	.-38     	; 0xf5c <__udivmodsi4_loop>
 f82:	60 95       	com	r22
 f84:	70 95       	com	r23
 f86:	80 95       	com	r24
 f88:	90 95       	com	r25
 f8a:	9b 01       	movw	r18, r22
 f8c:	ac 01       	movw	r20, r24
 f8e:	bd 01       	movw	r22, r26
 f90:	cf 01       	movw	r24, r30
 f92:	08 95       	ret

00000f94 <__divmodsi4>:
 f94:	97 fb       	bst	r25, 7
 f96:	09 2e       	mov	r0, r25
 f98:	05 26       	eor	r0, r21
 f9a:	0e d0       	rcall	.+28     	; 0xfb8 <__divmodsi4_neg1>
 f9c:	57 fd       	sbrc	r21, 7
 f9e:	04 d0       	rcall	.+8      	; 0xfa8 <__divmodsi4_neg2>
 fa0:	d7 df       	rcall	.-82     	; 0xf50 <__udivmodsi4>
 fa2:	0a d0       	rcall	.+20     	; 0xfb8 <__divmodsi4_neg1>
 fa4:	00 1c       	adc	r0, r0
 fa6:	38 f4       	brcc	.+14     	; 0xfb6 <__divmodsi4_exit>

00000fa8 <__divmodsi4_neg2>:
 fa8:	50 95       	com	r21
 faa:	40 95       	com	r20
 fac:	30 95       	com	r19
 fae:	21 95       	neg	r18
 fb0:	3f 4f       	sbci	r19, 0xFF	; 255
 fb2:	4f 4f       	sbci	r20, 0xFF	; 255
 fb4:	5f 4f       	sbci	r21, 0xFF	; 255

00000fb6 <__divmodsi4_exit>:
 fb6:	08 95       	ret

00000fb8 <__divmodsi4_neg1>:
 fb8:	f6 f7       	brtc	.-4      	; 0xfb6 <__divmodsi4_exit>
 fba:	90 95       	com	r25
 fbc:	80 95       	com	r24
 fbe:	70 95       	com	r23
 fc0:	61 95       	neg	r22
 fc2:	7f 4f       	sbci	r23, 0xFF	; 255
 fc4:	8f 4f       	sbci	r24, 0xFF	; 255
 fc6:	9f 4f       	sbci	r25, 0xFF	; 255
 fc8:	08 95       	ret
