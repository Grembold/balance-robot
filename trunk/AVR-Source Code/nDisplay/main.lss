
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000051a  2**0
                  ALLOC
  2 .stab         00000378  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000eb  00000000  00000000  00000945  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000484  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000167  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ad  00000000  00000000  0000101b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000008  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_17>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ea       	ldi	r30, 0xA6	; 166
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
/****************
*     main      *
****************/
int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	init_twi_slave(SLAVE_ADD);
  9a:	80 e5       	ldi	r24, 0x50	; 80
  9c:	0e 94 52 00 	call	0xa4	; 0xa4 <init_twi_slave>
	sei();
  a0:	78 94       	sei
	while(1);
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x10>

000000a4 <init_twi_slave>:
}


/****************************************************************************/
/*!
*  \brief
*  Initaliserung des TWI-Inteface. Muss zu Beginn aufgerufen werden, sowie bei
*	 einem Wechsel der Slave Adresse 
*	\param adr gewünschte Slave-Adresse
*  
*****************************************************************************/
void init_twi_slave (uint8_t adr)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	21 97       	sbiw	r28, 0x01	; 1
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	89 83       	std	Y+1, r24	; 0x01
	TWAR= adr; 																		// Adresse setzen
  ba:	e2 e2       	ldi	r30, 0x22	; 34
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	89 81       	ldd	r24, Y+1	; 0x01
  c0:	80 83       	st	Z, r24
	TWCR &= ~(1<<TWSTA)|(1<<TWSTO);							// START und STOP deaktivieren
  c2:	a6 e5       	ldi	r26, 0x56	; 86
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e6 e5       	ldi	r30, 0x56	; 86
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8f 7d       	andi	r24, 0xDF	; 223
  ce:	8c 93       	st	X, r24
	TWCR|= (1<<TWEA) | (1<<TWEN) | (1<<TWIE);		// aktivieren von: Acknowledge, Interrupt und TWI 
  d0:	a6 e5       	ldi	r26, 0x56	; 86
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e6 e5       	ldi	r30, 0x56	; 86
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	85 64       	ori	r24, 0x45	; 69
  dc:	8c 93       	st	X, r24
	register_adr=0x00;														// registeradresse zurücksetzen
  de:	10 92 61 00 	sts	0x0061, r1
	twi_status.bFirstAccess = 1;									// erster zugriff nach stop
  e2:	80 91 60 00 	lds	r24, 0x0060
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 93 60 00 	sts	0x0060, r24
	
	DDRB = 0xff;
  ec:	e7 e3       	ldi	r30, 0x37	; 55
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	80 83       	st	Z, r24
	PORTB = 0x00;
  f4:	e8 e3       	ldi	r30, 0x38	; 56
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	10 82       	st	Z, r1
	DDRA = 0xff;
  fa:	ea e3       	ldi	r30, 0x3A	; 58
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	80 83       	st	Z, r24
	PORTA = 0x00;
 102:	eb e3       	ldi	r30, 0x3B	; 59
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	10 82       	st	Z, r1
 108:	21 96       	adiw	r28, 0x01	; 1
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <__vector_17>:
}


/****************************************************************************/
/*!
*  \brief
*  Interrupt wird ausgelöst ein Ereigniss auf dem Bus ausgelöst wird.
*  Im Register TWSR befindet sich dann ein Statuscode, anhand dessen die 
*  Situation festgestellt werden kann.
*****************************************************************************/
ISR(TWI_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	3f 93       	push	r19
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	23 97       	sbiw	r28, 0x03	; 3
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	cd bf       	out	0x3d, r28	; 61
	uint8_t data = 0;
 13e:	19 82       	std	Y+1, r1	; 0x01
	switch (TW_STATUS) 			// TWI-Statusregister prüfen und nötige Aktion bestimmen 
 140:	e1 e2       	ldi	r30, 0x21	; 33
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	99 27       	eor	r25, r25
 148:	9c 01       	movw	r18, r24
 14a:	28 7f       	andi	r18, 0xF8	; 248
 14c:	30 70       	andi	r19, 0x00	; 0
 14e:	3b 83       	std	Y+3, r19	; 0x03
 150:	2a 83       	std	Y+2, r18	; 0x02
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	9b 81       	ldd	r25, Y+3	; 0x03
 156:	80 38       	cpi	r24, 0x80	; 128
 158:	91 05       	cpc	r25, r1
 15a:	01 f1       	breq	.+64     	; 0x19c <__vector_17+0x82>
 15c:	2a 81       	ldd	r18, Y+2	; 0x02
 15e:	3b 81       	ldd	r19, Y+3	; 0x03
 160:	21 38       	cpi	r18, 0x81	; 129
 162:	31 05       	cpc	r19, r1
 164:	34 f4       	brge	.+12     	; 0x172 <__vector_17+0x58>
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	9b 81       	ldd	r25, Y+3	; 0x03
 16a:	80 36       	cpi	r24, 0x60	; 96
 16c:	91 05       	cpc	r25, r1
 16e:	69 f0       	breq	.+26     	; 0x18a <__vector_17+0x70>
 170:	4b c0       	rjmp	.+150    	; 0x208 <__vector_17+0xee>
 172:	2a 81       	ldd	r18, Y+2	; 0x02
 174:	3b 81       	ldd	r19, Y+3	; 0x03
 176:	28 3a       	cpi	r18, 0xA8	; 168
 178:	31 05       	cpc	r19, r1
 17a:	09 f4       	brne	.+2      	; 0x17e <__vector_17+0x64>
 17c:	40 c0       	rjmp	.+128    	; 0x1fe <__vector_17+0xe4>
 17e:	8a 81       	ldd	r24, Y+2	; 0x02
 180:	9b 81       	ldd	r25, Y+3	; 0x03
 182:	88 3b       	cpi	r24, 0xB8	; 184
 184:	91 05       	cpc	r25, r1
 186:	d9 f1       	breq	.+118    	; 0x1fe <__vector_17+0xe4>
 188:	3f c0       	rjmp	.+126    	; 0x208 <__vector_17+0xee>
	{	
		case TW_SR_SLA_ACK: 		// 0x60 Slave Receiver, wurde adressiert	
			TWCR_ACK; 						// nächstes Datenbyte empfangen, ACK danach
 18a:	e6 e5       	ldi	r30, 0x56	; 86
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	85 ec       	ldi	r24, 0xC5	; 197
 190:	80 83       	st	Z, r24
			PORTA = 0xFC;
 192:	eb e3       	ldi	r30, 0x3B	; 59
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	8c ef       	ldi	r24, 0xFC	; 252
 198:	80 83       	st	Z, r24
			break;
 19a:	3f c0       	rjmp	.+126    	; 0x21a <__vector_17+0x100>
			
		/***   Daten Empfangen   ****/	
		case TW_SR_DATA_ACK: 		// 0x80 Slave Receiver,Daten empfangen
			data=TWDR; 						// Empfangene Daten auslesen
 19c:	e3 e2       	ldi	r30, 0x23	; 35
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	89 83       	std	Y+1, r24	; 0x01
			if(twi_status.bFirstAccess)	// erte Adressierung nach STOP
 1a4:	80 91 60 00 	lds	r24, 0x0060
 1a8:	81 70       	andi	r24, 0x01	; 1
 1aa:	88 23       	and	r24, r24
 1ac:	71 f0       	breq	.+28     	; 0x1ca <__vector_17+0xb0>
			{
				register_adr = data;// Empfangene Register Adresse speciern
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	80 93 61 00 	sts	0x0061, r24
				PORTA = register_adr;
 1b4:	eb e3       	ldi	r30, 0x3B	; 59
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 91 61 00 	lds	r24, 0x0061
 1bc:	80 83       	st	Z, r24
				twi_status.bFirstAccess = 0;
 1be:	80 91 60 00 	lds	r24, 0x0060
 1c2:	8e 7f       	andi	r24, 0xFE	; 254
 1c4:	80 93 60 00 	sts	0x0060, r24
 1c8:	15 c0       	rjmp	.+42     	; 0x1f4 <__vector_17+0xda>
			}
			else
			{
				switch( register_adr)
 1ca:	80 91 61 00 	lds	r24, 0x0061
 1ce:	99 27       	eor	r25, r25
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	87 30       	cpi	r24, 0x07	; 7
 1d4:	91 05       	cpc	r25, r1
 1d6:	28 f4       	brcc	.+10     	; 0x1e2 <__vector_17+0xc8>
				{
					case INBuffer:
					case OUTBuffer:
					case INCounter:
					case OUTCounter:
					case PaketReqID:
					case Status:
					case GPIO:
						PORTB = data;
 1d8:	e8 e3       	ldi	r30, 0x38	; 56
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	80 83       	st	Z, r24
						break;
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <__vector_17+0xd0>
					default:
						PORTB = 0xff;
 1e2:	e8 e3       	ldi	r30, 0x38	; 56
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	80 83       	st	Z, r24
				}
				register_adr++;
 1ea:	80 91 61 00 	lds	r24, 0x0061
 1ee:	8f 5f       	subi	r24, 0xFF	; 255
 1f0:	80 93 61 00 	sts	0x0061, r24
			}								
			TWCR_ACK;
 1f4:	e6 e5       	ldi	r30, 0x56	; 86
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	85 ec       	ldi	r24, 0xC5	; 197
 1fa:	80 83       	st	Z, r24
			break;
 1fc:	0e c0       	rjmp	.+28     	; 0x21a <__vector_17+0x100>
			
		/***   Daten versenden   ***/
		case TW_ST_SLA_ACK: 		// 0xA8 Slave Transmitter wurde adressiert
		case TW_ST_DATA_ACK: 		// 0xB8 Slave Transmitter, weitere Daten wurden angefordert
			TWCR_ACK;
 1fe:	e6 e5       	ldi	r30, 0x56	; 86
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	85 ec       	ldi	r24, 0xC5	; 197
 204:	80 83       	st	Z, r24
			break;
 206:	09 c0       	rjmp	.+18     	; 0x21a <__vector_17+0x100>
			
		case TW_ST_DATA_NACK:		// 0xC0 Keine Daten mehr gefordert 
		case TW_SR_DATA_NACK:		// 0x88 Keine Daten weiteren empfangen
		case TW_ST_LAST_DATA:		// 0xC8  Last data byte in TWDR has been transmitted (TWEA = 0); ACK has been received
		case TW_SR_STOP: 				// 0xA0 STOP empfangen
		default:								// alle anderen codes
				twi_status.bFirstAccess = 1;
 208:	80 91 60 00 	lds	r24, 0x0060
 20c:	81 60       	ori	r24, 0x01	; 1
 20e:	80 93 60 00 	sts	0x0060, r24
				TWCR_RESET; 				// Übertragung beenden, warten bis zur nächsten Adressierung
 212:	e6 e5       	ldi	r30, 0x56	; 86
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	85 ec       	ldi	r24, 0xC5	; 197
 218:	80 83       	st	Z, r24
 21a:	23 96       	adiw	r28, 0x03	; 3
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	cd bf       	out	0x3d, r28	; 61
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	ff 91       	pop	r31
 228:	ef 91       	pop	r30
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <i2c_init>:
/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 244:	e9 eb       	ldi	r30, 0xB9	; 185
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	10 82       	st	Z, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 24a:	e8 eb       	ldi	r30, 0xB8	; 184
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 e2       	ldi	r24, 0x20	; 32
 250:	80 83       	st	Z, r24
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <i2c_start>:

}/* i2c_init */


/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	24 97       	sbiw	r28, 0x04	; 4
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 26e:	ec eb       	ldi	r30, 0xBC	; 188
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	84 ea       	ldi	r24, 0xA4	; 164
 274:	80 83       	st	Z, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 276:	ec eb       	ldi	r30, 0xBC	; 188
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	88 23       	and	r24, r24
 27e:	dc f7       	brge	.-10     	; 0x276 <i2c_start+0x1e>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 280:	e9 eb       	ldi	r30, 0xB9	; 185
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	90 81       	ld	r25, Z
 286:	88 ef       	ldi	r24, 0xF8	; 248
 288:	89 23       	and	r24, r25
 28a:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	88 30       	cpi	r24, 0x08	; 8
 290:	41 f0       	breq	.+16     	; 0x2a2 <i2c_start+0x4a>
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	80 31       	cpi	r24, 0x10	; 16
 296:	29 f0       	breq	.+10     	; 0x2a2 <i2c_start+0x4a>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	9c 83       	std	Y+4, r25	; 0x04
 29e:	8b 83       	std	Y+3, r24	; 0x03
 2a0:	20 c0       	rjmp	.+64     	; 0x2e2 <i2c_start+0x8a>

	// send device address
	TWDR = address;
 2a2:	eb eb       	ldi	r30, 0xBB	; 187
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	8a 81       	ldd	r24, Y+2	; 0x02
 2a8:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 2aa:	ec eb       	ldi	r30, 0xBC	; 188
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	84 e8       	ldi	r24, 0x84	; 132
 2b0:	80 83       	st	Z, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 2b2:	ec eb       	ldi	r30, 0xBC	; 188
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	88 23       	and	r24, r24
 2ba:	dc f7       	brge	.-10     	; 0x2b2 <i2c_start+0x5a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 2bc:	e9 eb       	ldi	r30, 0xB9	; 185
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	90 81       	ld	r25, Z
 2c2:	88 ef       	ldi	r24, 0xF8	; 248
 2c4:	89 23       	and	r24, r25
 2c6:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	88 31       	cpi	r24, 0x18	; 24
 2cc:	41 f0       	breq	.+16     	; 0x2de <i2c_start+0x86>
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	80 34       	cpi	r24, 0x40	; 64
 2d2:	29 f0       	breq	.+10     	; 0x2de <i2c_start+0x86>
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	9c 83       	std	Y+4, r25	; 0x04
 2da:	8b 83       	std	Y+3, r24	; 0x03
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <i2c_start+0x8a>

	return 0;
 2de:	1c 82       	std	Y+4, r1	; 0x04
 2e0:	1b 82       	std	Y+3, r1	; 0x03
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	9c 81       	ldd	r25, Y+4	; 0x04
 2e6:	24 96       	adiw	r28, 0x04	; 4
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	08 95       	ret

000002f8 <i2c_start_wait>:

}/* i2c_start */


/*************************************************************************
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	22 97       	sbiw	r28, 0x02	; 2
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	8a 83       	std	Y+2, r24	; 0x02
 30e:	00 c0       	rjmp	.+0      	; 0x310 <i2c_start_wait+0x18>
    uint8_t   twst;


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 310:	ec eb       	ldi	r30, 0xBC	; 188
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	84 ea       	ldi	r24, 0xA4	; 164
 316:	80 83       	st	Z, r24
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 318:	ec eb       	ldi	r30, 0xBC	; 188
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	88 23       	and	r24, r24
 320:	dc f7       	brge	.-10     	; 0x318 <i2c_start_wait+0x20>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 322:	e9 eb       	ldi	r30, 0xB9	; 185
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	90 81       	ld	r25, Z
 328:	88 ef       	ldi	r24, 0xF8	; 248
 32a:	89 23       	and	r24, r25
 32c:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	88 30       	cpi	r24, 0x08	; 8
 332:	19 f0       	breq	.+6      	; 0x33a <i2c_start_wait+0x42>
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	80 31       	cpi	r24, 0x10	; 16
 338:	59 f7       	brne	.-42     	; 0x310 <i2c_start_wait+0x18>
    
    	// send device address
    	TWDR = address;
 33a:	eb eb       	ldi	r30, 0xBB	; 187
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	8a 81       	ldd	r24, Y+2	; 0x02
 340:	80 83       	st	Z, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 342:	ec eb       	ldi	r30, 0xBC	; 188
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	84 e8       	ldi	r24, 0x84	; 132
 348:	80 83       	st	Z, r24
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 34a:	ec eb       	ldi	r30, 0xBC	; 188
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	88 23       	and	r24, r24
 352:	dc f7       	brge	.-10     	; 0x34a <i2c_start_wait+0x52>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 354:	e9 eb       	ldi	r30, 0xB9	; 185
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	90 81       	ld	r25, Z
 35a:	88 ef       	ldi	r24, 0xF8	; 248
 35c:	89 23       	and	r24, r25
 35e:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	80 32       	cpi	r24, 0x20	; 32
 364:	19 f0       	breq	.+6      	; 0x36c <i2c_start_wait+0x74>
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	88 35       	cpi	r24, 0x58	; 88
 36a:	69 f4       	brne	.+26     	; 0x386 <i2c_start_wait+0x8e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 36c:	ec eb       	ldi	r30, 0xBC	; 188
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	84 e9       	ldi	r24, 0x94	; 148
 372:	80 83       	st	Z, r24
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 374:	ec eb       	ldi	r30, 0xBC	; 188
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	99 27       	eor	r25, r25
 37c:	80 71       	andi	r24, 0x10	; 16
 37e:	90 70       	andi	r25, 0x00	; 0
 380:	00 97       	sbiw	r24, 0x00	; 0
 382:	c1 f7       	brne	.-16     	; 0x374 <i2c_start_wait+0x7c>
	        
    	    continue;
 384:	c5 cf       	rjmp	.-118    	; 0x310 <i2c_start_wait+0x18>
 386:	22 96       	adiw	r28, 0x02	; 2
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <i2c_rep_start>:
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */


/*************************************************************************
 Issues a repeated start condition and sends address and transfer direction 

 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	21 97       	sbiw	r28, 0x01	; 1
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61
 3ac:	89 83       	std	Y+1, r24	; 0x01
    return i2c_start( address );
 3ae:	89 81       	ldd	r24, Y+1	; 0x01
 3b0:	0e 94 2c 01 	call	0x258	; 0x258 <i2c_start>
 3b4:	99 27       	eor	r25, r25
 3b6:	21 96       	adiw	r28, 0x01	; 1
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <i2c_stop>:

}/* i2c_rep_start */


/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	cd b7       	in	r28, 0x3d	; 61
 3ce:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3d0:	ec eb       	ldi	r30, 0xBC	; 188
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	84 e9       	ldi	r24, 0x94	; 148
 3d6:	80 83       	st	Z, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 3d8:	ec eb       	ldi	r30, 0xBC	; 188
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	99 27       	eor	r25, r25
 3e0:	80 71       	andi	r24, 0x10	; 16
 3e2:	90 70       	andi	r25, 0x00	; 0
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	c1 f7       	brne	.-16     	; 0x3d8 <i2c_stop+0x10>
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <i2c_write>:

}/* i2c_stop */


/*************************************************************************
  Send one byte to I2C device
  
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	24 97       	sbiw	r28, 0x04	; 4
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
 402:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 404:	eb eb       	ldi	r30, 0xBB	; 187
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 40c:	ec eb       	ldi	r30, 0xBC	; 188
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	84 e8       	ldi	r24, 0x84	; 132
 412:	80 83       	st	Z, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 414:	ec eb       	ldi	r30, 0xBC	; 188
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	88 23       	and	r24, r24
 41c:	dc f7       	brge	.-10     	; 0x414 <i2c_write+0x26>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 41e:	e9 eb       	ldi	r30, 0xB9	; 185
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	90 81       	ld	r25, Z
 424:	88 ef       	ldi	r24, 0xF8	; 248
 426:	89 23       	and	r24, r25
 428:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
 42a:	89 81       	ldd	r24, Y+1	; 0x01
 42c:	88 32       	cpi	r24, 0x28	; 40
 42e:	29 f0       	breq	.+10     	; 0x43a <i2c_write+0x4c>
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	9c 83       	std	Y+4, r25	; 0x04
 436:	8b 83       	std	Y+3, r24	; 0x03
 438:	02 c0       	rjmp	.+4      	; 0x43e <i2c_write+0x50>
	return 0;
 43a:	1c 82       	std	Y+4, r1	; 0x04
 43c:	1b 82       	std	Y+3, r1	; 0x03
 43e:	8b 81       	ldd	r24, Y+3	; 0x03
 440:	9c 81       	ldd	r25, Y+4	; 0x04
 442:	24 96       	adiw	r28, 0x04	; 4
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	f8 94       	cli
 448:	de bf       	out	0x3e, r29	; 62
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	cd bf       	out	0x3d, r28	; 61
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	08 95       	ret

00000454 <i2c_readAck>:

}/* i2c_write */


/*************************************************************************
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
 458:	cd b7       	in	r28, 0x3d	; 61
 45a:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 45c:	ec eb       	ldi	r30, 0xBC	; 188
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	84 ec       	ldi	r24, 0xC4	; 196
 462:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));    
 464:	ec eb       	ldi	r30, 0xBC	; 188
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	88 23       	and	r24, r24
 46c:	dc f7       	brge	.-10     	; 0x464 <__stack+0x5>

    return TWDR;
 46e:	eb eb       	ldi	r30, 0xBB	; 187
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	99 27       	eor	r25, r25
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <i2c_readNak>:

}/* i2c_readAck */


/*************************************************************************
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
 484:	ec eb       	ldi	r30, 0xBC	; 188
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	84 e8       	ldi	r24, 0x84	; 132
 48a:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 48c:	ec eb       	ldi	r30, 0xBC	; 188
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	88 23       	and	r24, r24
 494:	dc f7       	brge	.-10     	; 0x48c <i2c_readNak+0x10>
	
    return TWDR;
 496:	eb eb       	ldi	r30, 0xBB	; 187
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	99 27       	eor	r25, r25
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <_exit>:
 4a4:	ff cf       	rjmp	.-2      	; 0x4a4 <_exit>
