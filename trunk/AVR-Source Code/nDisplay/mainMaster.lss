
mainMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000004fa  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000378  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  0000097d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ba  00000000  00000000  000009bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c9  00000000  00000000  00000a77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000289  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000559  00000000  00000000  000013c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000253  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000094  00000000  00000000  00001c37  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e8       	ldi	r26, 0x84	; 132
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  8a:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <i2c_writeData>:
    for(;;);	
}

void i2c_writeData(uint8_t* data, uint8_t size)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	ec 01       	movw	r28, r24
  9c:	06 2f       	mov	r16, r22
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	04 c0       	rjmp	.+8      	; 0xaa <i2c_writeData+0x18>
	uint8_t i=0;

	for( i=0; i<size; i++)
	{
		i2c_write(*data++);
  a2:	89 91       	ld	r24, Y+
  a4:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
  a8:	1f 5f       	subi	r17, 0xFF	; 255
  aa:	10 17       	cp	r17, r16
  ac:	d1 f7       	brne	.-12     	; 0xa2 <i2c_writeData+0x10>
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	1f 91       	pop	r17
  b4:	0f 91       	pop	r16
  b6:	08 95       	ret

000000b8 <main>:
  b8:	ff 92       	push	r15
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
  c6:	cd 54       	subi	r28, 0x4D	; 77
  c8:	d0 40       	sbci	r29, 0x00	; 0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
  d4:	8f ef       	ldi	r24, 0xFF	; 255
  d6:	87 bb       	out	0x17, r24	; 23
  d8:	13 e0       	ldi	r17, 0x03	; 3
  da:	18 bb       	out	0x18, r17	; 24
  dc:	0e 94 48 01 	call	0x290	; 0x290 <i2c_init>
  e0:	1b 8b       	std	Y+19, r17	; 0x13
  e2:	de 01       	movw	r26, r28
  e4:	54 96       	adiw	r26, 0x14	; 20
  e6:	e0 e6       	ldi	r30, 0x60	; 96
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	82 e1       	ldi	r24, 0x12	; 18
  ec:	01 90       	ld	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	81 50       	subi	r24, 0x01	; 1
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x34>
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	8a 83       	std	Y+2, r24	; 0x02
  fa:	1c 82       	std	Y+4, r1	; 0x04
  fc:	1b 82       	std	Y+3, r1	; 0x03
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	9d 83       	std	Y+5, r25	; 0x05
 102:	1e 82       	std	Y+6, r1	; 0x06
 104:	84 e0       	ldi	r24, 0x04	; 4
 106:	8a af       	std	Y+58, r24	; 0x3a
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	fe 01       	movw	r30, r28
 10c:	e8 5b       	subi	r30, 0xB8	; 184
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	80 83       	st	Z, r24
 112:	fe 01       	movw	r30, r28
 114:	e4 5b       	subi	r30, 0xB4	; 180
 116:	ff 4f       	sbci	r31, 0xFF	; 255
 118:	90 83       	st	Z, r25
 11a:	fe 01       	movw	r30, r28
 11c:	e3 5b       	subi	r30, 0xB3	; 179
 11e:	ff 4f       	sbci	r31, 0xFF	; 255
 120:	80 81       	ld	r24, Z
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	80 83       	st	Z, r24
 126:	de 01       	movw	r26, r28
 128:	db 96       	adiw	r26, 0x3b	; 59
 12a:	e2 e7       	ldi	r30, 0x72	; 114
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	01 90       	ld	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	81 50       	subi	r24, 0x01	; 1
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x78>
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	8d 87       	std	Y+13, r24	; 0x0d
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	8e 87       	std	Y+14, r24	; 0x0e
 140:	ce 01       	movw	r24, r28
 142:	ca 96       	adiw	r24, 0x3a	; 58
 144:	98 8b       	std	Y+16, r25	; 0x10
 146:	8f 87       	std	Y+15, r24	; 0x0f
 148:	19 8a       	std	Y+17, r1	; 0x11
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	8a 8b       	std	Y+18, r24	; 0x12
 14e:	80 e4       	ldi	r24, 0x40	; 64
 150:	0e 94 56 01 	call	0x2ac	; 0x2ac <i2c_start>
 154:	96 e0       	ldi	r25, 0x06	; 6
 156:	98 bb       	out	0x18, r25	; 24
 158:	88 23       	and	r24, r24
 15a:	31 f0       	breq	.+12     	; 0x168 <main+0xb0>
 15c:	8e e0       	ldi	r24, 0x0E	; 14
 15e:	88 bb       	out	0x18, r24	; 24
 160:	0e 94 0e 02 	call	0x41c	; 0x41c <i2c_stop>
 164:	8c e1       	ldi	r24, 0x1C	; 28
 166:	12 c0       	rjmp	.+36     	; 0x18c <main+0xd4>
 168:	88 e3       	ldi	r24, 0x38	; 56
 16a:	88 bb       	out	0x18, r24	; 24
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
 172:	66 e0       	ldi	r22, 0x06	; 6
 174:	ce 01       	movw	r24, r28
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	0e 94 49 00 	call	0x92	; 0x92 <i2c_writeData>
 17c:	63 e1       	ldi	r22, 0x13	; 19
 17e:	ce 01       	movw	r24, r28
 180:	43 96       	adiw	r24, 0x13	; 19
 182:	0e 94 49 00 	call	0x92	; 0x92 <i2c_writeData>
 186:	0e 94 0e 02 	call	0x41c	; 0x41c <i2c_stop>
 18a:	80 e7       	ldi	r24, 0x70	; 112
 18c:	88 bb       	out	0x18, r24	; 24
 18e:	80 e4       	ldi	r24, 0x40	; 64
 190:	0e 94 a6 01 	call	0x34c	; 0x34c <i2c_start_wait>
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
 19a:	89 e1       	ldi	r24, 0x19	; 25
 19c:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
 1a0:	0e 94 0e 02 	call	0x41c	; 0x41c <i2c_stop>
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	ef ef       	ldi	r30, 0xFF	; 255
 1a8:	fb e6       	ldi	r31, 0x6B	; 107
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1aa:	cf 01       	movw	r24, r30
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0xf4>
 1b0:	2f 5f       	subi	r18, 0xFF	; 255
 1b2:	25 36       	cpi	r18, 0x65	; 101
 1b4:	d1 f7       	brne	.-12     	; 0x1aa <main+0xf2>
 1b6:	80 e4       	ldi	r24, 0x40	; 64
 1b8:	0e 94 56 01 	call	0x2ac	; 0x2ac <i2c_start>
 1bc:	88 23       	and	r24, r24
 1be:	69 f4       	brne	.+26     	; 0x1da <main+0x122>
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
 1c6:	66 e0       	ldi	r22, 0x06	; 6
 1c8:	ce 01       	movw	r24, r28
 1ca:	0d 96       	adiw	r24, 0x0d	; 13
 1cc:	0e 94 49 00 	call	0x92	; 0x92 <i2c_writeData>
 1d0:	64 e1       	ldi	r22, 0x14	; 20
 1d2:	ce 01       	movw	r24, r28
 1d4:	ca 96       	adiw	r24, 0x3a	; 58
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <i2c_writeData>
 1da:	0e 94 0e 02 	call	0x41c	; 0x41c <i2c_stop>
 1de:	80 e4       	ldi	r24, 0x40	; 64
 1e0:	0e 94 a6 01 	call	0x34c	; 0x34c <i2c_start_wait>
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
 1ea:	8a e1       	ldi	r24, 0x1A	; 26
 1ec:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
 1f0:	0e 94 0e 02 	call	0x41c	; 0x41c <i2c_stop>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	f8 2e       	mov	r15, r24
 1f8:	0a e0       	ldi	r16, 0x0A	; 10
 1fa:	10 e0       	ldi	r17, 0x00	; 0
 1fc:	9f 2d       	mov	r25, r15
 1fe:	9c 5f       	subi	r25, 0xFC	; 252
 200:	9e a3       	std	Y+38, r25	; 0x26
 202:	1d ab       	std	Y+53, r17	; 0x35
 204:	0c ab       	std	Y+52, r16	; 0x34
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	88 af       	std	Y+56, r24	; 0x38
 20a:	89 ad       	ldd	r24, Y+57	; 0x39
 20c:	8e 7f       	andi	r24, 0xFE	; 254
 20e:	89 af       	std	Y+57, r24	; 0x39
 210:	de 01       	movw	r26, r28
 212:	97 96       	adiw	r26, 0x27	; 39
 214:	ee e7       	ldi	r30, 0x7E	; 126
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	01 90       	ld	r0, Z+
 21c:	0d 92       	st	X+, r0
 21e:	81 50       	subi	r24, 0x01	; 1
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x162>
 222:	9f 83       	std	Y+7, r25	; 0x07
 224:	f3 94       	inc	r15
 226:	f8 86       	std	Y+8, r15	; 0x08
 228:	1a 86       	std	Y+10, r1	; 0x0a
 22a:	19 86       	std	Y+9, r1	; 0x09
 22c:	1b 86       	std	Y+11, r1	; 0x0b
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	ef ef       	ldi	r30, 0xFF	; 255
 232:	fb e6       	ldi	r31, 0x6B	; 107
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 234:	cf 01       	movw	r24, r30
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <main+0x17e>
 23a:	2f 5f       	subi	r18, 0xFF	; 255
 23c:	25 31       	cpi	r18, 0x15	; 21
 23e:	d1 f7       	brne	.-12     	; 0x234 <main+0x17c>
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	8c 87       	std	Y+12, r24	; 0x0c
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	0e 94 56 01 	call	0x2ac	; 0x2ac <i2c_start>
 24a:	88 23       	and	r24, r24
 24c:	69 f4       	brne	.+26     	; 0x268 <main+0x1b0>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
 254:	66 e0       	ldi	r22, 0x06	; 6
 256:	ce 01       	movw	r24, r28
 258:	07 96       	adiw	r24, 0x07	; 7
 25a:	0e 94 49 00 	call	0x92	; 0x92 <i2c_writeData>
 25e:	64 e1       	ldi	r22, 0x14	; 20
 260:	ce 01       	movw	r24, r28
 262:	86 96       	adiw	r24, 0x26	; 38
 264:	0e 94 49 00 	call	0x92	; 0x92 <i2c_writeData>
 268:	0e 94 0e 02 	call	0x41c	; 0x41c <i2c_stop>
 26c:	80 e4       	ldi	r24, 0x40	; 64
 26e:	0e 94 a6 01 	call	0x34c	; 0x34c <i2c_start_wait>
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
 278:	8a e1       	ldi	r24, 0x1A	; 26
 27a:	0e 94 21 02 	call	0x442	; 0x442 <i2c_write>
 27e:	0e 94 0e 02 	call	0x41c	; 0x41c <i2c_stop>
 282:	06 5f       	subi	r16, 0xF6	; 246
 284:	1f 4f       	sbci	r17, 0xFF	; 255
 286:	85 e1       	ldi	r24, 0x15	; 21
 288:	f8 16       	cp	r15, r24
 28a:	09 f0       	breq	.+2      	; 0x28e <main+0x1d6>
 28c:	b7 cf       	rjmp	.-146    	; 0x1fc <main+0x144>
 28e:	ff cf       	rjmp	.-2      	; 0x28e <main+0x1d6>

00000290 <i2c_init>:
/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
 298:	e1 e2       	ldi	r30, 0x21	; 33
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	10 82       	st	Z, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
 29e:	e0 e2       	ldi	r30, 0x20	; 32
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	8f e2       	ldi	r24, 0x2F	; 47
 2a4:	80 83       	st	Z, r24
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <i2c_start>:

}/* i2c_init */


/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	24 97       	sbiw	r28, 0x04	; 4
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 2c2:	e6 e5       	ldi	r30, 0x56	; 86
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	84 ea       	ldi	r24, 0xA4	; 164
 2c8:	80 83       	st	Z, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 2ca:	e6 e5       	ldi	r30, 0x56	; 86
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	88 23       	and	r24, r24
 2d2:	dc f7       	brge	.-10     	; 0x2ca <i2c_start+0x1e>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 2d4:	e1 e2       	ldi	r30, 0x21	; 33
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	90 81       	ld	r25, Z
 2da:	88 ef       	ldi	r24, 0xF8	; 248
 2dc:	89 23       	and	r24, r25
 2de:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	88 30       	cpi	r24, 0x08	; 8
 2e4:	41 f0       	breq	.+16     	; 0x2f6 <i2c_start+0x4a>
 2e6:	89 81       	ldd	r24, Y+1	; 0x01
 2e8:	80 31       	cpi	r24, 0x10	; 16
 2ea:	29 f0       	breq	.+10     	; 0x2f6 <i2c_start+0x4a>
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	9c 83       	std	Y+4, r25	; 0x04
 2f2:	8b 83       	std	Y+3, r24	; 0x03
 2f4:	20 c0       	rjmp	.+64     	; 0x336 <i2c_start+0x8a>

	// send device address
	TWDR = address;
 2f6:	e3 e2       	ldi	r30, 0x23	; 35
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 2fe:	e6 e5       	ldi	r30, 0x56	; 86
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	84 e8       	ldi	r24, 0x84	; 132
 304:	80 83       	st	Z, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 306:	e6 e5       	ldi	r30, 0x56	; 86
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	88 23       	and	r24, r24
 30e:	dc f7       	brge	.-10     	; 0x306 <i2c_start+0x5a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 310:	e1 e2       	ldi	r30, 0x21	; 33
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	90 81       	ld	r25, Z
 316:	88 ef       	ldi	r24, 0xF8	; 248
 318:	89 23       	and	r24, r25
 31a:	89 83       	std	Y+1, r24	; 0x01
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	41 f0       	breq	.+16     	; 0x332 <i2c_start+0x86>
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	80 34       	cpi	r24, 0x40	; 64
 326:	29 f0       	breq	.+10     	; 0x332 <i2c_start+0x86>
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	9c 83       	std	Y+4, r25	; 0x04
 32e:	8b 83       	std	Y+3, r24	; 0x03
 330:	02 c0       	rjmp	.+4      	; 0x336 <i2c_start+0x8a>

	return 0;
 332:	1c 82       	std	Y+4, r1	; 0x04
 334:	1b 82       	std	Y+3, r1	; 0x03
 336:	8b 81       	ldd	r24, Y+3	; 0x03
 338:	9c 81       	ldd	r25, Y+4	; 0x04
 33a:	24 96       	adiw	r28, 0x04	; 4
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	f8 94       	cli
 340:	de bf       	out	0x3e, r29	; 62
 342:	0f be       	out	0x3f, r0	; 63
 344:	cd bf       	out	0x3d, r28	; 61
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <i2c_start_wait>:

}/* i2c_start */


/*************************************************************************
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	22 97       	sbiw	r28, 0x02	; 2
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	de bf       	out	0x3e, r29	; 62
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	cd bf       	out	0x3d, r28	; 61
 360:	8a 83       	std	Y+2, r24	; 0x02
 362:	00 c0       	rjmp	.+0      	; 0x364 <i2c_start_wait+0x18>
    uint8_t   twst;


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 364:	e6 e5       	ldi	r30, 0x56	; 86
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	84 ea       	ldi	r24, 0xA4	; 164
 36a:	80 83       	st	Z, r24
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 36c:	e6 e5       	ldi	r30, 0x56	; 86
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	88 23       	and	r24, r24
 374:	dc f7       	brge	.-10     	; 0x36c <i2c_start_wait+0x20>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 376:	e1 e2       	ldi	r30, 0x21	; 33
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	90 81       	ld	r25, Z
 37c:	88 ef       	ldi	r24, 0xF8	; 248
 37e:	89 23       	and	r24, r25
 380:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	88 30       	cpi	r24, 0x08	; 8
 386:	19 f0       	breq	.+6      	; 0x38e <i2c_start_wait+0x42>
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	80 31       	cpi	r24, 0x10	; 16
 38c:	59 f7       	brne	.-42     	; 0x364 <i2c_start_wait+0x18>
    
    	// send device address
    	TWDR = address;
 38e:	e3 e2       	ldi	r30, 0x23	; 35
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	80 83       	st	Z, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
 396:	e6 e5       	ldi	r30, 0x56	; 86
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	84 e8       	ldi	r24, 0x84	; 132
 39c:	80 83       	st	Z, r24
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 39e:	e6 e5       	ldi	r30, 0x56	; 86
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	88 23       	and	r24, r24
 3a6:	dc f7       	brge	.-10     	; 0x39e <i2c_start_wait+0x52>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 3a8:	e1 e2       	ldi	r30, 0x21	; 33
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	90 81       	ld	r25, Z
 3ae:	88 ef       	ldi	r24, 0xF8	; 248
 3b0:	89 23       	and	r24, r25
 3b2:	89 83       	std	Y+1, r24	; 0x01
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	80 32       	cpi	r24, 0x20	; 32
 3b8:	19 f0       	breq	.+6      	; 0x3c0 <i2c_start_wait+0x74>
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	88 35       	cpi	r24, 0x58	; 88
 3be:	69 f4       	brne	.+26     	; 0x3da <i2c_start_wait+0x8e>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3c0:	e6 e5       	ldi	r30, 0x56	; 86
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	84 e9       	ldi	r24, 0x94	; 148
 3c6:	80 83       	st	Z, r24
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 3c8:	e6 e5       	ldi	r30, 0x56	; 86
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	99 27       	eor	r25, r25
 3d0:	80 71       	andi	r24, 0x10	; 16
 3d2:	90 70       	andi	r25, 0x00	; 0
 3d4:	00 97       	sbiw	r24, 0x00	; 0
 3d6:	c1 f7       	brne	.-16     	; 0x3c8 <i2c_start_wait+0x7c>
	        
    	    continue;
 3d8:	c5 cf       	rjmp	.-118    	; 0x364 <i2c_start_wait+0x18>
 3da:	22 96       	adiw	r28, 0x02	; 2
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <i2c_rep_start>:
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */


/*************************************************************************
 Issues a repeated start condition and sends address and transfer direction 

 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	21 97       	sbiw	r28, 0x01	; 1
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	89 83       	std	Y+1, r24	; 0x01
    return i2c_start( address );
 402:	89 81       	ldd	r24, Y+1	; 0x01
 404:	0e 94 56 01 	call	0x2ac	; 0x2ac <i2c_start>
 408:	99 27       	eor	r25, r25
 40a:	21 96       	adiw	r28, 0x01	; 1
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	f8 94       	cli
 410:	de bf       	out	0x3e, r29	; 62
 412:	0f be       	out	0x3f, r0	; 63
 414:	cd bf       	out	0x3d, r28	; 61
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	08 95       	ret

0000041c <i2c_stop>:

}/* i2c_rep_start */


/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 424:	e6 e5       	ldi	r30, 0x56	; 86
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	84 e9       	ldi	r24, 0x94	; 148
 42a:	80 83       	st	Z, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 42c:	e6 e5       	ldi	r30, 0x56	; 86
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	99 27       	eor	r25, r25
 434:	80 71       	andi	r24, 0x10	; 16
 436:	90 70       	andi	r25, 0x00	; 0
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	c1 f7       	brne	.-16     	; 0x42c <i2c_stop+0x10>
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <i2c_write>:

}/* i2c_stop */


/*************************************************************************
  Send one byte to I2C device
  
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	24 97       	sbiw	r28, 0x04	; 4
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 458:	e3 e2       	ldi	r30, 0x23	; 35
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 460:	e6 e5       	ldi	r30, 0x56	; 86
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	84 e8       	ldi	r24, 0x84	; 132
 466:	80 83       	st	Z, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 468:	e6 e5       	ldi	r30, 0x56	; 86
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	88 23       	and	r24, r24
 470:	dc f7       	brge	.-10     	; 0x468 <__stack+0x9>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 472:	e1 e2       	ldi	r30, 0x21	; 33
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	90 81       	ld	r25, Z
 478:	88 ef       	ldi	r24, 0xF8	; 248
 47a:	89 23       	and	r24, r25
 47c:	89 83       	std	Y+1, r24	; 0x01
	if( twst != TW_MT_DATA_ACK) return 1;
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	88 32       	cpi	r24, 0x28	; 40
 482:	29 f0       	breq	.+10     	; 0x48e <__stack+0x2f>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	9c 83       	std	Y+4, r25	; 0x04
 48a:	8b 83       	std	Y+3, r24	; 0x03
 48c:	02 c0       	rjmp	.+4      	; 0x492 <__stack+0x33>
	return 0;
 48e:	1c 82       	std	Y+4, r1	; 0x04
 490:	1b 82       	std	Y+3, r1	; 0x03
 492:	8b 81       	ldd	r24, Y+3	; 0x03
 494:	9c 81       	ldd	r25, Y+4	; 0x04
 496:	24 96       	adiw	r28, 0x04	; 4
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <i2c_readAck>:

}/* i2c_write */


/*************************************************************************
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 4b0:	e6 e5       	ldi	r30, 0x56	; 86
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	84 ec       	ldi	r24, 0xC4	; 196
 4b6:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));    
 4b8:	e6 e5       	ldi	r30, 0x56	; 86
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	80 81       	ld	r24, Z
 4be:	88 23       	and	r24, r24
 4c0:	dc f7       	brge	.-10     	; 0x4b8 <i2c_readAck+0x10>

    return TWDR;
 4c2:	e3 e2       	ldi	r30, 0x23	; 35
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	99 27       	eor	r25, r25
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	08 95       	ret

000004d0 <i2c_readNak>:

}/* i2c_readAck */


/*************************************************************************
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT) | (1<<TWEN);
 4d8:	e6 e5       	ldi	r30, 0x56	; 86
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	84 e8       	ldi	r24, 0x84	; 132
 4de:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 4e0:	e6 e5       	ldi	r30, 0x56	; 86
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	88 23       	and	r24, r24
 4e8:	dc f7       	brge	.-10     	; 0x4e0 <i2c_readNak+0x10>
	
    return TWDR;
 4ea:	e3 e2       	ldi	r30, 0x23	; 35
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	99 27       	eor	r25, r25
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <_exit>:
 4f8:	ff cf       	rjmp	.-2      	; 0x4f8 <_exit>
