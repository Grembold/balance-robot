
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000026c  2**0
                  ALLOC
  2 .stab         00000378  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000071  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000655  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000b0  00000000  00000000  00000695  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000021c  00000000  00000000  00000745  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011f  00000000  00000000  00000961  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000375  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00000df8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000012e  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008b  00000000  00000000  00000fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int ret;

 /* Main(), hier geht es los */
int main(void)
{
  92:	1f 93       	push	r17

    DDRB  = 0xff;                              // use all pins on port B for output 
  94:	1f ef       	ldi	r17, 0xFF	; 255
  96:	17 bb       	out	0x17, r17	; 23
    PORTB = 0x00;   
  98:	18 ba       	out	0x18, r1	; 24
    DDRA  = 0xFF;                              // use all pins on port A for output 
  9a:	1a bb       	out	0x1a, r17	; 26
    PORTA = 0x00;
  9c:	1b ba       	out	0x1b, r1	; 27
	
	i2c_init();                                // init I2C interface
  9e:	0e 94 7e 00 	call	0xfc	; 0xfc <i2c_init>
	ret = i2c_start(AD7414+I2C_WRITE);       // set device address and read mode
  a2:	80 e9       	ldi	r24, 0x90	; 144
  a4:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_start>
  a8:	28 2f       	mov	r18, r24
  aa:	33 27       	eor	r19, r19
  ac:	30 93 61 00 	sts	0x0061, r19
  b0:	20 93 60 00 	sts	0x0060, r18
	
	if ( ret ) {
  b4:	88 23       	and	r24, r24
  b6:	21 f0       	breq	.+8      	; 0xc0 <main+0x2e>
		/* failed to issue start condition, possibly no device found */
		i2c_stop();
  b8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2c_stop>
		PORTB=0xff;												// activate all 8 LED to show error */
  bc:	18 bb       	out	0x18, r17	; 24
  be:	1a c0       	rjmp	.+52     	; 0xf4 <main+0x62>
				//PORTA =  ret;                           
	}else {
		i2c_write(0x00);
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <i2c_write>
		i2c_rep_start(AD7414+I2C_READ); 
  c6:	81 e9       	ldi	r24, 0x91	; 145
  c8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <i2c_rep_start>
				ret = i2c_readAck();                       //  "    "    "    "     "    1
  cc:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <i2c_readAck>
  d0:	99 27       	eor	r25, r25
  d2:	90 93 61 00 	sts	0x0061, r25
  d6:	80 93 60 00 	sts	0x0060, r24
				PORTA =  ret;
  da:	8b bb       	out	0x1b, r24	; 27
		ret = i2c_readNak();                       //  "    "    "    "     "    2
  dc:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <i2c_readNak>
  e0:	99 27       	eor	r25, r25
  e2:	90 93 61 00 	sts	0x0061, r25
  e6:	80 93 60 00 	sts	0x0060, r24
		i2c_stop();                             // set stop condition = release bus    
  ea:	0e 94 d5 00 	call	0x1aa	; 0x1aa <i2c_stop>
		PORTB =  ret;                            // output byte on the LED's        
  ee:	80 91 60 00 	lds	r24, 0x0060
  f2:	88 bb       	out	0x18, r24	; 24
	}
	
}
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	1f 91       	pop	r17
  fa:	08 95       	ret

000000fc <i2c_init>:
/*************************************************************************
 Initialization of the I2C bus interface. Need to be called only once
*************************************************************************/
void i2c_init(void)
{
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	8a bb       	out	0x1a, r24	; 26
  /* initialize TWI clock: 10 kHz clock, TWPS = 0 => prescaler = 1 */
     DDRA  = 0xff;                              // use all pins on port B for output 
    PORTA = 0x00;
 100:	1b ba       	out	0x1b, r1	; 27
  TWSR = 0;                         /* no prescaler */
 102:	11 b8       	out	0x01, r1	; 1
  TWBR = (uint8_t)((F_CPU/SCL_CLOCK)-16)/8;  /* must be > 10 for stable operation */
 104:	88 e0       	ldi	r24, 0x08	; 8
 106:	80 b9       	out	0x00, r24	; 0
PORTA = 0x01;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	8b bb       	out	0x1b, r24	; 27
 10c:	08 95       	ret

0000010e <i2c_start>:
}/* i2c_init */


/*************************************************************************	
  Issues a start condition and sends address and transfer direction.
  return 0 = device accessible, 1= failed to access device
*************************************************************************/
unsigned char i2c_start(unsigned char address)
{
 10e:	98 2f       	mov	r25, r24
    uint8_t   twst;
PORTA = 0x02;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	8b bb       	out	0x1b, r24	; 27
	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 114:	84 ea       	ldi	r24, 0xA4	; 164
 116:	86 bf       	out	0x36, r24	; 54
PORTA = 0x04;
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	8b bb       	out	0x1b, r24	; 27
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 11c:	06 b6       	in	r0, 0x36	; 54
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <i2c_start+0xe>
PORTA = 0x04;
 122:	84 e0       	ldi	r24, 0x04	; 4
 124:	8b bb       	out	0x1b, r24	; 27
	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 126:	81 b1       	in	r24, 0x01	; 1
 128:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	11 f0       	breq	.+4      	; 0x132 <i2c_start+0x24>
 12e:	80 31       	cpi	r24, 0x10	; 16
 130:	b9 f4       	brne	.+46     	; 0x160 <i2c_start+0x52>
PORTA = 0x10;
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	8b bb       	out	0x1b, r24	; 27
	// send device address
	TWDR = address;
 136:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);
 138:	84 e8       	ldi	r24, 0x84	; 132
 13a:	86 bf       	out	0x36, r24	; 54
PORTA = 0x20;
 13c:	80 e2       	ldi	r24, 0x20	; 32
 13e:	8b bb       	out	0x1b, r24	; 27
	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 140:	06 b6       	in	r0, 0x36	; 54
 142:	07 fe       	sbrs	r0, 7
 144:	fd cf       	rjmp	.-6      	; 0x140 <i2c_start+0x32>
PORTA = 0x40;
 146:	80 e4       	ldi	r24, 0x40	; 64
 148:	8b bb       	out	0x1b, r24	; 27
	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 14a:	81 b1       	in	r24, 0x01	; 1
 14c:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
 14e:	88 31       	cpi	r24, 0x18	; 24
 150:	11 f0       	breq	.+4      	; 0x156 <i2c_start+0x48>
 152:	80 34       	cpi	r24, 0x40	; 64
 154:	29 f4       	brne	.+10     	; 0x160 <i2c_start+0x52>
PORTA = 0x80;
 156:	80 e8       	ldi	r24, 0x80	; 128
 158:	8b bb       	out	0x1b, r24	; 27
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret
	return 0;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0

}/* i2c_start */
 164:	08 95       	ret

00000166 <i2c_start_wait>:


/*************************************************************************
 Issues a start condition and sends address and transfer direction.
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
 166:	44 ea       	ldi	r20, 0xA4	; 164
 168:	34 e8       	ldi	r19, 0x84	; 132
 16a:	24 e9       	ldi	r18, 0x94	; 148
    uint8_t   twst;


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 16c:	46 bf       	out	0x36, r20	; 54
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 16e:	06 b6       	in	r0, 0x36	; 54
 170:	07 fe       	sbrs	r0, 7
 172:	fd cf       	rjmp	.-6      	; 0x16e <i2c_start_wait+0x8>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 174:	91 b1       	in	r25, 0x01	; 1
 176:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
 178:	98 30       	cpi	r25, 0x08	; 8
 17a:	11 f0       	breq	.+4      	; 0x180 <i2c_start_wait+0x1a>
 17c:	90 31       	cpi	r25, 0x10	; 16
 17e:	b1 f7       	brne	.-20     	; 0x16c <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
 180:	83 b9       	out	0x03, r24	; 3
    	TWCR = (1<<TWINT) | (1<<TWEN);
 182:	36 bf       	out	0x36, r19	; 54
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 184:	06 b6       	in	r0, 0x36	; 54
 186:	07 fe       	sbrs	r0, 7
 188:	fd cf       	rjmp	.-6      	; 0x184 <i2c_start_wait+0x1e>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 18a:	91 b1       	in	r25, 0x01	; 1
 18c:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
 18e:	90 32       	cpi	r25, 0x20	; 32
 190:	11 f0       	breq	.+4      	; 0x196 <i2c_start_wait+0x30>
 192:	98 35       	cpi	r25, 0x58	; 88
 194:	29 f4       	brne	.+10     	; 0x1a0 <i2c_start_wait+0x3a>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 196:	26 bf       	out	0x36, r18	; 54
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 198:	06 b6       	in	r0, 0x36	; 54
 19a:	04 fe       	sbrs	r0, 4
 19c:	e7 cf       	rjmp	.-50     	; 0x16c <i2c_start_wait+0x6>
 19e:	fc cf       	rjmp	.-8      	; 0x198 <i2c_start_wait+0x32>
 1a0:	08 95       	ret

000001a2 <i2c_rep_start>:
	        
    	    continue;
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */


/*************************************************************************
 Issues a repeated start condition and sends address and transfer direction 

 Input:   address and transfer direction of I2C device
 
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
 1a2:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_start>
    return i2c_start( address );

}/* i2c_rep_start */
 1a6:	99 27       	eor	r25, r25
 1a8:	08 95       	ret

000001aa <i2c_stop>:


/*************************************************************************
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
 1aa:	84 e9       	ldi	r24, 0x94	; 148
 1ac:	86 bf       	out	0x36, r24	; 54
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 1ae:	06 b6       	in	r0, 0x36	; 54
 1b0:	04 fc       	sbrc	r0, 4
 1b2:	fd cf       	rjmp	.-6      	; 0x1ae <i2c_stop+0x4>
 1b4:	08 95       	ret

000001b6 <i2c_write>:

}/* i2c_stop */


/*************************************************************************
  Send one byte to I2C device
  
  Input:    byte to be transfered
  Return:   0 write successful 
            1 write failed
*************************************************************************/
unsigned char i2c_write( unsigned char data )
{	
 1b6:	83 b9       	out	0x03, r24	; 3
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
	TWCR = (1<<TWINT) | (1<<TWEN);
 1b8:	84 e8       	ldi	r24, 0x84	; 132
 1ba:	86 bf       	out	0x36, r24	; 54

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 1bc:	06 b6       	in	r0, 0x36	; 54
 1be:	07 fe       	sbrs	r0, 7
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <i2c_write+0x6>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 1c2:	81 b1       	in	r24, 0x01	; 1
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	88 7f       	andi	r24, 0xF8	; 248
 1ca:	88 32       	cpi	r24, 0x28	; 40
 1cc:	11 f0       	breq	.+4      	; 0x1d2 <i2c_write+0x1c>
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 1d2:	c9 01       	movw	r24, r18
 1d4:	08 95       	ret

000001d6 <i2c_readAck>:


/*************************************************************************
 Read one byte from the I2C device, request more data from device 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
 1d6:	84 ec       	ldi	r24, 0xC4	; 196
 1d8:	86 bf       	out	0x36, r24	; 54
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    
 1da:	06 b6       	in	r0, 0x36	; 54
 1dc:	07 fe       	sbrs	r0, 7
 1de:	fd cf       	rjmp	.-6      	; 0x1da <i2c_readAck+0x4>

    return TWDR;
 1e0:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readAck */
 1e2:	99 27       	eor	r25, r25
 1e4:	08 95       	ret

000001e6 <i2c_readNak>:


/*************************************************************************
 Read one byte from the I2C device, read is followed by a stop condition 
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
 1e6:	84 e8       	ldi	r24, 0x84	; 132
 1e8:	86 bf       	out	0x36, r24	; 54
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
 1ea:	06 b6       	in	r0, 0x36	; 54
 1ec:	07 fe       	sbrs	r0, 7
 1ee:	fd cf       	rjmp	.-6      	; 0x1ea <i2c_readNak+0x4>
	
    return TWDR;
 1f0:	83 b1       	in	r24, 0x03	; 3

}/* i2c_readNak */
 1f2:	99 27       	eor	r25, r25
 1f4:	08 95       	ret

000001f6 <_exit>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <_exit>
