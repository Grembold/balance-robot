
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c2  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000001c2  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000256  2**0
                  ALLOC
  3 .noinit       00000000  00800062  00800062  00000256  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000256  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000014  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000005e  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000001df  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000000b2  00000000  00000000  00000899  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000114  00000000  00000000  0000094b  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54 <__ctors_end>
   4:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   8:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
   c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  10:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  14:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  18:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  1c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  20:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  24:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  28:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  2c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  30:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  34:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  38:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  3c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  40:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc <__vector_17>
  48:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>
  50:	0c 94 45 00 	jmp	0x8a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0c 94 47 00 	jmp	0x8e <main>

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0 <__vectors>

0000008e <main>:
/****************
*     main      *
****************/
int main(void)
{
  8e:	cf e5       	ldi	r28, 0x5F	; 95
  90:	d4 e0       	ldi	r29, 0x04	; 4
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
	init_twi_slave(SLAVE_ADD);
  96:	87 e4       	ldi	r24, 0x47	; 71
  98:	0e 94 50 00 	call	0xa0 <init_twi_slave>
	sei();
  9c:	78 94       	sei
	while(1);
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0x10>

000000a0 <init_twi_slave>:
}


/****************************************************************************/
/*!
*  \brief
*  Initaliserung des TWI-Inteface. Muss zu Beginn aufgerufen werden, sowie bei
*	 einem Wechsel der Slave Adresse 
*	\param adr gewünschte Slave-Adresse
*  
*****************************************************************************/
void init_twi_slave (uint8_t adr)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	21 97       	sbiw	r28, 0x01	; 1
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	89 83       	std	Y+1, r24	; 0x01
	TWAR= adr; 																		// Adresse setzen
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	80 93 22 00 	sts	0x0022, r24
	TWCR &= ~(1<<TWSTA)|(1<<TWSTO);							// START und STOP deaktivieren
  bc:	80 91 56 00 	lds	r24, 0x0056
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	80 93 56 00 	sts	0x0056, r24
	TWCR|= (1<<TWEA) | (1<<TWEN) | (1<<TWIE);		// aktivieren von: Acknowledge, Interrupt und TWI 
  c6:	80 91 56 00 	lds	r24, 0x0056
  ca:	85 64       	ori	r24, 0x45	; 69
  cc:	80 93 56 00 	sts	0x0056, r24
	register_adr=0x00;														// registeradresse zurücksetzen
  d0:	10 92 61 00 	sts	0x0061, r1
	twi_status.bFirstAccess = 1;									// erster zugriff nach stop
  d4:	80 91 60 00 	lds	r24, 0x0060
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	80 93 60 00 	sts	0x0060, r24
	
	DDRB = 0xff;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	80 93 37 00 	sts	0x0037, r24
	PORTB = 0b00110011;
  e4:	83 e3       	ldi	r24, 0x33	; 51
  e6:	80 93 38 00 	sts	0x0038, r24
  ea:	21 96       	adiw	r28, 0x01	; 1
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <__vector_17>:
}


/****************************************************************************/
/*!
*  \brief
*  Interrupt wird ausgelöst ein Ereigniss auf dem Bus ausgelöst wird.
*  Im Register TWSR befindet sich dann ein Statuscode, anhand dessen die 
*  Situation festgestellt werden kann.
*****************************************************************************/
ISR(TWI_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	8f 93       	push	r24
 108:	9f 93       	push	r25
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	23 97       	sbiw	r28, 0x03	; 3
 114:	de bf       	out	0x3e, r29	; 62
 116:	cd bf       	out	0x3d, r28	; 61
	uint8_t data = 0;
 118:	19 82       	std	Y+1, r1	; 0x01
	
	switch (TW_STATUS) 			// TWI-Statusregister prüfen und nötige Aktion bestimmen 
 11a:	80 91 21 00 	lds	r24, 0x0021
 11e:	99 27       	eor	r25, r25
 120:	88 7f       	andi	r24, 0xF8	; 248
 122:	90 70       	andi	r25, 0x00	; 0
 124:	9b 83       	std	Y+3, r25	; 0x03
 126:	8a 83       	std	Y+2, r24	; 0x02
 128:	8a 81       	ldd	r24, Y+2	; 0x02
 12a:	9b 81       	ldd	r25, Y+3	; 0x03
 12c:	80 38       	cpi	r24, 0x80	; 128
 12e:	91 05       	cpc	r25, r1
 130:	d1 f0       	breq	.+52     	; 0x166 <__vector_17+0x6a>
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	9b 81       	ldd	r25, Y+3	; 0x03
 136:	81 38       	cpi	r24, 0x81	; 129
 138:	91 05       	cpc	r25, r1
 13a:	34 f4       	brge	.+12     	; 0x148 <__vector_17+0x4c>
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	9b 81       	ldd	r25, Y+3	; 0x03
 140:	80 36       	cpi	r24, 0x60	; 96
 142:	91 05       	cpc	r25, r1
 144:	61 f0       	breq	.+24     	; 0x15e <__vector_17+0x62>
 146:	28 c0       	rjmp	.+80     	; 0x198 <__vector_17+0x9c>
 148:	8a 81       	ldd	r24, Y+2	; 0x02
 14a:	9b 81       	ldd	r25, Y+3	; 0x03
 14c:	88 3a       	cpi	r24, 0xA8	; 168
 14e:	91 05       	cpc	r25, r1
 150:	59 f1       	breq	.+86     	; 0x1a8 <__vector_17+0xac>
 152:	8a 81       	ldd	r24, Y+2	; 0x02
 154:	9b 81       	ldd	r25, Y+3	; 0x03
 156:	88 3b       	cpi	r24, 0xB8	; 184
 158:	91 05       	cpc	r25, r1
 15a:	31 f1       	breq	.+76     	; 0x1a8 <__vector_17+0xac>
 15c:	1d c0       	rjmp	.+58     	; 0x198 <__vector_17+0x9c>
	{	
		case TW_SR_SLA_ACK: 		// 0x60 Slave Receiver, wurde adressiert	
			TWCR_ACK; 						// nächstes Datenbyte empfangen, ACK danach
 15e:	85 ec       	ldi	r24, 0xC5	; 197
 160:	80 93 56 00 	sts	0x0056, r24
			break;
 164:	21 c0       	rjmp	.+66     	; 0x1a8 <__vector_17+0xac>
		case TW_SR_DATA_ACK: 		// 0x80 Slave Receiver,Daten empfangen
			data=TWDR; 						// Empfangene Daten auslesen
 166:	80 91 23 00 	lds	r24, 0x0023
 16a:	89 83       	std	Y+1, r24	; 0x01
			if (twi_status.bFirstAccess)	// erster Zugriff, Registeradresse setzen
 16c:	80 91 60 00 	lds	r24, 0x0060
 170:	99 27       	eor	r25, r25
 172:	81 70       	andi	r24, 0x01	; 1
 174:	90 70       	andi	r25, 0x00	; 0
 176:	00 97       	sbiw	r24, 0x00	; 0
 178:	b9 f0       	breq	.+46     	; 0x1a8 <__vector_17+0xac>
			{
				twi_status.bFirstAccess = 0;	// zweiter zugriff nach stop
 17a:	80 91 60 00 	lds	r24, 0x0060
 17e:	8e 7f       	andi	r24, 0xFE	; 254
 180:	80 93 60 00 	sts	0x0060, r24
				register_adr = data; // Registeradresse setzen
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	80 93 61 00 	sts	0x0061, r24
				PORTB = data;					
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	80 93 38 00 	sts	0x0038, r24
				TWCR_ACK;
 190:	85 ec       	ldi	r24, 0xC5	; 197
 192:	80 93 56 00 	sts	0x0056, r24
 196:	08 c0       	rjmp	.+16     	; 0x1a8 <__vector_17+0xac>
			}
			else	// weiterer Zugriff, Daten empfangen
			{
			}
			break;
		case TW_ST_SLA_ACK: 		// ?!?
		case TW_ST_DATA_ACK: 		// 0xB8 Slave Transmitter, weitere Daten wurden angefordert
			break;
		case TW_ST_DATA_NACK:		// 0xC0 Keine Daten mehr gefordert 
		case TW_SR_DATA_NACK:		// 0x88 
		case TW_ST_LAST_DATA:		// 0xC8  Last data byte in TWDR has been transmitted (TWEA = 0); ACK has been received
		case TW_SR_STOP: 				// 0xA0 STOP empfangen
		default:								// alle anderen codes
				twi_status.bFirstAccess = 1;
 198:	80 91 60 00 	lds	r24, 0x0060
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	80 93 60 00 	sts	0x0060, r24
				TWCR_RESET; 				// Übertragung beenden, warten bis zur nächsten Adressierung
 1a2:	85 ec       	ldi	r24, 0xC5	; 197
 1a4:	80 93 56 00 	sts	0x0056, r24
 1a8:	23 96       	adiw	r28, 0x03	; 3
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti
