
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000e24  00000eb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800086  00800086  00000ede  2**0
                  ALLOC
  3 .stab         00000378  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000017a  00000000  00000000  00001349  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017e9  00000000  00000000  000014c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000518  00000000  00000000  00002cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001131  00000000  00000000  000031c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000170  00000000  00000000  000042f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000027b  00000000  00000000  00004468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007dd  00000000  00000000  000046e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000450  00000000  00000000  00004ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 39       	cpi	r26, 0x98	; 152
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  8a:	0c 94 11 07 	jmp	0xe22	; 0xe22 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <rfm12_wrt_cmd>:
}


uint16_t	rfm12_wrt_cmd(uint16_t data)
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	8c 01       	movw	r16, r24
	uint8_t	retL = 0;
	uint8_t retH = 0;
	CS_LOW;
  9c:	c4 98       	cbi	0x18, 4	; 24
		retH = spi_putc( ((uint8_t)(data>>8)));
  9e:	89 2f       	mov	r24, r25
  a0:	99 27       	eor	r25, r25
  a2:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
  a6:	e8 2e       	mov	r14, r24
		retL = spi_putc((uint8_t) data);
  a8:	80 2f       	mov	r24, r16
  aa:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
	CS_HIGH;
  ae:	c4 9a       	sbi	0x18, 4	; 24
  b0:	ff 24       	eor	r15, r15
  b2:	fe 2c       	mov	r15, r14
  b4:	ee 24       	eor	r14, r14
	
	return ((uint16_t) (retH<<8)) + retL;
}
  b6:	e8 0e       	add	r14, r24
  b8:	f1 1c       	adc	r15, r1
  ba:	c7 01       	movw	r24, r14
  bc:	1f 91       	pop	r17
  be:	0f 91       	pop	r16
  c0:	ff 90       	pop	r15
  c2:	ef 90       	pop	r14
  c4:	08 95       	ret

000000c6 <rfm12_readStatus>:
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	c4 98       	cbi	0x18, 4	; 24
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
  d2:	08 2f       	mov	r16, r24
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
  da:	c4 9a       	sbi	0x18, 4	; 24
  dc:	11 27       	eor	r17, r17
  de:	10 2f       	mov	r17, r16
  e0:	00 27       	eor	r16, r16
  e2:	08 0f       	add	r16, r24
  e4:	11 1d       	adc	r17, r1
  e6:	c8 01       	movw	r24, r16
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	08 95       	ret

000000ee <rfm12_ready>:


/****************************************************************************/
/*!
*	\brief 
*
*****************************************************************************/
void rfm12_ready(void)
{	
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
	uint16_t timeout = 60000;
	
	CS_LOW;
  f4:	c4 98       	cbi	0x18, 4	; 24
	asm("nop");
  f6:	00 00       	nop
  f8:	54 e2       	ldi	r21, 0x24	; 36
  fa:	f5 2e       	mov	r15, r21
  fc:	03 c0       	rjmp	.+6      	; 0x104 <rfm12_ready+0x16>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  fe:	8f 2d       	mov	r24, r15
 100:	8a 95       	dec	r24
 102:	f1 f7       	brne	.-4      	; 0x100 <rfm12_ready+0x12>
 104:	c4 98       	cbi	0x18, 4	; 24
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 10c:	08 2f       	mov	r16, r24
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 114:	c4 9a       	sbi	0x18, 4	; 24
	while ((rfm12_readStatus() < 0x8000))// && timeout) // wait until FIFO ready
 116:	11 27       	eor	r17, r17
 118:	10 2f       	mov	r17, r16
 11a:	00 27       	eor	r16, r16
 11c:	08 0f       	add	r16, r24
 11e:	11 1d       	adc	r17, r1
 120:	17 ff       	sbrs	r17, 7
 122:	ed cf       	rjmp	.-38     	; 0xfe <rfm12_ready+0x10>
	{
		//timeout--;
		_delay_us(10);	
	}
	
	CS_HIGH;
 124:	c4 9a       	sbi	0x18, 4	; 24
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	ff 90       	pop	r15
 12c:	08 95       	ret

0000012e <rfm12_rxdata>:
}

/****************************************************************************/
/*!
*	\brief Sendet einen Block von Daten
*
*	\param[in]
*	buffer Zeigt auf das erste Byte des zu sendenden Blocks.
*
*	\param[in]
*	length Gibt die Länge des Blocks in Byte an.
*
*****************************************************************************/
void rfm12_txdata(char *buffer, uint8_t length)
{	
  unsigned char i;
	// ET: aktiviert power amplifierund und PLL, startet transmission wenn TX register aktiviert
	// ES: aktiviert den synthesizer
	// EX: aktiviert den crystal oscillator
	// EB: aktiviert Low battery detector
	rfm12_wrt_cmd(0x8238);		// !er, !ebb, ET, ES, EX, !eb, !ew, !DC	
	rfm12_ready();
	rfm12_wrt_cmd(0xB8AA);
	rfm12_ready();
	rfm12_wrt_cmd(0xB8AA);
	rfm12_ready();
	rfm12_wrt_cmd(0xB8AA);
	rfm12_ready();
	rfm12_wrt_cmd(0xB82D);
	rfm12_ready();
	rfm12_wrt_cmd(0xB8D4);
	for (i=0; i<length; i++)
	{		
		rfm12_ready();
		rfm12_wrt_cmd(0xB800|(*buffer++));
	}
	rfm12_ready();	
	rfm12_wrt_cmd(0xB800);			// dummy data
	rfm12_ready();
	rfm12_wrt_cmd(0xB800);			// dummy dat
	rfm12_ready();
	rfm12_wrt_cmd(0x8208);			// TX off
}


/****************************************************************************/
/*!
*	\brief Empfängt eine Block von Daten
*
* \param[out]
*	buffer Zeiger in den die Daten gespeichert werden
*
* \param[in]
* length Gibt die Länge des Buffers in Byte an
*
*****************************************************************************/
void rfm12_rxdata(char *buffer, unsigned char length)
{	
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	ec 01       	movw	r28, r24
 13e:	d6 2e       	mov	r13, r22
	// ET: aktiviert power amplifierund und PLL, startet transmission wenn TX register aktiviert
	// ES: aktiviert den synthesizer
	// EX: aktiviert den crystal oscillator
	// EB: aktiviert Low battery detector
	//rfm12_wrt_cmd(0x82D9);			//  ER, EBB, !et, ES, EX, !eb, !ew, DC
	unsigned char i;
	//rfm12_wrt_cmd(0x82C8);			// RX on
	//rfm12_wrt_cmd(0xCA81);			// set FIFO mode
	//rfm12_wrt_cmd(0xCA83);			// enable FIFO
	for (i=0; i<length; i++)
 140:	66 23       	and	r22, r22
 142:	41 f1       	breq	.+80     	; 0x194 <rfm12_rxdata+0x66>
 144:	ee 24       	eor	r14, r14
 146:	c4 98       	cbi	0x18, 4	; 24
 148:	00 00       	nop
 14a:	74 e2       	ldi	r23, 0x24	; 36
 14c:	f7 2e       	mov	r15, r23
 14e:	03 c0       	rjmp	.+6      	; 0x156 <rfm12_rxdata+0x28>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 150:	8f 2d       	mov	r24, r15
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <rfm12_rxdata+0x24>
 156:	c4 98       	cbi	0x18, 4	; 24
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 15e:	08 2f       	mov	r16, r24
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 166:	c4 9a       	sbi	0x18, 4	; 24
 168:	11 27       	eor	r17, r17
 16a:	10 2f       	mov	r17, r16
 16c:	00 27       	eor	r16, r16
 16e:	08 0f       	add	r16, r24
 170:	11 1d       	adc	r17, r1
 172:	17 ff       	sbrs	r17, 7
 174:	ed cf       	rjmp	.-38     	; 0x150 <rfm12_rxdata+0x22>
 176:	c4 9a       	sbi	0x18, 4	; 24
 178:	c4 98       	cbi	0x18, 4	; 24
 17a:	80 eb       	ldi	r24, 0xB0	; 176
 17c:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 186:	c4 9a       	sbi	0x18, 4	; 24
	{	
		rfm12_ready();
		*buffer++=rfm12_wrt_cmd(0xB000);
 188:	88 83       	st	Y, r24
 18a:	e3 94       	inc	r14
 18c:	de 14       	cp	r13, r14
 18e:	11 f0       	breq	.+4      	; 0x194 <rfm12_rxdata+0x66>
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	d9 cf       	rjmp	.-78     	; 0x146 <rfm12_rxdata+0x18>
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	08 95       	ret

000001a4 <rfm12_txdata>:
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	ec 01       	movw	r28, r24
 1b4:	d6 2e       	mov	r13, r22
 1b6:	c4 98       	cbi	0x18, 4	; 24
 1b8:	82 e8       	ldi	r24, 0x82	; 130
 1ba:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 1be:	88 e3       	ldi	r24, 0x38	; 56
 1c0:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 1c4:	c4 9a       	sbi	0x18, 4	; 24
 1c6:	c4 98       	cbi	0x18, 4	; 24
 1c8:	00 00       	nop
 1ca:	24 e2       	ldi	r18, 0x24	; 36
 1cc:	f2 2e       	mov	r15, r18
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <rfm12_txdata+0x32>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1d0:	8f 2d       	mov	r24, r15
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <rfm12_txdata+0x2e>
 1d6:	c4 98       	cbi	0x18, 4	; 24
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 1de:	08 2f       	mov	r16, r24
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 1e6:	c4 9a       	sbi	0x18, 4	; 24
 1e8:	11 27       	eor	r17, r17
 1ea:	10 2f       	mov	r17, r16
 1ec:	00 27       	eor	r16, r16
 1ee:	08 0f       	add	r16, r24
 1f0:	11 1d       	adc	r17, r1
 1f2:	17 ff       	sbrs	r17, 7
 1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <rfm12_txdata+0x2c>
 1f6:	c4 9a       	sbi	0x18, 4	; 24
 1f8:	c4 98       	cbi	0x18, 4	; 24
 1fa:	88 eb       	ldi	r24, 0xB8	; 184
 1fc:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 200:	8a ea       	ldi	r24, 0xAA	; 170
 202:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 206:	c4 9a       	sbi	0x18, 4	; 24
 208:	c4 98       	cbi	0x18, 4	; 24
 20a:	00 00       	nop
 20c:	14 e2       	ldi	r17, 0x24	; 36
 20e:	f1 2e       	mov	r15, r17
 210:	03 c0       	rjmp	.+6      	; 0x218 <rfm12_txdata+0x74>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 212:	8f 2d       	mov	r24, r15
 214:	8a 95       	dec	r24
 216:	f1 f7       	brne	.-4      	; 0x214 <rfm12_txdata+0x70>
 218:	c4 98       	cbi	0x18, 4	; 24
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 220:	08 2f       	mov	r16, r24
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 228:	c4 9a       	sbi	0x18, 4	; 24
 22a:	11 27       	eor	r17, r17
 22c:	10 2f       	mov	r17, r16
 22e:	00 27       	eor	r16, r16
 230:	08 0f       	add	r16, r24
 232:	11 1d       	adc	r17, r1
 234:	17 ff       	sbrs	r17, 7
 236:	ed cf       	rjmp	.-38     	; 0x212 <rfm12_txdata+0x6e>
 238:	c4 9a       	sbi	0x18, 4	; 24
 23a:	c4 98       	cbi	0x18, 4	; 24
 23c:	88 eb       	ldi	r24, 0xB8	; 184
 23e:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 242:	8a ea       	ldi	r24, 0xAA	; 170
 244:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 248:	c4 9a       	sbi	0x18, 4	; 24
 24a:	c4 98       	cbi	0x18, 4	; 24
 24c:	00 00       	nop
 24e:	a4 e2       	ldi	r26, 0x24	; 36
 250:	fa 2e       	mov	r15, r26
 252:	03 c0       	rjmp	.+6      	; 0x25a <rfm12_txdata+0xb6>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 254:	8f 2d       	mov	r24, r15
 256:	8a 95       	dec	r24
 258:	f1 f7       	brne	.-4      	; 0x256 <rfm12_txdata+0xb2>
 25a:	c4 98       	cbi	0x18, 4	; 24
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 262:	08 2f       	mov	r16, r24
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 26a:	c4 9a       	sbi	0x18, 4	; 24
 26c:	11 27       	eor	r17, r17
 26e:	10 2f       	mov	r17, r16
 270:	00 27       	eor	r16, r16
 272:	08 0f       	add	r16, r24
 274:	11 1d       	adc	r17, r1
 276:	17 ff       	sbrs	r17, 7
 278:	ed cf       	rjmp	.-38     	; 0x254 <rfm12_txdata+0xb0>
 27a:	c4 9a       	sbi	0x18, 4	; 24
 27c:	c4 98       	cbi	0x18, 4	; 24
 27e:	88 eb       	ldi	r24, 0xB8	; 184
 280:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 284:	8a ea       	ldi	r24, 0xAA	; 170
 286:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 28a:	c4 9a       	sbi	0x18, 4	; 24
 28c:	c4 98       	cbi	0x18, 4	; 24
 28e:	00 00       	nop
 290:	e4 e2       	ldi	r30, 0x24	; 36
 292:	fe 2e       	mov	r15, r30
 294:	03 c0       	rjmp	.+6      	; 0x29c <rfm12_txdata+0xf8>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 296:	8f 2d       	mov	r24, r15
 298:	8a 95       	dec	r24
 29a:	f1 f7       	brne	.-4      	; 0x298 <rfm12_txdata+0xf4>
 29c:	c4 98       	cbi	0x18, 4	; 24
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 2a4:	08 2f       	mov	r16, r24
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 2ac:	c4 9a       	sbi	0x18, 4	; 24
 2ae:	11 27       	eor	r17, r17
 2b0:	10 2f       	mov	r17, r16
 2b2:	00 27       	eor	r16, r16
 2b4:	08 0f       	add	r16, r24
 2b6:	11 1d       	adc	r17, r1
 2b8:	17 ff       	sbrs	r17, 7
 2ba:	ed cf       	rjmp	.-38     	; 0x296 <rfm12_txdata+0xf2>
 2bc:	c4 9a       	sbi	0x18, 4	; 24
 2be:	c4 98       	cbi	0x18, 4	; 24
 2c0:	88 eb       	ldi	r24, 0xB8	; 184
 2c2:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 2c6:	8d e2       	ldi	r24, 0x2D	; 45
 2c8:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 2cc:	c4 9a       	sbi	0x18, 4	; 24
 2ce:	c4 98       	cbi	0x18, 4	; 24
 2d0:	00 00       	nop
 2d2:	64 e2       	ldi	r22, 0x24	; 36
 2d4:	f6 2e       	mov	r15, r22
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <rfm12_txdata+0x13a>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 2d8:	8f 2d       	mov	r24, r15
 2da:	8a 95       	dec	r24
 2dc:	f1 f7       	brne	.-4      	; 0x2da <rfm12_txdata+0x136>
 2de:	c4 98       	cbi	0x18, 4	; 24
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 2e6:	08 2f       	mov	r16, r24
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 2ee:	c4 9a       	sbi	0x18, 4	; 24
 2f0:	11 27       	eor	r17, r17
 2f2:	10 2f       	mov	r17, r16
 2f4:	00 27       	eor	r16, r16
 2f6:	08 0f       	add	r16, r24
 2f8:	11 1d       	adc	r17, r1
 2fa:	17 ff       	sbrs	r17, 7
 2fc:	ed cf       	rjmp	.-38     	; 0x2d8 <rfm12_txdata+0x134>
 2fe:	c4 9a       	sbi	0x18, 4	; 24
 300:	c4 98       	cbi	0x18, 4	; 24
 302:	88 eb       	ldi	r24, 0xB8	; 184
 304:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 308:	84 ed       	ldi	r24, 0xD4	; 212
 30a:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 30e:	c4 9a       	sbi	0x18, 4	; 24
 310:	dd 20       	and	r13, r13
 312:	51 f1       	breq	.+84     	; 0x368 <rfm12_txdata+0x1c4>
 314:	ee 24       	eor	r14, r14
 316:	c4 98       	cbi	0x18, 4	; 24
 318:	00 00       	nop
 31a:	44 e2       	ldi	r20, 0x24	; 36
 31c:	f4 2e       	mov	r15, r20
 31e:	03 c0       	rjmp	.+6      	; 0x326 <rfm12_txdata+0x182>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 320:	8f 2d       	mov	r24, r15
 322:	8a 95       	dec	r24
 324:	f1 f7       	brne	.-4      	; 0x322 <rfm12_txdata+0x17e>
 326:	c4 98       	cbi	0x18, 4	; 24
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 32e:	08 2f       	mov	r16, r24
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 336:	c4 9a       	sbi	0x18, 4	; 24
 338:	11 27       	eor	r17, r17
 33a:	10 2f       	mov	r17, r16
 33c:	00 27       	eor	r16, r16
 33e:	08 0f       	add	r16, r24
 340:	11 1d       	adc	r17, r1
 342:	17 ff       	sbrs	r17, 7
 344:	ed cf       	rjmp	.-38     	; 0x320 <rfm12_txdata+0x17c>
 346:	c4 9a       	sbi	0x18, 4	; 24
 348:	08 81       	ld	r16, Y
 34a:	11 27       	eor	r17, r17
 34c:	c4 98       	cbi	0x18, 4	; 24
 34e:	18 6b       	ori	r17, 0xB8	; 184
 350:	88 eb       	ldi	r24, 0xB8	; 184
 352:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 356:	80 2f       	mov	r24, r16
 358:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 35c:	c4 9a       	sbi	0x18, 4	; 24
 35e:	e3 94       	inc	r14
 360:	de 14       	cp	r13, r14
 362:	11 f0       	breq	.+4      	; 0x368 <rfm12_txdata+0x1c4>
 364:	21 96       	adiw	r28, 0x01	; 1
 366:	d7 cf       	rjmp	.-82     	; 0x316 <rfm12_txdata+0x172>
 368:	c4 98       	cbi	0x18, 4	; 24
 36a:	00 00       	nop
 36c:	24 e2       	ldi	r18, 0x24	; 36
 36e:	f2 2e       	mov	r15, r18
 370:	03 c0       	rjmp	.+6      	; 0x378 <rfm12_txdata+0x1d4>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 372:	8f 2d       	mov	r24, r15
 374:	8a 95       	dec	r24
 376:	f1 f7       	brne	.-4      	; 0x374 <rfm12_txdata+0x1d0>
 378:	c4 98       	cbi	0x18, 4	; 24
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 380:	08 2f       	mov	r16, r24
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 388:	c4 9a       	sbi	0x18, 4	; 24
 38a:	11 27       	eor	r17, r17
 38c:	10 2f       	mov	r17, r16
 38e:	00 27       	eor	r16, r16
 390:	08 0f       	add	r16, r24
 392:	11 1d       	adc	r17, r1
 394:	17 ff       	sbrs	r17, 7
 396:	ed cf       	rjmp	.-38     	; 0x372 <rfm12_txdata+0x1ce>
 398:	c4 9a       	sbi	0x18, 4	; 24
 39a:	c4 98       	cbi	0x18, 4	; 24
 39c:	88 eb       	ldi	r24, 0xB8	; 184
 39e:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 3a8:	c4 9a       	sbi	0x18, 4	; 24
 3aa:	c4 98       	cbi	0x18, 4	; 24
 3ac:	00 00       	nop
 3ae:	b4 e2       	ldi	r27, 0x24	; 36
 3b0:	fb 2e       	mov	r15, r27
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <rfm12_txdata+0x216>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3b4:	8f 2d       	mov	r24, r15
 3b6:	8a 95       	dec	r24
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <rfm12_txdata+0x212>
 3ba:	c4 98       	cbi	0x18, 4	; 24
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 3c2:	08 2f       	mov	r16, r24
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 3ca:	c4 9a       	sbi	0x18, 4	; 24
 3cc:	11 27       	eor	r17, r17
 3ce:	10 2f       	mov	r17, r16
 3d0:	00 27       	eor	r16, r16
 3d2:	08 0f       	add	r16, r24
 3d4:	11 1d       	adc	r17, r1
 3d6:	17 ff       	sbrs	r17, 7
 3d8:	ed cf       	rjmp	.-38     	; 0x3b4 <rfm12_txdata+0x210>
 3da:	c4 9a       	sbi	0x18, 4	; 24
 3dc:	c4 98       	cbi	0x18, 4	; 24
 3de:	88 eb       	ldi	r24, 0xB8	; 184
 3e0:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 3ea:	c4 9a       	sbi	0x18, 4	; 24
 3ec:	c4 98       	cbi	0x18, 4	; 24
 3ee:	00 00       	nop
 3f0:	f4 e2       	ldi	r31, 0x24	; 36
 3f2:	ff 2e       	mov	r15, r31
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <rfm12_txdata+0x258>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 3f6:	8f 2d       	mov	r24, r15
 3f8:	8a 95       	dec	r24
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <rfm12_txdata+0x254>
 3fc:	c4 98       	cbi	0x18, 4	; 24
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 404:	08 2f       	mov	r16, r24
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 40c:	c4 9a       	sbi	0x18, 4	; 24
 40e:	11 27       	eor	r17, r17
 410:	10 2f       	mov	r17, r16
 412:	00 27       	eor	r16, r16
 414:	08 0f       	add	r16, r24
 416:	11 1d       	adc	r17, r1
 418:	17 ff       	sbrs	r17, 7
 41a:	ed cf       	rjmp	.-38     	; 0x3f6 <rfm12_txdata+0x252>
 41c:	c4 9a       	sbi	0x18, 4	; 24
 41e:	c4 98       	cbi	0x18, 4	; 24
 420:	82 e8       	ldi	r24, 0x82	; 130
 422:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 426:	88 e0       	ldi	r24, 0x08	; 8
 428:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 42c:	c4 9a       	sbi	0x18, 4	; 24
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	ff 90       	pop	r15
 438:	ef 90       	pop	r14
 43a:	df 90       	pop	r13
 43c:	08 95       	ret

0000043e <main>:
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
 452:	21 97       	sbiw	r28, 0x01	; 1
 454:	0f b6       	in	r0, 0x3f	; 63
 456:	f8 94       	cli
 458:	de bf       	out	0x3e, r29	; 62
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	cd bf       	out	0x3d, r28	; 61
 45e:	bb 9a       	sbi	0x17, 3	; 23
 460:	c3 98       	cbi	0x18, 3	; 24
 462:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <uart_init>
 466:	c4 9a       	sbi	0x18, 4	; 24
 468:	0e 94 39 04 	call	0x872	; 0x872 <spi_init>
 46c:	c4 98       	cbi	0x18, 4	; 24
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 474:	08 2f       	mov	r16, r24
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 47c:	c4 9a       	sbi	0x18, 4	; 24
 47e:	11 27       	eor	r17, r17
 480:	10 2f       	mov	r17, r16
 482:	00 27       	eor	r16, r16
 484:	08 0f       	add	r16, r24
 486:	11 1d       	adc	r17, r1
 488:	4f e0       	ldi	r20, 0x0F	; 15
 48a:	e4 2e       	mov	r14, r20
 48c:	f1 2c       	mov	r15, r1
 48e:	c8 01       	movw	r24, r16
 490:	0e 2c       	mov	r0, r14
 492:	02 c0       	rjmp	.+4      	; 0x498 <__stack+0x39>
 494:	96 95       	lsr	r25
 496:	87 95       	ror	r24
 498:	0a 94       	dec	r0
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__stack+0x35>
 49c:	81 70       	andi	r24, 0x01	; 1
 49e:	90 70       	andi	r25, 0x00	; 0
 4a0:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 4a4:	08 94       	sec
 4a6:	e1 08       	sbc	r14, r1
 4a8:	f1 08       	sbc	r15, r1
 4aa:	8f ef       	ldi	r24, 0xFF	; 255
 4ac:	e8 16       	cp	r14, r24
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	f8 06       	cpc	r15, r24
 4b2:	69 f7       	brne	.-38     	; 0x48e <__stack+0x2f>
 4b4:	80 e6       	ldi	r24, 0x60	; 96
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_puts>
 4bc:	c4 98       	cbi	0x18, 4	; 24
 4be:	80 e8       	ldi	r24, 0x80	; 128
 4c0:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 4c4:	87 ed       	ldi	r24, 0xD7	; 215
 4c6:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 4ca:	c4 9a       	sbi	0x18, 4	; 24
 4cc:	c4 98       	cbi	0x18, 4	; 24
 4ce:	86 ea       	ldi	r24, 0xA6	; 166
 4d0:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 4d4:	80 e2       	ldi	r24, 0x20	; 32
 4d6:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 4da:	c4 9a       	sbi	0x18, 4	; 24
 4dc:	c4 98       	cbi	0x18, 4	; 24
 4de:	86 ec       	ldi	r24, 0xC6	; 198
 4e0:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 4e4:	81 e2       	ldi	r24, 0x21	; 33
 4e6:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 4ea:	c4 9a       	sbi	0x18, 4	; 24
 4ec:	c4 98       	cbi	0x18, 4	; 24
 4ee:	84 e9       	ldi	r24, 0x94	; 148
 4f0:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 4f4:	8c e8       	ldi	r24, 0x8C	; 140
 4f6:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 4fa:	c4 9a       	sbi	0x18, 4	; 24
 4fc:	c4 98       	cbi	0x18, 4	; 24
 4fe:	82 ec       	ldi	r24, 0xC2	; 194
 500:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 504:	8b ea       	ldi	r24, 0xAB	; 171
 506:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 50a:	c4 9a       	sbi	0x18, 4	; 24
 50c:	c4 98       	cbi	0x18, 4	; 24
 50e:	8a ec       	ldi	r24, 0xCA	; 202
 510:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 514:	81 e8       	ldi	r24, 0x81	; 129
 516:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 51a:	c4 9a       	sbi	0x18, 4	; 24
 51c:	c4 98       	cbi	0x18, 4	; 24
 51e:	88 e9       	ldi	r24, 0x98	; 152
 520:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 524:	80 e3       	ldi	r24, 0x30	; 48
 526:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 52a:	c4 9a       	sbi	0x18, 4	; 24
 52c:	c4 98       	cbi	0x18, 4	; 24
 52e:	80 ec       	ldi	r24, 0xC0	; 192
 530:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 534:	8c ef       	ldi	r24, 0xFC	; 252
 536:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 53a:	c4 9a       	sbi	0x18, 4	; 24
 53c:	c4 98       	cbi	0x18, 4	; 24
 53e:	88 ec       	ldi	r24, 0xC8	; 200
 540:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 54a:	c4 9a       	sbi	0x18, 4	; 24
 54c:	c4 98       	cbi	0x18, 4	; 24
 54e:	84 ec       	ldi	r24, 0xC4	; 196
 550:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 554:	87 ef       	ldi	r24, 0xF7	; 247
 556:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 55a:	c4 9a       	sbi	0x18, 4	; 24
 55c:	c4 98       	cbi	0x18, 4	; 24
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 564:	08 2f       	mov	r16, r24
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 56c:	c4 9a       	sbi	0x18, 4	; 24
 56e:	11 27       	eor	r17, r17
 570:	10 2f       	mov	r17, r16
 572:	00 27       	eor	r16, r16
 574:	08 0f       	add	r16, r24
 576:	11 1d       	adc	r17, r1
 578:	2f e0       	ldi	r18, 0x0F	; 15
 57a:	e2 2e       	mov	r14, r18
 57c:	f1 2c       	mov	r15, r1
 57e:	c8 01       	movw	r24, r16
 580:	0e 2c       	mov	r0, r14
 582:	02 c0       	rjmp	.+4      	; 0x588 <__stack+0x129>
 584:	96 95       	lsr	r25
 586:	87 95       	ror	r24
 588:	0a 94       	dec	r0
 58a:	e2 f7       	brpl	.-8      	; 0x584 <__stack+0x125>
 58c:	81 70       	andi	r24, 0x01	; 1
 58e:	90 70       	andi	r25, 0x00	; 0
 590:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 594:	08 94       	sec
 596:	e1 08       	sbc	r14, r1
 598:	f1 08       	sbc	r15, r1
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	e8 16       	cp	r14, r24
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	f8 06       	cpc	r15, r24
 5a2:	69 f7       	brne	.-38     	; 0x57e <__stack+0x11f>
 5a4:	80 e6       	ldi	r24, 0x60	; 96
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_puts>
 5ac:	c4 98       	cbi	0x18, 4	; 24
 5ae:	88 eb       	ldi	r24, 0xB8	; 184
 5b0:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 5b4:	8a ea       	ldi	r24, 0xAA	; 170
 5b6:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 5ba:	c4 9a       	sbi	0x18, 4	; 24
 5bc:	c4 98       	cbi	0x18, 4	; 24
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 5c4:	08 2f       	mov	r16, r24
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 5cc:	c4 9a       	sbi	0x18, 4	; 24
 5ce:	11 27       	eor	r17, r17
 5d0:	10 2f       	mov	r17, r16
 5d2:	00 27       	eor	r16, r16
 5d4:	08 0f       	add	r16, r24
 5d6:	11 1d       	adc	r17, r1
 5d8:	8f e0       	ldi	r24, 0x0F	; 15
 5da:	e8 2e       	mov	r14, r24
 5dc:	f1 2c       	mov	r15, r1
 5de:	c8 01       	movw	r24, r16
 5e0:	0e 2c       	mov	r0, r14
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <__stack+0x189>
 5e4:	96 95       	lsr	r25
 5e6:	87 95       	ror	r24
 5e8:	0a 94       	dec	r0
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <__stack+0x185>
 5ec:	81 70       	andi	r24, 0x01	; 1
 5ee:	90 70       	andi	r25, 0x00	; 0
 5f0:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 5f4:	08 94       	sec
 5f6:	e1 08       	sbc	r14, r1
 5f8:	f1 08       	sbc	r15, r1
 5fa:	8f ef       	ldi	r24, 0xFF	; 255
 5fc:	e8 16       	cp	r14, r24
 5fe:	8f ef       	ldi	r24, 0xFF	; 255
 600:	f8 06       	cpc	r15, r24
 602:	69 f7       	brne	.-38     	; 0x5de <__stack+0x17f>
 604:	80 e6       	ldi	r24, 0x60	; 96
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_puts>
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	00 00       	nop
 612:	01 96       	adiw	r24, 0x01	; 1
 614:	89 3c       	cpi	r24, 0xC9	; 201
 616:	91 05       	cpc	r25, r1
 618:	d9 f7       	brne	.-10     	; 0x610 <__stack+0x1b1>
 61a:	c4 98       	cbi	0x18, 4	; 24
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 622:	08 2f       	mov	r16, r24
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 62a:	c4 9a       	sbi	0x18, 4	; 24
 62c:	11 27       	eor	r17, r17
 62e:	10 2f       	mov	r17, r16
 630:	00 27       	eor	r16, r16
 632:	08 0f       	add	r16, r24
 634:	11 1d       	adc	r17, r1
 636:	af e0       	ldi	r26, 0x0F	; 15
 638:	ea 2e       	mov	r14, r26
 63a:	f1 2c       	mov	r15, r1
 63c:	c8 01       	movw	r24, r16
 63e:	0e 2c       	mov	r0, r14
 640:	02 c0       	rjmp	.+4      	; 0x646 <__stack+0x1e7>
 642:	96 95       	lsr	r25
 644:	87 95       	ror	r24
 646:	0a 94       	dec	r0
 648:	e2 f7       	brpl	.-8      	; 0x642 <__stack+0x1e3>
 64a:	81 70       	andi	r24, 0x01	; 1
 64c:	90 70       	andi	r25, 0x00	; 0
 64e:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 652:	08 94       	sec
 654:	e1 08       	sbc	r14, r1
 656:	f1 08       	sbc	r15, r1
 658:	8f ef       	ldi	r24, 0xFF	; 255
 65a:	e8 16       	cp	r14, r24
 65c:	8f ef       	ldi	r24, 0xFF	; 255
 65e:	f8 06       	cpc	r15, r24
 660:	69 f7       	brne	.-38     	; 0x63c <__stack+0x1dd>
 662:	80 e6       	ldi	r24, 0x60	; 96
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_puts>
 66a:	c4 98       	cbi	0x18, 4	; 24
 66c:	88 eb       	ldi	r24, 0xB8	; 184
 66e:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 672:	8a ea       	ldi	r24, 0xAA	; 170
 674:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 678:	c4 9a       	sbi	0x18, 4	; 24
 67a:	c4 98       	cbi	0x18, 4	; 24
 67c:	88 eb       	ldi	r24, 0xB8	; 184
 67e:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 682:	8a ea       	ldi	r24, 0xAA	; 170
 684:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 688:	c4 9a       	sbi	0x18, 4	; 24
 68a:	c4 98       	cbi	0x18, 4	; 24
 68c:	82 e8       	ldi	r24, 0x82	; 130
 68e:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 692:	88 ec       	ldi	r24, 0xC8	; 200
 694:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 698:	c4 9a       	sbi	0x18, 4	; 24
 69a:	c4 98       	cbi	0x18, 4	; 24
 69c:	8a ec       	ldi	r24, 0xCA	; 202
 69e:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 6a2:	81 e8       	ldi	r24, 0x81	; 129
 6a4:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 6a8:	c4 9a       	sbi	0x18, 4	; 24
 6aa:	c4 98       	cbi	0x18, 4	; 24
 6ac:	8a ec       	ldi	r24, 0xCA	; 202
 6ae:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 6b2:	83 e8       	ldi	r24, 0x83	; 131
 6b4:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 6b8:	c4 9a       	sbi	0x18, 4	; 24
 6ba:	80 91 63 00 	lds	r24, 0x0063
 6be:	89 83       	std	Y+1, r24	; 0x01
 6c0:	6e 01       	movw	r12, r28
 6c2:	08 94       	sec
 6c4:	c1 1c       	adc	r12, r1
 6c6:	d1 1c       	adc	r13, r1
 6c8:	88 b3       	in	r24, 0x18	; 24
 6ca:	98 e0       	ldi	r25, 0x08	; 8
 6cc:	89 27       	eor	r24, r25
 6ce:	88 bb       	out	0x18, r24	; 24
 6d0:	c4 98       	cbi	0x18, 4	; 24
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 6d8:	08 2f       	mov	r16, r24
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 6e0:	c4 9a       	sbi	0x18, 4	; 24
 6e2:	11 27       	eor	r17, r17
 6e4:	10 2f       	mov	r17, r16
 6e6:	00 27       	eor	r16, r16
 6e8:	08 0f       	add	r16, r24
 6ea:	11 1d       	adc	r17, r1
 6ec:	c8 01       	movw	r24, r16
 6ee:	88 27       	eor	r24, r24
 6f0:	99 0f       	add	r25, r25
 6f2:	88 1f       	adc	r24, r24
 6f4:	99 27       	eor	r25, r25
 6f6:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 6fa:	c8 01       	movw	r24, r16
 6fc:	84 e0       	ldi	r24, 0x04	; 4
 6fe:	98 9f       	mul	r25, r24
 700:	81 2d       	mov	r24, r1
 702:	99 27       	eor	r25, r25
 704:	11 24       	eor	r1, r1
 706:	81 70       	andi	r24, 0x01	; 1
 708:	90 70       	andi	r25, 0x00	; 0
 70a:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 70e:	c8 01       	movw	r24, r16
 710:	89 2f       	mov	r24, r25
 712:	99 27       	eor	r25, r25
 714:	82 95       	swap	r24
 716:	86 95       	lsr	r24
 718:	87 70       	andi	r24, 0x07	; 7
 71a:	81 70       	andi	r24, 0x01	; 1
 71c:	90 70       	andi	r25, 0x00	; 0
 71e:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 722:	c8 01       	movw	r24, r16
 724:	89 2f       	mov	r24, r25
 726:	99 27       	eor	r25, r25
 728:	82 95       	swap	r24
 72a:	8f 70       	andi	r24, 0x0F	; 15
 72c:	81 70       	andi	r24, 0x01	; 1
 72e:	90 70       	andi	r25, 0x00	; 0
 730:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 734:	c8 01       	movw	r24, r16
 736:	89 2f       	mov	r24, r25
 738:	99 27       	eor	r25, r25
 73a:	86 95       	lsr	r24
 73c:	86 95       	lsr	r24
 73e:	86 95       	lsr	r24
 740:	81 70       	andi	r24, 0x01	; 1
 742:	90 70       	andi	r25, 0x00	; 0
 744:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 748:	c8 01       	movw	r24, r16
 74a:	89 2f       	mov	r24, r25
 74c:	99 27       	eor	r25, r25
 74e:	86 95       	lsr	r24
 750:	86 95       	lsr	r24
 752:	81 70       	andi	r24, 0x01	; 1
 754:	90 70       	andi	r25, 0x00	; 0
 756:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 75a:	c8 01       	movw	r24, r16
 75c:	89 2f       	mov	r24, r25
 75e:	99 27       	eor	r25, r25
 760:	86 95       	lsr	r24
 762:	81 70       	andi	r24, 0x01	; 1
 764:	90 70       	andi	r25, 0x00	; 0
 766:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 76a:	81 2f       	mov	r24, r17
 76c:	99 27       	eor	r25, r25
 76e:	81 70       	andi	r24, 0x01	; 1
 770:	90 70       	andi	r25, 0x00	; 0
 772:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 776:	c8 01       	movw	r24, r16
 778:	88 0f       	add	r24, r24
 77a:	89 2f       	mov	r24, r25
 77c:	88 1f       	adc	r24, r24
 77e:	99 0b       	sbc	r25, r25
 780:	91 95       	neg	r25
 782:	81 70       	andi	r24, 0x01	; 1
 784:	90 70       	andi	r25, 0x00	; 0
 786:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 78a:	c8 01       	movw	r24, r16
 78c:	00 24       	eor	r0, r0
 78e:	88 0f       	add	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	00 1c       	adc	r0, r0
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	00 1c       	adc	r0, r0
 79a:	89 2f       	mov	r24, r25
 79c:	90 2d       	mov	r25, r0
 79e:	81 70       	andi	r24, 0x01	; 1
 7a0:	90 70       	andi	r25, 0x00	; 0
 7a2:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 7a6:	c8 01       	movw	r24, r16
 7a8:	96 95       	lsr	r25
 7aa:	87 95       	ror	r24
 7ac:	92 95       	swap	r25
 7ae:	82 95       	swap	r24
 7b0:	8f 70       	andi	r24, 0x0F	; 15
 7b2:	89 27       	eor	r24, r25
 7b4:	9f 70       	andi	r25, 0x0F	; 15
 7b6:	89 27       	eor	r24, r25
 7b8:	81 70       	andi	r24, 0x01	; 1
 7ba:	90 70       	andi	r25, 0x00	; 0
 7bc:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 7c0:	c8 01       	movw	r24, r16
 7c2:	92 95       	swap	r25
 7c4:	82 95       	swap	r24
 7c6:	8f 70       	andi	r24, 0x0F	; 15
 7c8:	89 27       	eor	r24, r25
 7ca:	9f 70       	andi	r25, 0x0F	; 15
 7cc:	89 27       	eor	r24, r25
 7ce:	81 70       	andi	r24, 0x01	; 1
 7d0:	90 70       	andi	r25, 0x00	; 0
 7d2:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 7d6:	c8 01       	movw	r24, r16
 7d8:	96 95       	lsr	r25
 7da:	87 95       	ror	r24
 7dc:	96 95       	lsr	r25
 7de:	87 95       	ror	r24
 7e0:	96 95       	lsr	r25
 7e2:	87 95       	ror	r24
 7e4:	81 70       	andi	r24, 0x01	; 1
 7e6:	90 70       	andi	r25, 0x00	; 0
 7e8:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 7ec:	c8 01       	movw	r24, r16
 7ee:	96 95       	lsr	r25
 7f0:	87 95       	ror	r24
 7f2:	96 95       	lsr	r25
 7f4:	87 95       	ror	r24
 7f6:	81 70       	andi	r24, 0x01	; 1
 7f8:	90 70       	andi	r25, 0x00	; 0
 7fa:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 7fe:	c8 01       	movw	r24, r16
 800:	96 95       	lsr	r25
 802:	87 95       	ror	r24
 804:	81 70       	andi	r24, 0x01	; 1
 806:	90 70       	andi	r25, 0x00	; 0
 808:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 80c:	c8 01       	movw	r24, r16
 80e:	81 70       	andi	r24, 0x01	; 1
 810:	90 70       	andi	r25, 0x00	; 0
 812:	0e 94 b2 04 	call	0x964	; 0x964 <uart_puti>
 816:	80 e6       	ldi	r24, 0x60	; 96
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_puts>
 81e:	c4 98       	cbi	0x18, 4	; 24
 820:	00 00       	nop
 822:	44 e2       	ldi	r20, 0x24	; 36
 824:	f4 2e       	mov	r15, r20
 826:	03 c0       	rjmp	.+6      	; 0x82e <__stack+0x3cf>
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 828:	8f 2d       	mov	r24, r15
 82a:	8a 95       	dec	r24
 82c:	f1 f7       	brne	.-4      	; 0x82a <__stack+0x3cb>
 82e:	c4 98       	cbi	0x18, 4	; 24
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 836:	08 2f       	mov	r16, r24
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 83e:	c4 9a       	sbi	0x18, 4	; 24
 840:	11 27       	eor	r17, r17
 842:	10 2f       	mov	r17, r16
 844:	00 27       	eor	r16, r16
 846:	08 0f       	add	r16, r24
 848:	11 1d       	adc	r17, r1
 84a:	17 ff       	sbrs	r17, 7
 84c:	ed cf       	rjmp	.-38     	; 0x828 <__stack+0x3c9>
 84e:	c4 9a       	sbi	0x18, 4	; 24
 850:	c4 98       	cbi	0x18, 4	; 24
 852:	80 eb       	ldi	r24, 0xB0	; 176
 854:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	0e 94 46 04 	call	0x88c	; 0x88c <spi_putc>
 85e:	c4 9a       	sbi	0x18, 4	; 24
 860:	89 83       	std	Y+1, r24	; 0x01
 862:	c6 01       	movw	r24, r12
 864:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_puts>
 868:	80 e6       	ldi	r24, 0x60	; 96
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	0e 94 50 04 	call	0x8a0	; 0x8a0 <uart_puts>
 870:	2b cf       	rjmp	.-426    	; 0x6c8 <__stack+0x269>

00000872 <spi_init>:



void spi_init()
{
 872:	87 b3       	in	r24, 0x17	; 23
 874:	80 6a       	ori	r24, 0xA0	; 160
 876:	87 bb       	out	0x17, r24	; 23
	// Aktivieren der Pins für das SPI Interface
	DDR_SPI		|= (1<<SPI_SCLK)|(1<<SPI_MOSI);
	PORT_SPI 	&= ~((1<<SPI_SCLK)|(1<<SPI_MOSI)|(1<<SPI_MISO));
 878:	88 b3       	in	r24, 0x18	; 24
 87a:	8f 71       	andi	r24, 0x1F	; 31
 87c:	88 bb       	out	0x18, r24	; 24
	
	DDR_SPI_CS	|= (1<<SPI_CS);
 87e:	bc 9a       	sbi	0x17, 4	; 23
	PORT_SPI_CS &= ~(1<<SPI_CS);
 880:	c4 98       	cbi	0x18, 4	; 24
	
	// Aktivieren des SPI Master Interfases, fosc = fclk / 2;
	SPCR = (1<<SPE)|(1<<MSTR);
 882:	80 e5       	ldi	r24, 0x50	; 80
 884:	8d b9       	out	0x0d, r24	; 13
	SPSR = (1<<SPI2X);
 886:	81 e0       	ldi	r24, 0x01	; 1
 888:	8e b9       	out	0x0e, r24	; 14
 88a:	08 95       	ret

0000088c <spi_putc>:
	
}

uint8_t spi_putc( uint8_t data)
{
 88c:	8f b9       	out	0x0f, r24	; 15
	// Sendet ein Byte
	SPDR = data;
	
	// Wartet bis Byte gesendet wurde
	while( !( SPSR & (1<<SPIF)))
 88e:	77 9b       	sbis	0x0e, 7	; 14
 890:	fe cf       	rjmp	.-4      	; 0x88e <spi_putc+0x2>
		;
	
	return SPDR;
 892:	8f b1       	in	r24, 0x0f	; 15
}
 894:	99 27       	eor	r25, r25
 896:	08 95       	ret

00000898 <uart_putc>:
*  uart_putc ('o');
*  \endcode
*****************************************************************************/
void uart_putc(char c)
{
 898:	5d 9b       	sbis	0x0b, 5	; 11
 89a:	fe cf       	rjmp	.-4      	; 0x898 <uart_putc>
	/* warten bis der Sendepuffer leer ist */
	while ( !( UCSRA & (1<<UDRE)) );
	
	/* Zeichen senden */
	UDR = c;
 89c:	8c b9       	out	0x0c, r24	; 12
 89e:	08 95       	ret

000008a0 <uart_puts>:
}


/****************************************************************************/
/*!
*  \brief
*  Senden eines null-terminierten Strings
*  
*  \param[in]
*  s Pointer auf null-terminierten String
*
*  \return
*  nichts
*    
*  \par  Beispiel:
*  (Nur zur Demonstration der Parameter/Returnwerte)
*  \code
*  // Beispiel fuer uart_puts
*  uart_puts ("Hello World!\r\n");
*  \endcode
*****************************************************************************/
void uart_puts(char *s)
{
 8a0:	fc 01       	movw	r30, r24
	while(*s) // so lange senden, bis das ende des Strings erreicht ist
 8a2:	80 81       	ld	r24, Z
 8a4:	88 23       	and	r24, r24
 8a6:	39 f0       	breq	.+14     	; 0x8b6 <uart_puts+0x16>
	{
		uart_putc(*s++);
 8a8:	31 96       	adiw	r30, 0x01	; 1
 8aa:	5d 9b       	sbis	0x0b, 5	; 11
 8ac:	fe cf       	rjmp	.-4      	; 0x8aa <uart_puts+0xa>
 8ae:	8c b9       	out	0x0c, r24	; 12
 8b0:	80 81       	ld	r24, Z
 8b2:	88 23       	and	r24, r24
 8b4:	c9 f7       	brne	.-14     	; 0x8a8 <uart_puts+0x8>
 8b6:	08 95       	ret

000008b8 <__vector_11>:
	}
}

/****************************************************************************/
/*!
*  \brief
*  Senden eines null-terminierten Strings der im Flash-Speicher steht
*  
*  \param[in]
*  text Pointer auf Flashadresse
*
*    
*  \par  Beispiel:
*  (Nur zur Demonstration der Parameter/Returnwerte)
*  \code
*  // Beispiel fuer uart_puts
*  uart_puts_p(PSTR("Hallo Herr Mustermann!\r\n"));
*  \endcode
*****************************************************************************/
void uart_puts_p(const char *text)
{
    char Zeichen;
 
    while ((Zeichen = pgm_read_byte(text)))
    {   /* so lange, wie mittels pgm_read_byte ein Zeichen vom Flash gelesen
           werden konnte, welches nicht das "String-Endezeichen" darstellt */
 
        /* Das gelesene Zeichen über die normalen Kanäle verschicken */
        uart_putc(Zeichen);
        text++;
    }
}

/****************************************************************************/
/*!
*  \brief
*  Ausgabe eines Integer Wertes als String ueber die serielle Schnittstelle.
*
*  \param[in]
*  i Auszugebender Integer Wert (16Bit)
*  
*  \return
*  nichts
*
*  \par  Beispiel:
*  (Nur zur Demonstration der Parameter/Returnwerte)
*  \code
*  // Beispiel ausgabe eines Wertes
*  uart_puti( wert[0] );
*  uart_puts("\r\n");
*  \endcode
*****************************************************************************/
void uart_puti(uint16_t i)
{
	char s[7];	// "-12345"
	
	/* Wandeln eines Integers in einen String */
	itoa(i, s, 10);		
	/* String versenden */
	uart_puts(s);			
}

/**************************************************************************/
/*! 
* \brief gibt die aktuelle Systemzeit im Format Min:Sec:mSec
*		über die UART verbindung aus\n
*
***************************************************************************/
void uart_printtime(void)
{
	uint32_t ms;
	uint32_t s;
	uint32_t min;
	uint8_t std;
	
//	ms = Gettime();
	if(ms == 0)
		return;
		
	s = ms/1000;
	min = s / 60;
	std = min / 60;
	min = min - (std*60);
	s = s - ((min*60)+(std*60*60));
	ms = ms - ((s*1000)+(min*60*1000)+(std*60*60*1000));
	if(std<10)
		uart_putc('0');
	uart_puti(std);
	uart_putc(':');
	if(min<10)
		uart_putc('0');
	uart_puti(min);
	uart_putc(':');
	if(s<10)
		uart_putc('0');
	uart_puti(s);
	uart_putc(':');
//	if(ms<100)
//		uart_putc('0');
//	if(ms<10 && ms!=0)
//		uart_putc('0');
//	uart_puti(ms);
	uart_puti(ms/100);
}

/****************************************************************************/
/*!
*  \brief Einzelnes Zeichen empfangen
*
*  \return
*	empfangenes Zeichen, ist der Empfangspuffer leer liefert die Funktion -1 zurück
*
*****************************************************************************/
uint8_t uart_getc(uint8_t *date)
{
	uint8_t data;
	
	if (fifo_get(&infifo, &data)==0){
		*date = data;
		return 1;
	} else {
		return 0;
	}
}


/****************************************************************************/
/*!
*  \brief
*  Interrupt wird ausgelöst sobald neue Daten im USART-Empfangspuffer liegen.
*  
*  Der Interrupt sendet das empfangene Zeichen gleich wieder zurück.\n
*  Als \c echo Funktion zur Fehlersuche.\n
*  
*****************************************************************************/
ISR(USART_RXC_vect)
{
 8b8:	1f 92       	push	r1
 8ba:	0f 92       	push	r0
 8bc:	0f b6       	in	r0, 0x3f	; 63
 8be:	0f 92       	push	r0
 8c0:	11 24       	eor	r1, r1
 8c2:	1f 93       	push	r17
 8c4:	2f 93       	push	r18
 8c6:	3f 93       	push	r19
 8c8:	4f 93       	push	r20
 8ca:	5f 93       	push	r21
 8cc:	6f 93       	push	r22
 8ce:	7f 93       	push	r23
 8d0:	8f 93       	push	r24
 8d2:	9f 93       	push	r25
 8d4:	af 93       	push	r26
 8d6:	bf 93       	push	r27
 8d8:	ef 93       	push	r30
 8da:	ff 93       	push	r31
	 
	unsigned char buffer;

	/* Daten aus dem Puffer lesen */
	buffer = UDR;
 8dc:	1c b1       	in	r17, 0x0c	; 12
	fifo_put(&infifo, buffer);
 8de:	61 2f       	mov	r22, r17
 8e0:	80 e9       	ldi	r24, 0x90	; 144
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	0e 94 40 06 	call	0xc80	; 0xc80 <fifo_put>

	/* warten bis der Sendepuffer leer ist */
	while ( !( UCSRA & (1<<UDRE)) );
 8e8:	5d 9b       	sbis	0x0b, 5	; 11
 8ea:	fe cf       	rjmp	.-4      	; 0x8e8 <__vector_11+0x30>
		
	/* ECHO und gleich wieder zurück schicken */
	UDR = buffer;
 8ec:	1c b9       	out	0x0c, r17	; 12
 8ee:	ff 91       	pop	r31
 8f0:	ef 91       	pop	r30
 8f2:	bf 91       	pop	r27
 8f4:	af 91       	pop	r26
 8f6:	9f 91       	pop	r25
 8f8:	8f 91       	pop	r24
 8fa:	7f 91       	pop	r23
 8fc:	6f 91       	pop	r22
 8fe:	5f 91       	pop	r21
 900:	4f 91       	pop	r20
 902:	3f 91       	pop	r19
 904:	2f 91       	pop	r18
 906:	1f 91       	pop	r17
 908:	0f 90       	pop	r0
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	0f 90       	pop	r0
 90e:	1f 90       	pop	r1
 910:	18 95       	reti

00000912 <uart_getc>:
 912:	0f 93       	push	r16
 914:	1f 93       	push	r17
 916:	cf 93       	push	r28
 918:	df 93       	push	r29
 91a:	cd b7       	in	r28, 0x3d	; 61
 91c:	de b7       	in	r29, 0x3e	; 62
 91e:	21 97       	sbiw	r28, 0x01	; 1
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
 92a:	8c 01       	movw	r16, r24
 92c:	be 01       	movw	r22, r28
 92e:	6f 5f       	subi	r22, 0xFF	; 255
 930:	7f 4f       	sbci	r23, 0xFF	; 255
 932:	80 e9       	ldi	r24, 0x90	; 144
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0e 94 65 06 	call	0xcca	; 0xcca <fifo_get>
 93a:	88 23       	and	r24, r24
 93c:	31 f4       	brne	.+12     	; 0x94a <uart_getc+0x38>
 93e:	89 81       	ldd	r24, Y+1	; 0x01
 940:	f8 01       	movw	r30, r16
 942:	80 83       	st	Z, r24
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	02 c0       	rjmp	.+4      	; 0x94e <uart_getc+0x3c>
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	21 96       	adiw	r28, 0x01	; 1
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	f8 94       	cli
 954:	de bf       	out	0x3e, r29	; 62
 956:	0f be       	out	0x3f, r0	; 63
 958:	cd bf       	out	0x3d, r28	; 61
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	1f 91       	pop	r17
 960:	0f 91       	pop	r16
 962:	08 95       	ret

00000964 <uart_puti>:
 964:	0f 93       	push	r16
 966:	1f 93       	push	r17
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	cd b7       	in	r28, 0x3d	; 61
 96e:	de b7       	in	r29, 0x3e	; 62
 970:	27 97       	sbiw	r28, 0x07	; 7
 972:	0f b6       	in	r0, 0x3f	; 63
 974:	f8 94       	cli
 976:	de bf       	out	0x3e, r29	; 62
 978:	0f be       	out	0x3f, r0	; 63
 97a:	cd bf       	out	0x3d, r28	; 61
 97c:	4a e0       	ldi	r20, 0x0A	; 10
 97e:	50 e0       	ldi	r21, 0x00	; 0
 980:	8e 01       	movw	r16, r28
 982:	0f 5f       	subi	r16, 0xFF	; 255
 984:	1f 4f       	sbci	r17, 0xFF	; 255
 986:	b8 01       	movw	r22, r16
 988:	0e 94 8b 06 	call	0xd16	; 0xd16 <itoa>
 98c:	89 81       	ldd	r24, Y+1	; 0x01
 98e:	88 23       	and	r24, r24
 990:	41 f0       	breq	.+16     	; 0x9a2 <uart_puti+0x3e>
 992:	f8 01       	movw	r30, r16
 994:	31 96       	adiw	r30, 0x01	; 1
 996:	5d 9b       	sbis	0x0b, 5	; 11
 998:	fe cf       	rjmp	.-4      	; 0x996 <uart_puti+0x32>
 99a:	8c b9       	out	0x0c, r24	; 12
 99c:	80 81       	ld	r24, Z
 99e:	88 23       	and	r24, r24
 9a0:	c9 f7       	brne	.-14     	; 0x994 <uart_puti+0x30>
 9a2:	27 96       	adiw	r28, 0x07	; 7
 9a4:	0f b6       	in	r0, 0x3f	; 63
 9a6:	f8 94       	cli
 9a8:	de bf       	out	0x3e, r29	; 62
 9aa:	0f be       	out	0x3f, r0	; 63
 9ac:	cd bf       	out	0x3d, r28	; 61
 9ae:	df 91       	pop	r29
 9b0:	cf 91       	pop	r28
 9b2:	1f 91       	pop	r17
 9b4:	0f 91       	pop	r16
 9b6:	08 95       	ret

000009b8 <uart_puts_p>:
 9b8:	fc 01       	movw	r30, r24
 9ba:	84 91       	lpm	r24, Z
 9bc:	88 23       	and	r24, r24
 9be:	39 f0       	breq	.+14     	; 0x9ce <uart_puts_p+0x16>
 9c0:	5d 9b       	sbis	0x0b, 5	; 11
 9c2:	fe cf       	rjmp	.-4      	; 0x9c0 <uart_puts_p+0x8>
 9c4:	8c b9       	out	0x0c, r24	; 12
 9c6:	31 96       	adiw	r30, 0x01	; 1
 9c8:	84 91       	lpm	r24, Z
 9ca:	88 23       	and	r24, r24
 9cc:	c9 f7       	brne	.-14     	; 0x9c0 <uart_puts_p+0x8>
 9ce:	08 95       	ret

000009d0 <uart_init>:
 9d0:	10 bc       	out	0x20, r1	; 32
 9d2:	85 e0       	ldi	r24, 0x05	; 5
 9d4:	89 b9       	out	0x09, r24	; 9
 9d6:	88 e9       	ldi	r24, 0x98	; 152
 9d8:	8a b9       	out	0x0a, r24	; 10
 9da:	86 e8       	ldi	r24, 0x86	; 134
 9dc:	80 bd       	out	0x20, r24	; 32
 9de:	e4 e6       	ldi	r30, 0x64	; 100
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 91 64 00 	lds	r24, 0x0064
 9e6:	31 96       	adiw	r30, 0x01	; 1
 9e8:	5d 9b       	sbis	0x0b, 5	; 11
 9ea:	fe cf       	rjmp	.-4      	; 0x9e8 <uart_init+0x18>
 9ec:	8c b9       	out	0x0c, r24	; 12
 9ee:	80 81       	ld	r24, Z
 9f0:	88 23       	and	r24, r24
 9f2:	c9 f7       	brne	.-14     	; 0x9e6 <uart_init+0x16>
 9f4:	4a e0       	ldi	r20, 0x0A	; 10
 9f6:	66 e8       	ldi	r22, 0x86	; 134
 9f8:	70 e0       	ldi	r23, 0x00	; 0
 9fa:	80 e9       	ldi	r24, 0x90	; 144
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 36 06 	call	0xc6c	; 0xc6c <fifo_init>
 a02:	08 95       	ret

00000a04 <uart_printtime>:
 a04:	2f 92       	push	r2
 a06:	3f 92       	push	r3
 a08:	4f 92       	push	r4
 a0a:	5f 92       	push	r5
 a0c:	6f 92       	push	r6
 a0e:	7f 92       	push	r7
 a10:	8f 92       	push	r8
 a12:	9f 92       	push	r9
 a14:	af 92       	push	r10
 a16:	bf 92       	push	r11
 a18:	cf 92       	push	r12
 a1a:	df 92       	push	r13
 a1c:	ef 92       	push	r14
 a1e:	ff 92       	push	r15
 a20:	0f 93       	push	r16
 a22:	1f 93       	push	r17
 a24:	cf 93       	push	r28
 a26:	df 93       	push	r29
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
 a2c:	27 97       	sbiw	r28, 0x07	; 7
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	a1 14       	cp	r10, r1
 a3a:	b1 04       	cpc	r11, r1
 a3c:	c1 04       	cpc	r12, r1
 a3e:	d1 04       	cpc	r13, r1
 a40:	09 f4       	brne	.+2      	; 0xa44 <uart_printtime+0x40>
 a42:	fb c0       	rjmp	.+502    	; 0xc3a <uart_printtime+0x236>
 a44:	c6 01       	movw	r24, r12
 a46:	b5 01       	movw	r22, r10
 a48:	28 ee       	ldi	r18, 0xE8	; 232
 a4a:	33 e0       	ldi	r19, 0x03	; 3
 a4c:	40 e0       	ldi	r20, 0x00	; 0
 a4e:	50 e0       	ldi	r21, 0x00	; 0
 a50:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__udivmodsi4>
 a54:	39 01       	movw	r6, r18
 a56:	4a 01       	movw	r8, r20
 a58:	ca 01       	movw	r24, r20
 a5a:	b9 01       	movw	r22, r18
 a5c:	2c e3       	ldi	r18, 0x3C	; 60
 a5e:	30 e0       	ldi	r19, 0x00	; 0
 a60:	40 e0       	ldi	r20, 0x00	; 0
 a62:	50 e0       	ldi	r21, 0x00	; 0
 a64:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__udivmodsi4>
 a68:	59 01       	movw	r10, r18
 a6a:	6a 01       	movw	r12, r20
 a6c:	ca 01       	movw	r24, r20
 a6e:	b9 01       	movw	r22, r18
 a70:	2c e3       	ldi	r18, 0x3C	; 60
 a72:	30 e0       	ldi	r19, 0x00	; 0
 a74:	40 e0       	ldi	r20, 0x00	; 0
 a76:	50 e0       	ldi	r21, 0x00	; 0
 a78:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__udivmodsi4>
 a7c:	79 01       	movw	r14, r18
 a7e:	8a 01       	movw	r16, r20
 a80:	22 2e       	mov	r2, r18
 a82:	33 24       	eor	r3, r3
 a84:	8c e3       	ldi	r24, 0x3C	; 60
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	9c 01       	movw	r18, r24
 a8a:	22 9e       	mul	r2, r18
 a8c:	c0 01       	movw	r24, r0
 a8e:	23 9e       	mul	r2, r19
 a90:	90 0d       	add	r25, r0
 a92:	32 9e       	mul	r3, r18
 a94:	90 0d       	add	r25, r0
 a96:	11 24       	eor	r1, r1
 a98:	aa 27       	eor	r26, r26
 a9a:	97 fd       	sbrc	r25, 7
 a9c:	a0 95       	com	r26
 a9e:	ba 2f       	mov	r27, r26
 aa0:	a8 1a       	sub	r10, r24
 aa2:	b9 0a       	sbc	r11, r25
 aa4:	ca 0a       	sbc	r12, r26
 aa6:	db 0a       	sbc	r13, r27
 aa8:	c6 01       	movw	r24, r12
 aaa:	b5 01       	movw	r22, r10
 aac:	2c e3       	ldi	r18, 0x3C	; 60
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	40 e0       	ldi	r20, 0x00	; 0
 ab2:	50 e0       	ldi	r21, 0x00	; 0
 ab4:	0e 94 bc 06 	call	0xd78	; 0xd78 <__mulsi3>
 ab8:	20 e1       	ldi	r18, 0x10	; 16
 aba:	3e e0       	ldi	r19, 0x0E	; 14
 abc:	a9 01       	movw	r20, r18
 abe:	24 9e       	mul	r2, r20
 ac0:	90 01       	movw	r18, r0
 ac2:	25 9e       	mul	r2, r21
 ac4:	30 0d       	add	r19, r0
 ac6:	34 9e       	mul	r3, r20
 ac8:	30 0d       	add	r19, r0
 aca:	11 24       	eor	r1, r1
 acc:	44 27       	eor	r20, r20
 ace:	37 fd       	sbrc	r19, 7
 ad0:	40 95       	com	r20
 ad2:	54 2f       	mov	r21, r20
 ad4:	26 0f       	add	r18, r22
 ad6:	37 1f       	adc	r19, r23
 ad8:	48 1f       	adc	r20, r24
 ada:	59 1f       	adc	r21, r25
 adc:	62 1a       	sub	r6, r18
 ade:	73 0a       	sbc	r7, r19
 ae0:	84 0a       	sbc	r8, r20
 ae2:	95 0a       	sbc	r9, r21
 ae4:	59 e0       	ldi	r21, 0x09	; 9
 ae6:	5e 15       	cp	r21, r14
 ae8:	08 f0       	brcs	.+2      	; 0xaec <uart_printtime+0xe8>
 aea:	98 c0       	rjmp	.+304    	; 0xc1c <uart_printtime+0x218>
 aec:	4a e0       	ldi	r20, 0x0A	; 10
 aee:	50 e0       	ldi	r21, 0x00	; 0
 af0:	2e 01       	movw	r4, r28
 af2:	08 94       	sec
 af4:	41 1c       	adc	r4, r1
 af6:	51 1c       	adc	r5, r1
 af8:	b2 01       	movw	r22, r4
 afa:	c1 01       	movw	r24, r2
 afc:	0e 94 8b 06 	call	0xd16	; 0xd16 <itoa>
 b00:	89 81       	ldd	r24, Y+1	; 0x01
 b02:	88 23       	and	r24, r24
 b04:	41 f0       	breq	.+16     	; 0xb16 <uart_printtime+0x112>
 b06:	f2 01       	movw	r30, r4
 b08:	31 96       	adiw	r30, 0x01	; 1
 b0a:	5d 9b       	sbis	0x0b, 5	; 11
 b0c:	fe cf       	rjmp	.-4      	; 0xb0a <uart_printtime+0x106>
 b0e:	8c b9       	out	0x0c, r24	; 12
 b10:	80 81       	ld	r24, Z
 b12:	88 23       	and	r24, r24
 b14:	c9 f7       	brne	.-14     	; 0xb08 <uart_printtime+0x104>
 b16:	5d 9b       	sbis	0x0b, 5	; 11
 b18:	fe cf       	rjmp	.-4      	; 0xb16 <uart_printtime+0x112>
 b1a:	8a e3       	ldi	r24, 0x3A	; 58
 b1c:	8c b9       	out	0x0c, r24	; 12
 b1e:	8a e0       	ldi	r24, 0x0A	; 10
 b20:	a8 16       	cp	r10, r24
 b22:	b1 04       	cpc	r11, r1
 b24:	c1 04       	cpc	r12, r1
 b26:	d1 04       	cpc	r13, r1
 b28:	08 f4       	brcc	.+2      	; 0xb2c <uart_printtime+0x128>
 b2a:	7d c0       	rjmp	.+250    	; 0xc26 <uart_printtime+0x222>
 b2c:	4a e0       	ldi	r20, 0x0A	; 10
 b2e:	50 e0       	ldi	r21, 0x00	; 0
 b30:	b2 01       	movw	r22, r4
 b32:	c5 01       	movw	r24, r10
 b34:	0e 94 8b 06 	call	0xd16	; 0xd16 <itoa>
 b38:	89 81       	ldd	r24, Y+1	; 0x01
 b3a:	88 23       	and	r24, r24
 b3c:	41 f0       	breq	.+16     	; 0xb4e <uart_printtime+0x14a>
 b3e:	f2 01       	movw	r30, r4
 b40:	31 96       	adiw	r30, 0x01	; 1
 b42:	5d 9b       	sbis	0x0b, 5	; 11
 b44:	fe cf       	rjmp	.-4      	; 0xb42 <uart_printtime+0x13e>
 b46:	8c b9       	out	0x0c, r24	; 12
 b48:	80 81       	ld	r24, Z
 b4a:	88 23       	and	r24, r24
 b4c:	c9 f7       	brne	.-14     	; 0xb40 <uart_printtime+0x13c>
 b4e:	5d 9b       	sbis	0x0b, 5	; 11
 b50:	fe cf       	rjmp	.-4      	; 0xb4e <uart_printtime+0x14a>
 b52:	8a e3       	ldi	r24, 0x3A	; 58
 b54:	8c b9       	out	0x0c, r24	; 12
 b56:	2a e0       	ldi	r18, 0x0A	; 10
 b58:	62 16       	cp	r6, r18
 b5a:	71 04       	cpc	r7, r1
 b5c:	81 04       	cpc	r8, r1
 b5e:	91 04       	cpc	r9, r1
 b60:	08 f4       	brcc	.+2      	; 0xb64 <uart_printtime+0x160>
 b62:	66 c0       	rjmp	.+204    	; 0xc30 <uart_printtime+0x22c>
 b64:	4a e0       	ldi	r20, 0x0A	; 10
 b66:	50 e0       	ldi	r21, 0x00	; 0
 b68:	b2 01       	movw	r22, r4
 b6a:	c3 01       	movw	r24, r6
 b6c:	0e 94 8b 06 	call	0xd16	; 0xd16 <itoa>
 b70:	89 81       	ldd	r24, Y+1	; 0x01
 b72:	88 23       	and	r24, r24
 b74:	41 f0       	breq	.+16     	; 0xb86 <uart_printtime+0x182>
 b76:	f2 01       	movw	r30, r4
 b78:	31 96       	adiw	r30, 0x01	; 1
 b7a:	5d 9b       	sbis	0x0b, 5	; 11
 b7c:	fe cf       	rjmp	.-4      	; 0xb7a <uart_printtime+0x176>
 b7e:	8c b9       	out	0x0c, r24	; 12
 b80:	80 81       	ld	r24, Z
 b82:	88 23       	and	r24, r24
 b84:	c9 f7       	brne	.-14     	; 0xb78 <uart_printtime+0x174>
 b86:	5d 9b       	sbis	0x0b, 5	; 11
 b88:	fe cf       	rjmp	.-4      	; 0xb86 <uart_printtime+0x182>
 b8a:	8a e3       	ldi	r24, 0x3A	; 58
 b8c:	8c b9       	out	0x0c, r24	; 12
 b8e:	c4 01       	movw	r24, r8
 b90:	b3 01       	movw	r22, r6
 b92:	28 ee       	ldi	r18, 0xE8	; 232
 b94:	33 e0       	ldi	r19, 0x03	; 3
 b96:	40 e0       	ldi	r20, 0x00	; 0
 b98:	50 e0       	ldi	r21, 0x00	; 0
 b9a:	0e 94 bc 06 	call	0xd78	; 0xd78 <__mulsi3>
 b9e:	7b 01       	movw	r14, r22
 ba0:	8c 01       	movw	r16, r24
 ba2:	c6 01       	movw	r24, r12
 ba4:	b5 01       	movw	r22, r10
 ba6:	20 e6       	ldi	r18, 0x60	; 96
 ba8:	3a ee       	ldi	r19, 0xEA	; 234
 baa:	40 e0       	ldi	r20, 0x00	; 0
 bac:	50 e0       	ldi	r21, 0x00	; 0
 bae:	0e 94 bc 06 	call	0xd78	; 0xd78 <__mulsi3>
 bb2:	20 e8       	ldi	r18, 0x80	; 128
 bb4:	3e ee       	ldi	r19, 0xEE	; 238
 bb6:	a9 01       	movw	r20, r18
 bb8:	24 9e       	mul	r2, r20
 bba:	90 01       	movw	r18, r0
 bbc:	25 9e       	mul	r2, r21
 bbe:	30 0d       	add	r19, r0
 bc0:	34 9e       	mul	r3, r20
 bc2:	30 0d       	add	r19, r0
 bc4:	11 24       	eor	r1, r1
 bc6:	44 27       	eor	r20, r20
 bc8:	37 fd       	sbrc	r19, 7
 bca:	40 95       	com	r20
 bcc:	54 2f       	mov	r21, r20
 bce:	26 0f       	add	r18, r22
 bd0:	37 1f       	adc	r19, r23
 bd2:	48 1f       	adc	r20, r24
 bd4:	59 1f       	adc	r21, r25
 bd6:	2e 0d       	add	r18, r14
 bd8:	3f 1d       	adc	r19, r15
 bda:	40 1f       	adc	r20, r16
 bdc:	51 1f       	adc	r21, r17
 bde:	a2 1a       	sub	r10, r18
 be0:	b3 0a       	sbc	r11, r19
 be2:	c4 0a       	sbc	r12, r20
 be4:	d5 0a       	sbc	r13, r21
 be6:	c6 01       	movw	r24, r12
 be8:	b5 01       	movw	r22, r10
 bea:	24 e6       	ldi	r18, 0x64	; 100
 bec:	30 e0       	ldi	r19, 0x00	; 0
 bee:	40 e0       	ldi	r20, 0x00	; 0
 bf0:	50 e0       	ldi	r21, 0x00	; 0
 bf2:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__udivmodsi4>
 bf6:	da 01       	movw	r26, r20
 bf8:	c9 01       	movw	r24, r18
 bfa:	4a e0       	ldi	r20, 0x0A	; 10
 bfc:	50 e0       	ldi	r21, 0x00	; 0
 bfe:	b2 01       	movw	r22, r4
 c00:	0e 94 8b 06 	call	0xd16	; 0xd16 <itoa>
 c04:	89 81       	ldd	r24, Y+1	; 0x01
 c06:	88 23       	and	r24, r24
 c08:	c1 f0       	breq	.+48     	; 0xc3a <uart_printtime+0x236>
 c0a:	f2 01       	movw	r30, r4
 c0c:	31 96       	adiw	r30, 0x01	; 1
 c0e:	5d 9b       	sbis	0x0b, 5	; 11
 c10:	fe cf       	rjmp	.-4      	; 0xc0e <uart_printtime+0x20a>
 c12:	8c b9       	out	0x0c, r24	; 12
 c14:	80 81       	ld	r24, Z
 c16:	88 23       	and	r24, r24
 c18:	c9 f7       	brne	.-14     	; 0xc0c <uart_printtime+0x208>
 c1a:	0f c0       	rjmp	.+30     	; 0xc3a <uart_printtime+0x236>
 c1c:	5d 9b       	sbis	0x0b, 5	; 11
 c1e:	fe cf       	rjmp	.-4      	; 0xc1c <uart_printtime+0x218>
 c20:	80 e3       	ldi	r24, 0x30	; 48
 c22:	8c b9       	out	0x0c, r24	; 12
 c24:	63 cf       	rjmp	.-314    	; 0xaec <uart_printtime+0xe8>
 c26:	5d 9b       	sbis	0x0b, 5	; 11
 c28:	fe cf       	rjmp	.-4      	; 0xc26 <uart_printtime+0x222>
 c2a:	80 e3       	ldi	r24, 0x30	; 48
 c2c:	8c b9       	out	0x0c, r24	; 12
 c2e:	7e cf       	rjmp	.-260    	; 0xb2c <uart_printtime+0x128>
 c30:	5d 9b       	sbis	0x0b, 5	; 11
 c32:	fe cf       	rjmp	.-4      	; 0xc30 <uart_printtime+0x22c>
 c34:	80 e3       	ldi	r24, 0x30	; 48
 c36:	8c b9       	out	0x0c, r24	; 12
 c38:	95 cf       	rjmp	.-214    	; 0xb64 <uart_printtime+0x160>
 c3a:	27 96       	adiw	r28, 0x07	; 7
 c3c:	0f b6       	in	r0, 0x3f	; 63
 c3e:	f8 94       	cli
 c40:	de bf       	out	0x3e, r29	; 62
 c42:	0f be       	out	0x3f, r0	; 63
 c44:	cd bf       	out	0x3d, r28	; 61
 c46:	df 91       	pop	r29
 c48:	cf 91       	pop	r28
 c4a:	1f 91       	pop	r17
 c4c:	0f 91       	pop	r16
 c4e:	ff 90       	pop	r15
 c50:	ef 90       	pop	r14
 c52:	df 90       	pop	r13
 c54:	cf 90       	pop	r12
 c56:	bf 90       	pop	r11
 c58:	af 90       	pop	r10
 c5a:	9f 90       	pop	r9
 c5c:	8f 90       	pop	r8
 c5e:	7f 90       	pop	r7
 c60:	6f 90       	pop	r6
 c62:	5f 90       	pop	r5
 c64:	4f 90       	pop	r4
 c66:	3f 90       	pop	r3
 c68:	2f 90       	pop	r2
 c6a:	08 95       	ret

00000c6c <fifo_init>:
* fifo_init (&fifo, buffer, BUF_SIZE);
* \endcode
***************************************************************************/
void fifo_init (fifo_t *f, uint8_t *buffer, const uint8_t size)
{
 c6c:	fc 01       	movw	r30, r24
	f->count = 0;		// kein Eintrag im Puffer
 c6e:	10 82       	st	Z, r1
	f->pread = f->pwrite = buffer;	// lessezeiger auf Anfang setzen
 c70:	75 83       	std	Z+5, r23	; 0x05
 c72:	64 83       	std	Z+4, r22	; 0x04
 c74:	73 83       	std	Z+3, r23	; 0x03
 c76:	62 83       	std	Z+2, r22	; 0x02
	f->read2end = f->write2end = f->size = size;	// schreibzeiger auf anfang setzen
 c78:	41 83       	std	Z+1, r20	; 0x01
 c7a:	47 83       	std	Z+7, r20	; 0x07
 c7c:	46 83       	std	Z+6, r20	; 0x06
 c7e:	08 95       	ret

00000c80 <fifo_put>:
}

/**************************************************************************/
/*!	\brief Funktion fügt dem Puffer einen weiteren Wert hinzu
*
*			Schreibt das Byte data in die FIFO. Liefert 1 bei Erfolg und 
*			0, falls die FIFO voll ist.
***************************************************************************/
uint8_t fifo_put (fifo_t *f, const uint8_t data)
{
 c80:	cf 93       	push	r28
 c82:	df 93       	push	r29
 c84:	dc 01       	movw	r26, r24
	if (f->count >= f->size)
 c86:	9c 91       	ld	r25, X
 c88:	ed 01       	movw	r28, r26
 c8a:	89 81       	ldd	r24, Y+1	; 0x01
 c8c:	98 17       	cp	r25, r24
 c8e:	c0 f4       	brcc	.+48     	; 0xcc0 <fifo_put+0x40>
		return 0;
		
	uint8_t sreg = SREG;
 c90:	9f b7       	in	r25, 0x3f	; 63
	cli();
 c92:	f8 94       	cli
	
	uint8_t * pwrite = f->pwrite;
 c94:	ed 01       	movw	r28, r26
 c96:	ec 81       	ldd	r30, Y+4	; 0x04
 c98:	fd 81       	ldd	r31, Y+5	; 0x05
	
	*(pwrite++) = data;
 c9a:	61 93       	st	Z+, r22
	
	uint8_t write2end = f->write2end;
 c9c:	8f 81       	ldd	r24, Y+7	; 0x07
	
	if (--write2end == 0)
 c9e:	81 50       	subi	r24, 0x01	; 1
 ca0:	59 f0       	breq	.+22     	; 0xcb8 <fifo_put+0x38>
	{
		write2end = f->size;
		pwrite -= write2end;
	}
	
	f->write2end = write2end;
 ca2:	ed 01       	movw	r28, r26
 ca4:	8f 83       	std	Y+7, r24	; 0x07
	f->pwrite = pwrite;
 ca6:	fd 83       	std	Y+5, r31	; 0x05
 ca8:	ec 83       	std	Y+4, r30	; 0x04


	f->count++;
 caa:	8c 91       	ld	r24, X
 cac:	8f 5f       	subi	r24, 0xFF	; 255
 cae:	8c 93       	st	X, r24
	SREG = sreg;
 cb0:	9f bf       	out	0x3f, r25	; 63
 cb2:	81 e0       	ldi	r24, 0x01	; 1
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	06 c0       	rjmp	.+12     	; 0xcc4 <fifo_put+0x44>
 cb8:	89 81       	ldd	r24, Y+1	; 0x01
 cba:	e8 1b       	sub	r30, r24
 cbc:	f1 09       	sbc	r31, r1
 cbe:	f1 cf       	rjmp	.-30     	; 0xca2 <fifo_put+0x22>
 cc0:	80 e0       	ldi	r24, 0x00	; 0
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	df 91       	pop	r29
 cc6:	cf 91       	pop	r28
 cc8:	08 95       	ret

00000cca <fifo_get>:
	
	return 1;
}


/**************************************************************************/
/*!	\brief Liest den nächsten Wert aus dem Puffer
*
* 		Schreibt in data das nächste Byte aus der FIFO.
*			Liefrt 1 bei Erfolg und 0 falls die FIFO leer ist.
***************************************************************************/
uint8_t fifo_get (fifo_t *f, uint8_t *data)
{
 cca:	cf 93       	push	r28
 ccc:	df 93       	push	r29
 cce:	dc 01       	movw	r26, r24
	if (!f->count)		return 1;
 cd0:	8c 91       	ld	r24, X
 cd2:	88 23       	and	r24, r24
 cd4:	d9 f0       	breq	.+54     	; 0xd0c <fifo_get+0x42>
	
	uint8_t sreg = SREG;				// Interruptregister speichern
 cd6:	2f b7       	in	r18, 0x3f	; 63
	cli();											// Interrupts verbieten (atomarer code)
 cd8:	f8 94       	cli
	
	uint8_t *pread = f->pread;	// lesezeiger speichern
 cda:	ed 01       	movw	r28, r26
 cdc:	ea 81       	ldd	r30, Y+2	; 0x02
 cde:	fb 81       	ldd	r31, Y+3	; 0x03
	uint8_t read2end = f->read2end;	// Einträge bis Bufferende
 ce0:	9e 81       	ldd	r25, Y+6	; 0x06
	*data = *(pread++);				// daten auslesen
 ce2:	81 91       	ld	r24, Z+
 ce4:	eb 01       	movw	r28, r22
 ce6:	88 83       	st	Y, r24
	
	if (--read2end == 0)				// Zeiger hat ende erreicht
 ce8:	91 50       	subi	r25, 0x01	; 1
 cea:	59 f0       	breq	.+22     	; 0xd02 <fifo_get+0x38>
	{
		read2end = f->size;				// noch size einträge bis bufferende
		pread -= read2end;				// lese Zeiger beginnt von vorn
	}
	
	f->pread = pread;						// speichern des neuen Lesezeigers
 cec:	ed 01       	movw	r28, r26
 cee:	fb 83       	std	Y+3, r31	; 0x03
 cf0:	ea 83       	std	Y+2, r30	; 0x02
	f->read2end = read2end;			// anzahl der einträge bis bufferende
 cf2:	9e 83       	std	Y+6, r25	; 0x06

	f->count--;									// ein Eintrag weniger im Buffer
 cf4:	8c 91       	ld	r24, X
 cf6:	81 50       	subi	r24, 0x01	; 1
 cf8:	8c 93       	st	X, r24
	SREG = sreg;								// Interrupts wiederherstellen
 cfa:	2f bf       	out	0x3f, r18	; 63
 cfc:	80 e0       	ldi	r24, 0x00	; 0
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	07 c0       	rjmp	.+14     	; 0xd10 <fifo_get+0x46>
 d02:	ed 01       	movw	r28, r26
 d04:	99 81       	ldd	r25, Y+1	; 0x01
 d06:	e9 1b       	sub	r30, r25
 d08:	f1 09       	sbc	r31, r1
 d0a:	f0 cf       	rjmp	.-32     	; 0xcec <fifo_get+0x22>
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	df 91       	pop	r29
 d12:	cf 91       	pop	r28
 d14:	08 95       	ret

00000d16 <itoa>:
 d16:	fb 01       	movw	r30, r22
 d18:	9f 01       	movw	r18, r30
 d1a:	e8 94       	clt
 d1c:	42 30       	cpi	r20, 0x02	; 2
 d1e:	c4 f0       	brlt	.+48     	; 0xd50 <itoa+0x3a>
 d20:	45 32       	cpi	r20, 0x25	; 37
 d22:	b4 f4       	brge	.+44     	; 0xd50 <itoa+0x3a>
 d24:	4a 30       	cpi	r20, 0x0A	; 10
 d26:	29 f4       	brne	.+10     	; 0xd32 <itoa+0x1c>
 d28:	97 fb       	bst	r25, 7
 d2a:	1e f4       	brtc	.+6      	; 0xd32 <itoa+0x1c>
 d2c:	90 95       	com	r25
 d2e:	81 95       	neg	r24
 d30:	9f 4f       	sbci	r25, 0xFF	; 255
 d32:	64 2f       	mov	r22, r20
 d34:	77 27       	eor	r23, r23
 d36:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__udivmodhi4>
 d3a:	80 5d       	subi	r24, 0xD0	; 208
 d3c:	8a 33       	cpi	r24, 0x3A	; 58
 d3e:	0c f0       	brlt	.+2      	; 0xd42 <itoa+0x2c>
 d40:	89 5d       	subi	r24, 0xD9	; 217
 d42:	81 93       	st	Z+, r24
 d44:	cb 01       	movw	r24, r22
 d46:	00 97       	sbiw	r24, 0x00	; 0
 d48:	a1 f7       	brne	.-24     	; 0xd32 <itoa+0x1c>
 d4a:	16 f4       	brtc	.+4      	; 0xd50 <itoa+0x3a>
 d4c:	5d e2       	ldi	r21, 0x2D	; 45
 d4e:	51 93       	st	Z+, r21
 d50:	10 82       	st	Z, r1
 d52:	c9 01       	movw	r24, r18
 d54:	0c 94 ac 06 	jmp	0xd58	; 0xd58 <strrev>

00000d58 <strrev>:
 d58:	dc 01       	movw	r26, r24
 d5a:	fc 01       	movw	r30, r24
 d5c:	67 2f       	mov	r22, r23
 d5e:	71 91       	ld	r23, Z+
 d60:	77 23       	and	r23, r23
 d62:	e1 f7       	brne	.-8      	; 0xd5c <strrev+0x4>
 d64:	32 97       	sbiw	r30, 0x02	; 2
 d66:	04 c0       	rjmp	.+8      	; 0xd70 <strrev+0x18>
 d68:	7c 91       	ld	r23, X
 d6a:	6d 93       	st	X+, r22
 d6c:	70 83       	st	Z, r23
 d6e:	62 91       	ld	r22, -Z
 d70:	ae 17       	cp	r26, r30
 d72:	bf 07       	cpc	r27, r31
 d74:	c8 f3       	brcs	.-14     	; 0xd68 <strrev+0x10>
 d76:	08 95       	ret

00000d78 <__mulsi3>:
 d78:	62 9f       	mul	r22, r18
 d7a:	d0 01       	movw	r26, r0
 d7c:	73 9f       	mul	r23, r19
 d7e:	f0 01       	movw	r30, r0
 d80:	82 9f       	mul	r24, r18
 d82:	e0 0d       	add	r30, r0
 d84:	f1 1d       	adc	r31, r1
 d86:	64 9f       	mul	r22, r20
 d88:	e0 0d       	add	r30, r0
 d8a:	f1 1d       	adc	r31, r1
 d8c:	92 9f       	mul	r25, r18
 d8e:	f0 0d       	add	r31, r0
 d90:	83 9f       	mul	r24, r19
 d92:	f0 0d       	add	r31, r0
 d94:	74 9f       	mul	r23, r20
 d96:	f0 0d       	add	r31, r0
 d98:	65 9f       	mul	r22, r21
 d9a:	f0 0d       	add	r31, r0
 d9c:	99 27       	eor	r25, r25
 d9e:	72 9f       	mul	r23, r18
 da0:	b0 0d       	add	r27, r0
 da2:	e1 1d       	adc	r30, r1
 da4:	f9 1f       	adc	r31, r25
 da6:	63 9f       	mul	r22, r19
 da8:	b0 0d       	add	r27, r0
 daa:	e1 1d       	adc	r30, r1
 dac:	f9 1f       	adc	r31, r25
 dae:	bd 01       	movw	r22, r26
 db0:	cf 01       	movw	r24, r30
 db2:	11 24       	eor	r1, r1
 db4:	08 95       	ret

00000db6 <__udivmodsi4>:
 db6:	a1 e2       	ldi	r26, 0x21	; 33
 db8:	1a 2e       	mov	r1, r26
 dba:	aa 1b       	sub	r26, r26
 dbc:	bb 1b       	sub	r27, r27
 dbe:	fd 01       	movw	r30, r26
 dc0:	0d c0       	rjmp	.+26     	; 0xddc <__udivmodsi4_ep>

00000dc2 <__udivmodsi4_loop>:
 dc2:	aa 1f       	adc	r26, r26
 dc4:	bb 1f       	adc	r27, r27
 dc6:	ee 1f       	adc	r30, r30
 dc8:	ff 1f       	adc	r31, r31
 dca:	a2 17       	cp	r26, r18
 dcc:	b3 07       	cpc	r27, r19
 dce:	e4 07       	cpc	r30, r20
 dd0:	f5 07       	cpc	r31, r21
 dd2:	20 f0       	brcs	.+8      	; 0xddc <__udivmodsi4_ep>
 dd4:	a2 1b       	sub	r26, r18
 dd6:	b3 0b       	sbc	r27, r19
 dd8:	e4 0b       	sbc	r30, r20
 dda:	f5 0b       	sbc	r31, r21

00000ddc <__udivmodsi4_ep>:
 ddc:	66 1f       	adc	r22, r22
 dde:	77 1f       	adc	r23, r23
 de0:	88 1f       	adc	r24, r24
 de2:	99 1f       	adc	r25, r25
 de4:	1a 94       	dec	r1
 de6:	69 f7       	brne	.-38     	; 0xdc2 <__udivmodsi4_loop>
 de8:	60 95       	com	r22
 dea:	70 95       	com	r23
 dec:	80 95       	com	r24
 dee:	90 95       	com	r25
 df0:	9b 01       	movw	r18, r22
 df2:	ac 01       	movw	r20, r24
 df4:	bd 01       	movw	r22, r26
 df6:	cf 01       	movw	r24, r30
 df8:	08 95       	ret

00000dfa <__udivmodhi4>:
 dfa:	aa 1b       	sub	r26, r26
 dfc:	bb 1b       	sub	r27, r27
 dfe:	51 e1       	ldi	r21, 0x11	; 17
 e00:	07 c0       	rjmp	.+14     	; 0xe10 <__udivmodhi4_ep>

00000e02 <__udivmodhi4_loop>:
 e02:	aa 1f       	adc	r26, r26
 e04:	bb 1f       	adc	r27, r27
 e06:	a6 17       	cp	r26, r22
 e08:	b7 07       	cpc	r27, r23
 e0a:	10 f0       	brcs	.+4      	; 0xe10 <__udivmodhi4_ep>
 e0c:	a6 1b       	sub	r26, r22
 e0e:	b7 0b       	sbc	r27, r23

00000e10 <__udivmodhi4_ep>:
 e10:	88 1f       	adc	r24, r24
 e12:	99 1f       	adc	r25, r25
 e14:	5a 95       	dec	r21
 e16:	a9 f7       	brne	.-22     	; 0xe02 <__udivmodhi4_loop>
 e18:	80 95       	com	r24
 e1a:	90 95       	com	r25
 e1c:	bc 01       	movw	r22, r24
 e1e:	cd 01       	movw	r24, r26
 e20:	08 95       	ret

00000e22 <_exit>:
 e22:	ff cf       	rjmp	.-2      	; 0xe22 <_exit>
