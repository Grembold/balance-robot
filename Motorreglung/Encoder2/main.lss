
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00000900  00000974  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000900  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800190  00000990  00000a04  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000188  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000788  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003a9  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062f  00000000  00000000  0000173d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00001d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000233  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e0       	ldi	r30, 0x00	; 0
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a0 39       	cpi	r26, 0x90	; 144
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e9       	ldi	r26, 0x90	; 144
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3a       	cpi	r26, 0xAC	; 172
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
} tPhase;

volatile int32_t lCounter;

int main(void)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	00 d0       	rcall	.+0      	; 0xac <main+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <main+0x8>
  ae:	0f 92       	push	r0
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62

	unsigned long lZeit;
	
/***	timer2_init(); ***/
	/* Timer2 auf 36 kHz eingestellt. */
	TCCR2A = (0 << WGM20) | (0 << WGM21) | (0 << COM2A0) | (0 << COM2A1);
  b4:	e0 eb       	ldi	r30, 0xB0	; 176
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
	TCCR2B = (1 << CS20);
  ba:	e1 eb       	ldi	r30, 0xB1	; 177
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	DDRD |= (1<<PIN3);
	TCCR2A |= (1<<COM2B0);
	*/
	
	/* Interrupts für Timer2 aktivieren */	
	TIMSK2|= (1<<TOIE2);
  c2:	a0 e7       	ldi	r26, 0x70	; 112
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	e0 e7       	ldi	r30, 0x70	; 112
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	8c 93       	st	X, r24
/*** END TIMER2 INIT ***/
 
/*** uart_init(); ***/
	/*Set baud rate */
	unsigned char ubrr = MYUBRR;
  d0:	83 e3       	ldi	r24, 0x33	; 51
  d2:	89 83       	std	Y+1, r24	; 0x01
	UBRR0H = (unsigned char)(ubrr>>8);
  d4:	e5 ec       	ldi	r30, 0xC5	; 197
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	89 2f       	mov	r24, r25
  e0:	99 0f       	add	r25, r25
  e2:	99 0b       	sbc	r25, r25
  e4:	80 83       	st	Z, r24
	UBRR0L = (unsigned char)ubrr;
  e6:	e4 ec       	ldi	r30, 0xC4	; 196
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	80 83       	st	Z, r24
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ee:	e1 ec       	ldi	r30, 0xC1	; 193
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	88 e1       	ldi	r24, 0x18	; 24
  f4:	80 83       	st	Z, r24
	/* Set frame format: 8data, 2stop bit (1<<USBS0)|*/
	UCSR0C = (3<<UCSZ00);
  f6:	e2 ec       	ldi	r30, 0xC2	; 194
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	80 83       	st	Z, r24
/*** END UART INI ***/

/*** ENCODER INTERRUPT INIT ***/
	// Maske welche Pins einen Interrupt auslösen sollen
	PCMSK0 |= (1<<PCINT0) | (1<<PCINT1);
  fe:	ab e6       	ldi	r26, 0x6B	; 107
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	eb e6       	ldi	r30, 0x6B	; 107
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	83 60       	ori	r24, 0x03	; 3
 10a:	8c 93       	st	X, r24
	
	// Interne Pull-Up Widerstände aktivieren
	//PORTB |= (1<<PCINT0) | (1<<PCINT1);
	
	// Pin Change Interrupt 0 Enablee
	PCICR = (1<<PCIE0);
 10c:	e8 e6       	ldi	r30, 0x68	; 104
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 83       	st	Z, r24
	
	// Encoder Conter auf null setzen
	lCounter = 0;
 114:	10 92 91 01 	sts	0x0191, r1
 118:	10 92 92 01 	sts	0x0192, r1
 11c:	10 92 93 01 	sts	0x0193, r1
 120:	10 92 94 01 	sts	0x0194, r1
/*** END ENCODER ISR INIT ***/

DDRD |= (1<<7);
 124:	aa e2       	ldi	r26, 0x2A	; 42
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	ea e2       	ldi	r30, 0x2A	; 42
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	8c 93       	st	X, r24
PORTD |= (1<<7); 
 132:	ab e2       	ldi	r26, 0x2B	; 43
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	eb e2       	ldi	r30, 0x2B	; 43
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8c 93       	st	X, r24
	
	uart_puts("\f *** Hallo! ***\r\n");
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 b1 01 	call	0x362	; 0x362 <uart_puts>
	uart_puts(" Ich bin ein kleiner Roboter. Was moechtest du mit mir machen?\r\n");
 148:	83 e1       	ldi	r24, 0x13	; 19
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 b1 01 	call	0x362	; 0x362 <uart_puts>
	uart_puts("BOT:\\>");
 150:	84 e5       	ldi	r24, 0x54	; 84
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 b1 01 	call	0x362	; 0x362 <uart_puts>
	//uint8_t uart_buf;				// von Uart abgefragtes Zeichen


	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 158:	e0 ec       	ldi	r30, 0xC0	; 192
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 2f       	mov	r24, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	80 72       	andi	r24, 0x20	; 32
 164:	90 70       	andi	r25, 0x00	; 0
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	b9 f3       	breq	.-18     	; 0x158 <main+0xb2>
	;
	/* Put data into buffer, sends the data */
	UDR0 = 'd';	
 16a:	e6 ec       	ldi	r30, 0xC6	; 198
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	84 e6       	ldi	r24, 0x64	; 100
 170:	80 83       	st	Z, r24
	uart_putc('C');
 172:	83 e4       	ldi	r24, 0x43	; 67
 174:	0e 94 9a 01 	call	0x334	; 0x334 <uart_putc>
	
	// interrupts allgemein erlauben
	sei();	
 178:	78 94       	sei
	
	// Aktuelle Zeit Speichern
	lZeit = Gettime();
 17a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <Gettime>
 17e:	dc 01       	movw	r26, r24
 180:	cb 01       	movw	r24, r22
 182:	8a 83       	std	Y+2, r24	; 0x02
 184:	9b 83       	std	Y+3, r25	; 0x03
 186:	ac 83       	std	Y+4, r26	; 0x04
 188:	bd 83       	std	Y+5, r27	; 0x05
		
	// endlosprogram
	for(;;)
	{
		if(Gettime() > (lZeit + 100) ) // alle 100ms Ausführen
 18a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <Gettime>
 18e:	dc 01       	movw	r26, r24
 190:	cb 01       	movw	r24, r22
 192:	2a 81       	ldd	r18, Y+2	; 0x02
 194:	3b 81       	ldd	r19, Y+3	; 0x03
 196:	4c 81       	ldd	r20, Y+4	; 0x04
 198:	5d 81       	ldd	r21, Y+5	; 0x05
 19a:	2c 59       	subi	r18, 0x9C	; 156
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	4f 4f       	sbci	r20, 0xFF	; 255
 1a0:	5f 4f       	sbci	r21, 0xFF	; 255
 1a2:	28 17       	cp	r18, r24
 1a4:	39 07       	cpc	r19, r25
 1a6:	4a 07       	cpc	r20, r26
 1a8:	5b 07       	cpc	r21, r27
 1aa:	78 f7       	brcc	.-34     	; 0x18a <main+0xe4>
		{
			lZeit = Gettime();
 1ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <Gettime>
 1b0:	dc 01       	movw	r26, r24
 1b2:	cb 01       	movw	r24, r22
 1b4:	8a 83       	std	Y+2, r24	; 0x02
 1b6:	9b 83       	std	Y+3, r25	; 0x03
 1b8:	ac 83       	std	Y+4, r26	; 0x04
 1ba:	bd 83       	std	Y+5, r27	; 0x05
			
			//uart_buf = uart_getc();						// tastenabfrage
			
			PORTD ^= ( 1 << 7 );  // Toggle PB0 z.B. angeschlossene LED
 1bc:	ab e2       	ldi	r26, 0x2B	; 43
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	eb e2       	ldi	r30, 0x2B	; 43
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	90 81       	ld	r25, Z
 1c6:	80 e8       	ldi	r24, 0x80	; 128
 1c8:	89 27       	eor	r24, r25
 1ca:	8c 93       	st	X, r24
			
			uart_puti(lCounter);	// Encoderwerte ausgeben
 1cc:	80 91 91 01 	lds	r24, 0x0191
 1d0:	90 91 92 01 	lds	r25, 0x0192
 1d4:	a0 91 93 01 	lds	r26, 0x0193
 1d8:	b0 91 94 01 	lds	r27, 0x0194
 1dc:	0e 94 f6 01 	call	0x3ec	; 0x3ec <uart_puti>
			uart_puts("\r\n");
 1e0:	8b e5       	ldi	r24, 0x5B	; 91
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 b1 01 	call	0x362	; 0x362 <uart_puts>
 1e8:	d0 cf       	rjmp	.-96     	; 0x18a <main+0xe4>

000001ea <__vector_3>:
}



ISR(PCINT0_vect)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	00 d0       	rcall	.+0      	; 0x20e <__vector_3+0x24>
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
				  1,       0, ENC_INV,      -1,
				 -1, ENC_INV,       0,       1,
		ENC_INV,       1,      -1,       0
	};
	static tPhase bPhase;
	int8_t iStep = 0;
 212:	19 82       	std	Y+1, r1	; 0x01
	
	bPhase.bRow = (bPhase.bRow<<2);
 214:	80 91 90 01 	lds	r24, 0x0190
 218:	88 0f       	add	r24, r24
 21a:	88 0f       	add	r24, r24
 21c:	80 93 90 01 	sts	0x0190, r24
	bPhase.bRow &=(3<<2); 
 220:	80 91 90 01 	lds	r24, 0x0190
 224:	8c 70       	andi	r24, 0x0C	; 12
 226:	80 93 90 01 	sts	0x0190, r24
	bPhase.x.Signal_A = (PINB & (1<< PCINT0)) ? true : false;
 22a:	e3 e2       	ldi	r30, 0x23	; 35
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	81 70       	andi	r24, 0x01	; 1
 232:	81 70       	andi	r24, 0x01	; 1
 234:	81 70       	andi	r24, 0x01	; 1
 236:	98 2f       	mov	r25, r24
 238:	91 70       	andi	r25, 0x01	; 1
 23a:	80 91 90 01 	lds	r24, 0x0190
 23e:	8e 7f       	andi	r24, 0xFE	; 254
 240:	89 2b       	or	r24, r25
 242:	80 93 90 01 	sts	0x0190, r24
	bPhase.x.Signal_B = (PINB & (1<< PCINT1)) ? true : false;
 246:	e3 e2       	ldi	r30, 0x23	; 35
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	88 2f       	mov	r24, r24
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	82 70       	andi	r24, 0x02	; 2
 252:	90 70       	andi	r25, 0x00	; 0
 254:	1a 82       	std	Y+2, r1	; 0x02
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	11 f0       	breq	.+4      	; 0x25e <__vector_3+0x74>
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	8a 83       	std	Y+2, r24	; 0x02
 25e:	8a 81       	ldd	r24, Y+2	; 0x02
 260:	81 70       	andi	r24, 0x01	; 1
 262:	98 2f       	mov	r25, r24
 264:	99 0f       	add	r25, r25
 266:	80 91 90 01 	lds	r24, 0x0190
 26a:	8d 7f       	andi	r24, 0xFD	; 253
 26c:	89 2b       	or	r24, r25
 26e:	80 93 90 01 	sts	0x0190, r24
	
	iStep = aSteps[bPhase.bRow];
 272:	80 91 90 01 	lds	r24, 0x0190
 276:	88 2f       	mov	r24, r24
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	e2 5a       	subi	r30, 0xA2	; 162
 27e:	fe 4f       	sbci	r31, 0xFE	; 254
 280:	80 81       	ld	r24, Z
 282:	89 83       	std	Y+1, r24	; 0x01
	if(iStep != ENC_INV)
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	80 38       	cpi	r24, 0x80	; 128
 288:	d9 f0       	breq	.+54     	; 0x2c0 <__vector_3+0xd6>
		lCounter += iStep;
 28a:	89 81       	ldd	r24, Y+1	; 0x01
 28c:	28 2f       	mov	r18, r24
 28e:	33 27       	eor	r19, r19
 290:	27 fd       	sbrc	r18, 7
 292:	30 95       	com	r19
 294:	43 2f       	mov	r20, r19
 296:	53 2f       	mov	r21, r19
 298:	80 91 91 01 	lds	r24, 0x0191
 29c:	90 91 92 01 	lds	r25, 0x0192
 2a0:	a0 91 93 01 	lds	r26, 0x0193
 2a4:	b0 91 94 01 	lds	r27, 0x0194
 2a8:	82 0f       	add	r24, r18
 2aa:	93 1f       	adc	r25, r19
 2ac:	a4 1f       	adc	r26, r20
 2ae:	b5 1f       	adc	r27, r21
 2b0:	80 93 91 01 	sts	0x0191, r24
 2b4:	90 93 92 01 	sts	0x0192, r25
 2b8:	a0 93 93 01 	sts	0x0193, r26
 2bc:	b0 93 94 01 	sts	0x0194, r27
	
}
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	cf 91       	pop	r28
 2c6:	df 91       	pop	r29
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	bf 91       	pop	r27
 2ce:	af 91       	pop	r26
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <uart_init>:
*		return 0;
*	}
*  \endcode
*****************************************************************************/
void uart_init(void)
{
 2e6:	df 93       	push	r29
 2e8:	cf 93       	push	r28
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62



/* Set frame format: 8data, 2stop bit */
UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 2ee:	e2 ec       	ldi	r30, 0xC2	; 194
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	8e e0       	ldi	r24, 0x0E	; 14
 2f4:	80 83       	st	Z, r24


	/* Baudrate einstellen ( Normaler Modus ) */
	UBRR0H = (unsigned char) (UBRR_BAUD>>8);
 2f6:	e5 ec       	ldi	r30, 0xC5	; 197
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	10 82       	st	Z, r1
	UBRR0L = (unsigned char) UBRR_BAUD;	
 2fc:	e4 ec       	ldi	r30, 0xC4	; 196
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	8c e0       	ldi	r24, 0x0C	; 12
 302:	80 83       	st	Z, r24

	/* Aktivieren des Empfängers, des Senders und des "Daten empfangen"-Interrupts */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 304:	e1 ec       	ldi	r30, 0xC1	; 193
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	88 e1       	ldi	r24, 0x18	; 24
 30a:	80 83       	st	Z, r24

	/* Einstellen des Datenformats: 8 Datenbits, 1 Stoppbit */
	UCSR0C = (1<<UMSEL00)|(1<<UCSZ01)|(1<<UCSZ00);
 30c:	e2 ec       	ldi	r30, 0xC2	; 194
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	86 e4       	ldi	r24, 0x46	; 70
 312:	80 83       	st	Z, r24
	
	uart_puts("Uart wurde richtig initialisiert\n");
 314:	8e e6       	ldi	r24, 0x6E	; 110
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 b1 01 	call	0x362	; 0x362 <uart_puts>
	
	// FIFOs für Eingabe initialisieren 
	fifo_init (&infifo,   inbuf, BUF_SIZE);
 31c:	8a e9       	ldi	r24, 0x9A	; 154
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	24 ea       	ldi	r18, 0xA4	; 164
 322:	31 e0       	ldi	r19, 0x01	; 1
 324:	4a e0       	ldi	r20, 0x0A	; 10
 326:	bc 01       	movw	r22, r24
 328:	c9 01       	movw	r24, r18
 32a:	0e 94 6f 02 	call	0x4de	; 0x4de <fifo_init>
}
 32e:	cf 91       	pop	r28
 330:	df 91       	pop	r29
 332:	08 95       	ret

00000334 <uart_putc>:
*  uart_putc ('l');
*  uart_putc ('o');
*  \endcode
*****************************************************************************/
void uart_putc(char c)
{
 334:	df 93       	push	r29
 336:	cf 93       	push	r28
 338:	0f 92       	push	r0
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	89 83       	std	Y+1, r24	; 0x01
	
	/* warten bis der Sendepuffer leer ist */
	while ( !( UCSR0A & (1<<UDRE0)) );
 340:	e0 ec       	ldi	r30, 0xC0	; 192
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	88 2f       	mov	r24, r24
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	80 72       	andi	r24, 0x20	; 32
 34c:	90 70       	andi	r25, 0x00	; 0
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	b9 f3       	breq	.-18     	; 0x340 <uart_putc+0xc>
	
	/* Zeichen senden */
	UDR0 = c;
 352:	e6 ec       	ldi	r30, 0xC6	; 198
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	80 83       	st	Z, r24
}
 35a:	0f 90       	pop	r0
 35c:	cf 91       	pop	r28
 35e:	df 91       	pop	r29
 360:	08 95       	ret

00000362 <uart_puts>:
*  // Beispiel fuer uart_puts
*  uart_puts ("Hello World!\r\n");
*  \endcode
*****************************************************************************/
void uart_puts(char *s)
{
 362:	df 93       	push	r29
 364:	cf 93       	push	r28
 366:	00 d0       	rcall	.+0      	; 0x368 <uart_puts+0x6>
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	9a 83       	std	Y+2, r25	; 0x02
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	0b c0       	rjmp	.+22     	; 0x388 <uart_puts+0x26>
	while(*s) // so lange senden, bis das ende des Strings erreicht ist
	{
		uart_putc(*s++);
 372:	e9 81       	ldd	r30, Y+1	; 0x01
 374:	fa 81       	ldd	r31, Y+2	; 0x02
 376:	20 81       	ld	r18, Z
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	9a 81       	ldd	r25, Y+2	; 0x02
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	9a 83       	std	Y+2, r25	; 0x02
 380:	89 83       	std	Y+1, r24	; 0x01
 382:	82 2f       	mov	r24, r18
 384:	0e 94 9a 01 	call	0x334	; 0x334 <uart_putc>
*  uart_puts ("Hello World!\r\n");
*  \endcode
*****************************************************************************/
void uart_puts(char *s)
{
	while(*s) // so lange senden, bis das ende des Strings erreicht ist
 388:	e9 81       	ldd	r30, Y+1	; 0x01
 38a:	fa 81       	ldd	r31, Y+2	; 0x02
 38c:	80 81       	ld	r24, Z
 38e:	88 23       	and	r24, r24
 390:	81 f7       	brne	.-32     	; 0x372 <uart_puts+0x10>
	{
		uart_putc(*s++);
	}
}
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	cf 91       	pop	r28
 398:	df 91       	pop	r29
 39a:	08 95       	ret

0000039c <uart_puts_p>:
*  // Beispiel fuer uart_puts
*  uart_puts_p(PSTR("Hallo Herr Mustermann!\r\n"));
*  \endcode
*****************************************************************************/
void uart_puts_p(const char *text)
{
 39c:	df 93       	push	r29
 39e:	cf 93       	push	r28
 3a0:	00 d0       	rcall	.+0      	; 0x3a2 <uart_puts_p+0x6>
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <uart_puts_p+0x8>
 3a4:	00 d0       	rcall	.+0      	; 0x3a6 <uart_puts_p+0xa>
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	9e 83       	std	Y+6, r25	; 0x06
 3ac:	8d 83       	std	Y+5, r24	; 0x05
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <uart_puts_p+0x24>
    while ((Zeichen = pgm_read_byte(text)))
    {   /* so lange, wie mittels pgm_read_byte ein Zeichen vom Flash gelesen
           werden konnte, welches nicht das "String-Endezeichen" darstellt */
 
        /* Das gelesene Zeichen über die normalen Kanäle verschicken */
        uart_putc(Zeichen);
 3b0:	8c 81       	ldd	r24, Y+4	; 0x04
 3b2:	0e 94 9a 01 	call	0x334	; 0x334 <uart_putc>
        text++;
 3b6:	8d 81       	ldd	r24, Y+5	; 0x05
 3b8:	9e 81       	ldd	r25, Y+6	; 0x06
 3ba:	01 96       	adiw	r24, 0x01	; 1
 3bc:	9e 83       	std	Y+6, r25	; 0x06
 3be:	8d 83       	std	Y+5, r24	; 0x05
*****************************************************************************/
void uart_puts_p(const char *text)
{
    char Zeichen;
 
    while ((Zeichen = pgm_read_byte(text)))
 3c0:	8d 81       	ldd	r24, Y+5	; 0x05
 3c2:	9e 81       	ldd	r25, Y+6	; 0x06
 3c4:	9b 83       	std	Y+3, r25	; 0x03
 3c6:	8a 83       	std	Y+2, r24	; 0x02
 3c8:	ea 81       	ldd	r30, Y+2	; 0x02
 3ca:	fb 81       	ldd	r31, Y+3	; 0x03
 3cc:	84 91       	lpm	r24, Z+
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	8c 83       	std	Y+4, r24	; 0x04
 3d4:	8c 81       	ldd	r24, Y+4	; 0x04
 3d6:	88 23       	and	r24, r24
 3d8:	59 f7       	brne	.-42     	; 0x3b0 <uart_puts_p+0x14>
 
        /* Das gelesene Zeichen über die normalen Kanäle verschicken */
        uart_putc(Zeichen);
        text++;
    }
}
 3da:	26 96       	adiw	r28, 0x06	; 6
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	cf 91       	pop	r28
 3e8:	df 91       	pop	r29
 3ea:	08 95       	ret

000003ec <uart_puti>:
*  uart_puti( wert[0] );
*  uart_puts("\r\n");
*  \endcode
*****************************************************************************/
void uart_puti(int16_t i)
{
 3ec:	df 93       	push	r29
 3ee:	cf 93       	push	r28
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	2d 97       	sbiw	r28, 0x0d	; 13
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	f8 94       	cli
 3fa:	de bf       	out	0x3e, r29	; 62
 3fc:	0f be       	out	0x3f, r0	; 63
 3fe:	cd bf       	out	0x3d, r28	; 61
 400:	9d 87       	std	Y+13, r25	; 0x0d
 402:	8c 87       	std	Y+12, r24	; 0x0c
	char s[11];	// "-2147483648"
	
	/* Wandeln eines Integers in einen String */
	itoa(i, s, 10);		
 404:	8c 85       	ldd	r24, Y+12	; 0x0c
 406:	9d 85       	ldd	r25, Y+13	; 0x0d
 408:	4a e0       	ldi	r20, 0x0A	; 10
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	9e 01       	movw	r18, r28
 40e:	2f 5f       	subi	r18, 0xFF	; 255
 410:	3f 4f       	sbci	r19, 0xFF	; 255
 412:	b9 01       	movw	r22, r18
 414:	0e 94 17 04 	call	0x82e	; 0x82e <itoa>
	/* String versenden */
	uart_puts(s);			
 418:	ce 01       	movw	r24, r28
 41a:	01 96       	adiw	r24, 0x01	; 1
 41c:	0e 94 b1 01 	call	0x362	; 0x362 <uart_puts>
}
 420:	2d 96       	adiw	r28, 0x0d	; 13
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	f8 94       	cli
 426:	de bf       	out	0x3e, r29	; 62
 428:	0f be       	out	0x3f, r0	; 63
 42a:	cd bf       	out	0x3d, r28	; 61
 42c:	cf 91       	pop	r28
 42e:	df 91       	pop	r29
 430:	08 95       	ret

00000432 <uart_getc>:
*  \return
*	empfangenes Zeichen, ist der Empfangspuffer leer liefert die Funktion -1 zurück
*
*****************************************************************************/
int8_t uart_getc(void)
{
 432:	df 93       	push	r29
 434:	cf 93       	push	r28
 436:	00 d0       	rcall	.+0      	; 0x438 <uart_getc+0x6>
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
	uint8_t data;
	
	if (fifo_get(&infifo, &data)==0){
 43c:	84 ea       	ldi	r24, 0xA4	; 164
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	9e 01       	movw	r18, r28
 442:	2f 5f       	subi	r18, 0xFF	; 255
 444:	3f 4f       	sbci	r19, 0xFF	; 255
 446:	b9 01       	movw	r22, r18
 448:	0e 94 0b 03 	call	0x616	; 0x616 <fifo_get>
 44c:	88 23       	and	r24, r24
 44e:	19 f4       	brne	.+6      	; 0x456 <uart_getc+0x24>
		return data;
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	8a 83       	std	Y+2, r24	; 0x02
 454:	02 c0       	rjmp	.+4      	; 0x45a <uart_getc+0x28>
	} else {
		return -1;
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	8a 83       	std	Y+2, r24	; 0x02
 45a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	cf 91       	pop	r28
 462:	df 91       	pop	r29
 464:	08 95       	ret

00000466 <__vector_18>:
*  Der Interrupt sendet das empfangene Zeichen gleich wieder zurück.\n
*  Als \c echo Funktion zur Fehlersuche.\n
*  
*****************************************************************************/
ISR(USART_RX_vect )
{
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	2f 93       	push	r18
 472:	3f 93       	push	r19
 474:	4f 93       	push	r20
 476:	5f 93       	push	r21
 478:	6f 93       	push	r22
 47a:	7f 93       	push	r23
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	af 93       	push	r26
 482:	bf 93       	push	r27
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
 488:	df 93       	push	r29
 48a:	cf 93       	push	r28
 48c:	0f 92       	push	r0
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
	 
	unsigned char buffer;

	/* Daten aus dem Puffer lesen */
	buffer = UDR0;
 492:	e6 ec       	ldi	r30, 0xC6	; 198
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	89 83       	std	Y+1, r24	; 0x01
	fifo_put(&infifo, buffer);
 49a:	84 ea       	ldi	r24, 0xA4	; 164
 49c:	91 e0       	ldi	r25, 0x01	; 1
 49e:	69 81       	ldd	r22, Y+1	; 0x01
 4a0:	0e 94 a4 02 	call	0x548	; 0x548 <fifo_put>

	/* warten bis der Sendepuffer leer ist */
	while ( !( UCSR0A & (1<<UDRE0)) );
 4a4:	e0 ec       	ldi	r30, 0xC0	; 192
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	88 2f       	mov	r24, r24
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	80 72       	andi	r24, 0x20	; 32
 4b0:	90 70       	andi	r25, 0x00	; 0
 4b2:	00 97       	sbiw	r24, 0x00	; 0
 4b4:	b9 f3       	breq	.-18     	; 0x4a4 <__vector_18+0x3e>
		
	/* ECHO und gleich wieder zurück schicken */
	//UDR = buffer;
}
 4b6:	0f 90       	pop	r0
 4b8:	cf 91       	pop	r28
 4ba:	df 91       	pop	r29
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	7f 91       	pop	r23
 4ca:	6f 91       	pop	r22
 4cc:	5f 91       	pop	r21
 4ce:	4f 91       	pop	r20
 4d0:	3f 91       	pop	r19
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <fifo_init>:
* fifo_t fifo;
* fifo_init (&fifo, buffer, BUF_SIZE);
* \endcode
***************************************************************************/
void fifo_init (fifo_t *f, uint8_t *buffer, const uint8_t size)
{
 4de:	df 93       	push	r29
 4e0:	cf 93       	push	r28
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <fifo_init+0x6>
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <fifo_init+0x8>
 4e6:	0f 92       	push	r0
 4e8:	cd b7       	in	r28, 0x3d	; 61
 4ea:	de b7       	in	r29, 0x3e	; 62
 4ec:	9a 83       	std	Y+2, r25	; 0x02
 4ee:	89 83       	std	Y+1, r24	; 0x01
 4f0:	7c 83       	std	Y+4, r23	; 0x04
 4f2:	6b 83       	std	Y+3, r22	; 0x03
 4f4:	4d 83       	std	Y+5, r20	; 0x05
	f->count = 0;		// kein Eintrag im Puffer
 4f6:	e9 81       	ldd	r30, Y+1	; 0x01
 4f8:	fa 81       	ldd	r31, Y+2	; 0x02
 4fa:	10 82       	st	Z, r1
	f->pread = f->pwrite = buffer;	// lessezeiger auf Anfang setzen
 4fc:	e9 81       	ldd	r30, Y+1	; 0x01
 4fe:	fa 81       	ldd	r31, Y+2	; 0x02
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	9c 81       	ldd	r25, Y+4	; 0x04
 504:	95 83       	std	Z+5, r25	; 0x05
 506:	84 83       	std	Z+4, r24	; 0x04
 508:	e9 81       	ldd	r30, Y+1	; 0x01
 50a:	fa 81       	ldd	r31, Y+2	; 0x02
 50c:	84 81       	ldd	r24, Z+4	; 0x04
 50e:	95 81       	ldd	r25, Z+5	; 0x05
 510:	e9 81       	ldd	r30, Y+1	; 0x01
 512:	fa 81       	ldd	r31, Y+2	; 0x02
 514:	93 83       	std	Z+3, r25	; 0x03
 516:	82 83       	std	Z+2, r24	; 0x02
	f->read2end = f->write2end = f->size = size;	// schreibzeiger auf anfang setzen
 518:	e9 81       	ldd	r30, Y+1	; 0x01
 51a:	fa 81       	ldd	r31, Y+2	; 0x02
 51c:	8d 81       	ldd	r24, Y+5	; 0x05
 51e:	81 83       	std	Z+1, r24	; 0x01
 520:	e9 81       	ldd	r30, Y+1	; 0x01
 522:	fa 81       	ldd	r31, Y+2	; 0x02
 524:	81 81       	ldd	r24, Z+1	; 0x01
 526:	e9 81       	ldd	r30, Y+1	; 0x01
 528:	fa 81       	ldd	r31, Y+2	; 0x02
 52a:	87 83       	std	Z+7, r24	; 0x07
 52c:	e9 81       	ldd	r30, Y+1	; 0x01
 52e:	fa 81       	ldd	r31, Y+2	; 0x02
 530:	87 81       	ldd	r24, Z+7	; 0x07
 532:	e9 81       	ldd	r30, Y+1	; 0x01
 534:	fa 81       	ldd	r31, Y+2	; 0x02
 536:	86 83       	std	Z+6, r24	; 0x06
}
 538:	0f 90       	pop	r0
 53a:	0f 90       	pop	r0
 53c:	0f 90       	pop	r0
 53e:	0f 90       	pop	r0
 540:	0f 90       	pop	r0
 542:	cf 91       	pop	r28
 544:	df 91       	pop	r29
 546:	08 95       	ret

00000548 <fifo_put>:
*
*			Schreibt das Byte data in die FIFO. Liefert 1 bei Erfolg und 
*			0, falls die FIFO voll ist.
***************************************************************************/
uint8_t fifo_put (fifo_t *f, const uint8_t data)
{
 548:	df 93       	push	r29
 54a:	cf 93       	push	r28
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
 550:	28 97       	sbiw	r28, 0x08	; 8
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	f8 94       	cli
 556:	de bf       	out	0x3e, r29	; 62
 558:	0f be       	out	0x3f, r0	; 63
 55a:	cd bf       	out	0x3d, r28	; 61
 55c:	9e 83       	std	Y+6, r25	; 0x06
 55e:	8d 83       	std	Y+5, r24	; 0x05
 560:	6f 83       	std	Y+7, r22	; 0x07
	if (f->count >= f->size)
 562:	ed 81       	ldd	r30, Y+5	; 0x05
 564:	fe 81       	ldd	r31, Y+6	; 0x06
 566:	90 81       	ld	r25, Z
 568:	ed 81       	ldd	r30, Y+5	; 0x05
 56a:	fe 81       	ldd	r31, Y+6	; 0x06
 56c:	81 81       	ldd	r24, Z+1	; 0x01
 56e:	98 17       	cp	r25, r24
 570:	10 f0       	brcs	.+4      	; 0x576 <fifo_put+0x2e>
		return 0;
 572:	18 86       	std	Y+8, r1	; 0x08
 574:	46 c0       	rjmp	.+140    	; 0x602 <fifo_put+0xba>
		
	uint8_t sreg = SREG;
 576:	ef e5       	ldi	r30, 0x5F	; 95
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	8c 83       	std	Y+4, r24	; 0x04
	cli();
 57e:	f8 94       	cli
	
	uint8_t * pwrite = f->pwrite;
 580:	ed 81       	ldd	r30, Y+5	; 0x05
 582:	fe 81       	ldd	r31, Y+6	; 0x06
 584:	84 81       	ldd	r24, Z+4	; 0x04
 586:	95 81       	ldd	r25, Z+5	; 0x05
 588:	9b 83       	std	Y+3, r25	; 0x03
 58a:	8a 83       	std	Y+2, r24	; 0x02
	
	*(pwrite++) = data;
 58c:	ea 81       	ldd	r30, Y+2	; 0x02
 58e:	fb 81       	ldd	r31, Y+3	; 0x03
 590:	8f 81       	ldd	r24, Y+7	; 0x07
 592:	80 83       	st	Z, r24
 594:	8a 81       	ldd	r24, Y+2	; 0x02
 596:	9b 81       	ldd	r25, Y+3	; 0x03
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	9b 83       	std	Y+3, r25	; 0x03
 59c:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t write2end = f->write2end;
 59e:	ed 81       	ldd	r30, Y+5	; 0x05
 5a0:	fe 81       	ldd	r31, Y+6	; 0x06
 5a2:	87 81       	ldd	r24, Z+7	; 0x07
 5a4:	89 83       	std	Y+1, r24	; 0x01
	
	if (--write2end == 0)
 5a6:	89 81       	ldd	r24, Y+1	; 0x01
 5a8:	81 50       	subi	r24, 0x01	; 1
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	89 81       	ldd	r24, Y+1	; 0x01
 5ae:	88 23       	and	r24, r24
 5b0:	89 f4       	brne	.+34     	; 0x5d4 <fifo_put+0x8c>
	{
		write2end = f->size;
 5b2:	ed 81       	ldd	r30, Y+5	; 0x05
 5b4:	fe 81       	ldd	r31, Y+6	; 0x06
 5b6:	81 81       	ldd	r24, Z+1	; 0x01
 5b8:	89 83       	std	Y+1, r24	; 0x01
		pwrite -= write2end;
 5ba:	89 81       	ldd	r24, Y+1	; 0x01
 5bc:	88 2f       	mov	r24, r24
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	22 27       	eor	r18, r18
 5c2:	33 27       	eor	r19, r19
 5c4:	28 1b       	sub	r18, r24
 5c6:	39 0b       	sbc	r19, r25
 5c8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ca:	9b 81       	ldd	r25, Y+3	; 0x03
 5cc:	82 0f       	add	r24, r18
 5ce:	93 1f       	adc	r25, r19
 5d0:	9b 83       	std	Y+3, r25	; 0x03
 5d2:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	f->write2end = write2end;
 5d4:	ed 81       	ldd	r30, Y+5	; 0x05
 5d6:	fe 81       	ldd	r31, Y+6	; 0x06
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	87 83       	std	Z+7, r24	; 0x07
	f->pwrite = pwrite;
 5dc:	ed 81       	ldd	r30, Y+5	; 0x05
 5de:	fe 81       	ldd	r31, Y+6	; 0x06
 5e0:	8a 81       	ldd	r24, Y+2	; 0x02
 5e2:	9b 81       	ldd	r25, Y+3	; 0x03
 5e4:	95 83       	std	Z+5, r25	; 0x05
 5e6:	84 83       	std	Z+4, r24	; 0x04


	f->count++;
 5e8:	ed 81       	ldd	r30, Y+5	; 0x05
 5ea:	fe 81       	ldd	r31, Y+6	; 0x06
 5ec:	80 81       	ld	r24, Z
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	ed 81       	ldd	r30, Y+5	; 0x05
 5f2:	fe 81       	ldd	r31, Y+6	; 0x06
 5f4:	80 83       	st	Z, r24
	SREG = sreg;
 5f6:	ef e5       	ldi	r30, 0x5F	; 95
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	8c 81       	ldd	r24, Y+4	; 0x04
 5fc:	80 83       	st	Z, r24
	
	return 1;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	88 87       	std	Y+8, r24	; 0x08
 602:	88 85       	ldd	r24, Y+8	; 0x08
}
 604:	28 96       	adiw	r28, 0x08	; 8
 606:	0f b6       	in	r0, 0x3f	; 63
 608:	f8 94       	cli
 60a:	de bf       	out	0x3e, r29	; 62
 60c:	0f be       	out	0x3f, r0	; 63
 60e:	cd bf       	out	0x3d, r28	; 61
 610:	cf 91       	pop	r28
 612:	df 91       	pop	r29
 614:	08 95       	ret

00000616 <fifo_get>:
*
* 		Schreibt in data das nächste Byte aus der FIFO.
*			Liefrt 1 bei Erfolg und 0 falls die FIFO leer ist.
***************************************************************************/
uint8_t fifo_get (fifo_t *f, uint8_t *data)
{
 616:	df 93       	push	r29
 618:	cf 93       	push	r28
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	29 97       	sbiw	r28, 0x09	; 9
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	9e 83       	std	Y+6, r25	; 0x06
 62c:	8d 83       	std	Y+5, r24	; 0x05
 62e:	78 87       	std	Y+8, r23	; 0x08
 630:	6f 83       	std	Y+7, r22	; 0x07
	if (!f->count)		return 1;
 632:	ed 81       	ldd	r30, Y+5	; 0x05
 634:	fe 81       	ldd	r31, Y+6	; 0x06
 636:	80 81       	ld	r24, Z
 638:	88 23       	and	r24, r24
 63a:	19 f4       	brne	.+6      	; 0x642 <fifo_get+0x2c>
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	89 87       	std	Y+9, r24	; 0x09
 640:	47 c0       	rjmp	.+142    	; 0x6d0 <fifo_get+0xba>
	
	uint8_t sreg = SREG;				// Interruptregister speichern
 642:	ef e5       	ldi	r30, 0x5F	; 95
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	8c 83       	std	Y+4, r24	; 0x04
	cli();											// Interrupts verbieten (atomarer code)
 64a:	f8 94       	cli
	
	uint8_t *pread = f->pread;	// lesezeiger speichern
 64c:	ed 81       	ldd	r30, Y+5	; 0x05
 64e:	fe 81       	ldd	r31, Y+6	; 0x06
 650:	82 81       	ldd	r24, Z+2	; 0x02
 652:	93 81       	ldd	r25, Z+3	; 0x03
 654:	9b 83       	std	Y+3, r25	; 0x03
 656:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t read2end = f->read2end;	// Einträge bis Bufferende
 658:	ed 81       	ldd	r30, Y+5	; 0x05
 65a:	fe 81       	ldd	r31, Y+6	; 0x06
 65c:	86 81       	ldd	r24, Z+6	; 0x06
 65e:	89 83       	std	Y+1, r24	; 0x01
	*data = *(pread++);				// daten auslesen
 660:	ea 81       	ldd	r30, Y+2	; 0x02
 662:	fb 81       	ldd	r31, Y+3	; 0x03
 664:	80 81       	ld	r24, Z
 666:	ef 81       	ldd	r30, Y+7	; 0x07
 668:	f8 85       	ldd	r31, Y+8	; 0x08
 66a:	80 83       	st	Z, r24
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	9b 81       	ldd	r25, Y+3	; 0x03
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	9b 83       	std	Y+3, r25	; 0x03
 674:	8a 83       	std	Y+2, r24	; 0x02
	
	if (--read2end == 0)				// Zeiger hat ende erreicht
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	81 50       	subi	r24, 0x01	; 1
 67a:	89 83       	std	Y+1, r24	; 0x01
 67c:	89 81       	ldd	r24, Y+1	; 0x01
 67e:	88 23       	and	r24, r24
 680:	89 f4       	brne	.+34     	; 0x6a4 <fifo_get+0x8e>
	{
		read2end = f->size;				// noch size einträge bis bufferende
 682:	ed 81       	ldd	r30, Y+5	; 0x05
 684:	fe 81       	ldd	r31, Y+6	; 0x06
 686:	81 81       	ldd	r24, Z+1	; 0x01
 688:	89 83       	std	Y+1, r24	; 0x01
		pread -= read2end;				// lese Zeiger beginnt von vorn
 68a:	89 81       	ldd	r24, Y+1	; 0x01
 68c:	88 2f       	mov	r24, r24
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	22 27       	eor	r18, r18
 692:	33 27       	eor	r19, r19
 694:	28 1b       	sub	r18, r24
 696:	39 0b       	sbc	r19, r25
 698:	8a 81       	ldd	r24, Y+2	; 0x02
 69a:	9b 81       	ldd	r25, Y+3	; 0x03
 69c:	82 0f       	add	r24, r18
 69e:	93 1f       	adc	r25, r19
 6a0:	9b 83       	std	Y+3, r25	; 0x03
 6a2:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	f->pread = pread;						// speichern des neuen Lesezeigers
 6a4:	ed 81       	ldd	r30, Y+5	; 0x05
 6a6:	fe 81       	ldd	r31, Y+6	; 0x06
 6a8:	8a 81       	ldd	r24, Y+2	; 0x02
 6aa:	9b 81       	ldd	r25, Y+3	; 0x03
 6ac:	93 83       	std	Z+3, r25	; 0x03
 6ae:	82 83       	std	Z+2, r24	; 0x02
	f->read2end = read2end;			// anzahl der einträge bis bufferende
 6b0:	ed 81       	ldd	r30, Y+5	; 0x05
 6b2:	fe 81       	ldd	r31, Y+6	; 0x06
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	86 83       	std	Z+6, r24	; 0x06

	f->count--;									// ein Eintrag weniger im Buffer
 6b8:	ed 81       	ldd	r30, Y+5	; 0x05
 6ba:	fe 81       	ldd	r31, Y+6	; 0x06
 6bc:	80 81       	ld	r24, Z
 6be:	81 50       	subi	r24, 0x01	; 1
 6c0:	ed 81       	ldd	r30, Y+5	; 0x05
 6c2:	fe 81       	ldd	r31, Y+6	; 0x06
 6c4:	80 83       	st	Z, r24
	SREG = sreg;								// Interrupts wiederherstellen
 6c6:	ef e5       	ldi	r30, 0x5F	; 95
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	8c 81       	ldd	r24, Y+4	; 0x04
 6cc:	80 83       	st	Z, r24

	return 0;
 6ce:	19 86       	std	Y+9, r1	; 0x09
 6d0:	89 85       	ldd	r24, Y+9	; 0x09
}
 6d2:	29 96       	adiw	r28, 0x09	; 9
 6d4:	0f b6       	in	r0, 0x3f	; 63
 6d6:	f8 94       	cli
 6d8:	de bf       	out	0x3e, r29	; 62
 6da:	0f be       	out	0x3f, r0	; 63
 6dc:	cd bf       	out	0x3d, r28	; 61
 6de:	cf 91       	pop	r28
 6e0:	df 91       	pop	r29
 6e2:	08 95       	ret

000006e4 <timer2_init>:
  \return
  nichts

*****************************************************************************/
void timer2_init(void)
{
 6e4:	df 93       	push	r29
 6e6:	cf 93       	push	r28
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62

	/* Interrupts für Timer2 aktivieren */	
	//TIMSK |= (1<<TOIE2);


}	
 6ec:	cf 91       	pop	r28
 6ee:	df 91       	pop	r29
 6f0:	08 95       	ret

000006f2 <Gettime>:
    }
  }
  \endcode
*****************************************************************************/
unsigned long Gettime (void)
{
 6f2:	df 93       	push	r29
 6f4:	cf 93       	push	r28
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
  return ((timebase * 256) + count36kHz) / 36;
 6fa:	80 91 96 01 	lds	r24, 0x0196
 6fe:	90 91 97 01 	lds	r25, 0x0197
 702:	a0 91 98 01 	lds	r26, 0x0198
 706:	b0 91 99 01 	lds	r27, 0x0199
 70a:	22 27       	eor	r18, r18
 70c:	38 2f       	mov	r19, r24
 70e:	49 2f       	mov	r20, r25
 710:	5a 2f       	mov	r21, r26
 712:	80 91 95 01 	lds	r24, 0x0195
 716:	88 2f       	mov	r24, r24
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	a0 e0       	ldi	r26, 0x00	; 0
 71c:	b0 e0       	ldi	r27, 0x00	; 0
 71e:	82 0f       	add	r24, r18
 720:	93 1f       	adc	r25, r19
 722:	a4 1f       	adc	r26, r20
 724:	b5 1f       	adc	r27, r21
 726:	24 e2       	ldi	r18, 0x24	; 36
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	40 e0       	ldi	r20, 0x00	; 0
 72c:	50 e0       	ldi	r21, 0x00	; 0
 72e:	bc 01       	movw	r22, r24
 730:	cd 01       	movw	r24, r26
 732:	0e 94 48 04 	call	0x890	; 0x890 <__udivmodsi4>
 736:	da 01       	movw	r26, r20
 738:	c9 01       	movw	r24, r18
}
 73a:	bc 01       	movw	r22, r24
 73c:	cd 01       	movw	r24, r26
 73e:	cf 91       	pop	r28
 740:	df 91       	pop	r29
 742:	08 95       	ret

00000744 <sleep>:
  // 1 Millisekunde warten
  Sleep (36);
  \endcode
*****************************************************************************/
void sleep ( unsigned char time36kHz)
{
 744:	df 93       	push	r29
 746:	cf 93       	push	r28
 748:	00 d0       	rcall	.+0      	; 0x74a <sleep+0x6>
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	8a 83       	std	Y+2, r24	; 0x02
  unsigned char ziel = (time36kHz + count36kHz) & 0x00FF;
 750:	80 91 95 01 	lds	r24, 0x0195
 754:	9a 81       	ldd	r25, Y+2	; 0x02
 756:	89 0f       	add	r24, r25
 758:	89 83       	std	Y+1, r24	; 0x01

  while (count36kHz != ziel)
 75a:	90 91 95 01 	lds	r25, 0x0195
 75e:	89 81       	ldd	r24, Y+1	; 0x01
 760:	98 17       	cp	r25, r24
 762:	d9 f7       	brne	.-10     	; 0x75a <sleep+0x16>
    ;
}
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	cf 91       	pop	r28
 76a:	df 91       	pop	r29
 76c:	08 95       	ret

0000076e <msleep>:
  // 1.5 Sekunde warten
  Msleep (1500);
  \endcode
*****************************************************************************/
void msleep (int dauer)
{
 76e:	df 93       	push	r29
 770:	cf 93       	push	r28
 772:	00 d0       	rcall	.+0      	; 0x774 <msleep+0x6>
 774:	00 d0       	rcall	.+0      	; 0x776 <msleep+0x8>
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
 77a:	9c 83       	std	Y+4, r25	; 0x04
 77c:	8b 83       	std	Y+3, r24	; 0x03
  int z;
  for (z = 0; z < dauer; z++)	// z-mal ..
 77e:	1a 82       	std	Y+2, r1	; 0x02
 780:	19 82       	std	Y+1, r1	; 0x01
 782:	08 c0       	rjmp	.+16     	; 0x794 <msleep+0x26>
    sleep (36);					// ..eine ms warten
 784:	84 e2       	ldi	r24, 0x24	; 36
 786:	0e 94 a2 03 	call	0x744	; 0x744 <sleep>
  \endcode
*****************************************************************************/
void msleep (int dauer)
{
  int z;
  for (z = 0; z < dauer; z++)	// z-mal ..
 78a:	89 81       	ldd	r24, Y+1	; 0x01
 78c:	9a 81       	ldd	r25, Y+2	; 0x02
 78e:	01 96       	adiw	r24, 0x01	; 1
 790:	9a 83       	std	Y+2, r25	; 0x02
 792:	89 83       	std	Y+1, r24	; 0x01
 794:	29 81       	ldd	r18, Y+1	; 0x01
 796:	3a 81       	ldd	r19, Y+2	; 0x02
 798:	8b 81       	ldd	r24, Y+3	; 0x03
 79a:	9c 81       	ldd	r25, Y+4	; 0x04
 79c:	28 17       	cp	r18, r24
 79e:	39 07       	cpc	r19, r25
 7a0:	8c f3       	brlt	.-30     	; 0x784 <msleep+0x16>
    sleep (36);					// ..eine ms warten
}
 7a2:	0f 90       	pop	r0
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	0f 90       	pop	r0
 7aa:	cf 91       	pop	r28
 7ac:	df 91       	pop	r29
 7ae:	08 95       	ret

000007b0 <__vector_9>:
  gewuenschten 36 kHz erreicht werden.\n
  Fuer die Zeitfunktionen werden die globalen Variablen count36kHz und\n
  timebase hochgezaehlt.
*****************************************************************************/
ISR(TIMER2_OVF_vect) /* veraltet: SIGNAL(SIG_OVERFLOW1) */
{
 7b0:	1f 92       	push	r1
 7b2:	0f 92       	push	r0
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	0f 92       	push	r0
 7b8:	11 24       	eor	r1, r1
 7ba:	8f 93       	push	r24
 7bc:	9f 93       	push	r25
 7be:	af 93       	push	r26
 7c0:	bf 93       	push	r27
 7c2:	ef 93       	push	r30
 7c4:	ff 93       	push	r31
 7c6:	df 93       	push	r29
 7c8:	cf 93       	push	r28
 7ca:	cd b7       	in	r28, 0x3d	; 61
 7cc:	de b7       	in	r29, 0x3e	; 62
    /* erhöht den Wert des Timers um Ihn alle 36kHz überlaufen zu lassen */
	TCNT2 += 0x20;
 7ce:	a2 eb       	ldi	r26, 0xB2	; 178
 7d0:	b0 e0       	ldi	r27, 0x00	; 0
 7d2:	e2 eb       	ldi	r30, 0xB2	; 178
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	80 81       	ld	r24, Z
 7d8:	80 5e       	subi	r24, 0xE0	; 224
 7da:	8c 93       	st	X, r24
	
	/* Globalen counter erhöhen */
	count36kHz++;
 7dc:	80 91 95 01 	lds	r24, 0x0195
 7e0:	8f 5f       	subi	r24, 0xFF	; 255
 7e2:	80 93 95 01 	sts	0x0195, r24
	
	/* beim Überlauf globale Zeit erhöhen */
	if(!count36kHz){
 7e6:	80 91 95 01 	lds	r24, 0x0195
 7ea:	88 23       	and	r24, r24
 7ec:	99 f4       	brne	.+38     	; 0x814 <__vector_9+0x64>
		timebase++;
 7ee:	80 91 96 01 	lds	r24, 0x0196
 7f2:	90 91 97 01 	lds	r25, 0x0197
 7f6:	a0 91 98 01 	lds	r26, 0x0198
 7fa:	b0 91 99 01 	lds	r27, 0x0199
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	a1 1d       	adc	r26, r1
 802:	b1 1d       	adc	r27, r1
 804:	80 93 96 01 	sts	0x0196, r24
 808:	90 93 97 01 	sts	0x0197, r25
 80c:	a0 93 98 01 	sts	0x0198, r26
 810:	b0 93 99 01 	sts	0x0199, r27
	}
}
 814:	cf 91       	pop	r28
 816:	df 91       	pop	r29
 818:	ff 91       	pop	r31
 81a:	ef 91       	pop	r30
 81c:	bf 91       	pop	r27
 81e:	af 91       	pop	r26
 820:	9f 91       	pop	r25
 822:	8f 91       	pop	r24
 824:	0f 90       	pop	r0
 826:	0f be       	out	0x3f, r0	; 63
 828:	0f 90       	pop	r0
 82a:	1f 90       	pop	r1
 82c:	18 95       	reti

0000082e <itoa>:
 82e:	fb 01       	movw	r30, r22
 830:	9f 01       	movw	r18, r30
 832:	e8 94       	clt
 834:	42 30       	cpi	r20, 0x02	; 2
 836:	c4 f0       	brlt	.+48     	; 0x868 <itoa+0x3a>
 838:	45 32       	cpi	r20, 0x25	; 37
 83a:	b4 f4       	brge	.+44     	; 0x868 <itoa+0x3a>
 83c:	4a 30       	cpi	r20, 0x0A	; 10
 83e:	29 f4       	brne	.+10     	; 0x84a <itoa+0x1c>
 840:	97 fb       	bst	r25, 7
 842:	1e f4       	brtc	.+6      	; 0x84a <itoa+0x1c>
 844:	90 95       	com	r25
 846:	81 95       	neg	r24
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	64 2f       	mov	r22, r20
 84c:	77 27       	eor	r23, r23
 84e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__udivmodhi4>
 852:	80 5d       	subi	r24, 0xD0	; 208
 854:	8a 33       	cpi	r24, 0x3A	; 58
 856:	0c f0       	brlt	.+2      	; 0x85a <itoa+0x2c>
 858:	89 5d       	subi	r24, 0xD9	; 217
 85a:	81 93       	st	Z+, r24
 85c:	cb 01       	movw	r24, r22
 85e:	00 97       	sbiw	r24, 0x00	; 0
 860:	a1 f7       	brne	.-24     	; 0x84a <itoa+0x1c>
 862:	16 f4       	brtc	.+4      	; 0x868 <itoa+0x3a>
 864:	5d e2       	ldi	r21, 0x2D	; 45
 866:	51 93       	st	Z+, r21
 868:	10 82       	st	Z, r1
 86a:	c9 01       	movw	r24, r18
 86c:	0c 94 38 04 	jmp	0x870	; 0x870 <strrev>

00000870 <strrev>:
 870:	dc 01       	movw	r26, r24
 872:	fc 01       	movw	r30, r24
 874:	67 2f       	mov	r22, r23
 876:	71 91       	ld	r23, Z+
 878:	77 23       	and	r23, r23
 87a:	e1 f7       	brne	.-8      	; 0x874 <strrev+0x4>
 87c:	32 97       	sbiw	r30, 0x02	; 2
 87e:	04 c0       	rjmp	.+8      	; 0x888 <strrev+0x18>
 880:	7c 91       	ld	r23, X
 882:	6d 93       	st	X+, r22
 884:	70 83       	st	Z, r23
 886:	62 91       	ld	r22, -Z
 888:	ae 17       	cp	r26, r30
 88a:	bf 07       	cpc	r27, r31
 88c:	c8 f3       	brcs	.-14     	; 0x880 <strrev+0x10>
 88e:	08 95       	ret

00000890 <__udivmodsi4>:
 890:	a1 e2       	ldi	r26, 0x21	; 33
 892:	1a 2e       	mov	r1, r26
 894:	aa 1b       	sub	r26, r26
 896:	bb 1b       	sub	r27, r27
 898:	fd 01       	movw	r30, r26
 89a:	0d c0       	rjmp	.+26     	; 0x8b6 <__udivmodsi4_ep>

0000089c <__udivmodsi4_loop>:
 89c:	aa 1f       	adc	r26, r26
 89e:	bb 1f       	adc	r27, r27
 8a0:	ee 1f       	adc	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	a2 17       	cp	r26, r18
 8a6:	b3 07       	cpc	r27, r19
 8a8:	e4 07       	cpc	r30, r20
 8aa:	f5 07       	cpc	r31, r21
 8ac:	20 f0       	brcs	.+8      	; 0x8b6 <__udivmodsi4_ep>
 8ae:	a2 1b       	sub	r26, r18
 8b0:	b3 0b       	sbc	r27, r19
 8b2:	e4 0b       	sbc	r30, r20
 8b4:	f5 0b       	sbc	r31, r21

000008b6 <__udivmodsi4_ep>:
 8b6:	66 1f       	adc	r22, r22
 8b8:	77 1f       	adc	r23, r23
 8ba:	88 1f       	adc	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	1a 94       	dec	r1
 8c0:	69 f7       	brne	.-38     	; 0x89c <__udivmodsi4_loop>
 8c2:	60 95       	com	r22
 8c4:	70 95       	com	r23
 8c6:	80 95       	com	r24
 8c8:	90 95       	com	r25
 8ca:	9b 01       	movw	r18, r22
 8cc:	ac 01       	movw	r20, r24
 8ce:	bd 01       	movw	r22, r26
 8d0:	cf 01       	movw	r24, r30
 8d2:	08 95       	ret

000008d4 <__udivmodhi4>:
 8d4:	aa 1b       	sub	r26, r26
 8d6:	bb 1b       	sub	r27, r27
 8d8:	51 e1       	ldi	r21, 0x11	; 17
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <__udivmodhi4_ep>

000008dc <__udivmodhi4_loop>:
 8dc:	aa 1f       	adc	r26, r26
 8de:	bb 1f       	adc	r27, r27
 8e0:	a6 17       	cp	r26, r22
 8e2:	b7 07       	cpc	r27, r23
 8e4:	10 f0       	brcs	.+4      	; 0x8ea <__udivmodhi4_ep>
 8e6:	a6 1b       	sub	r26, r22
 8e8:	b7 0b       	sbc	r27, r23

000008ea <__udivmodhi4_ep>:
 8ea:	88 1f       	adc	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	5a 95       	dec	r21
 8f0:	a9 f7       	brne	.-22     	; 0x8dc <__udivmodhi4_loop>
 8f2:	80 95       	com	r24
 8f4:	90 95       	com	r25
 8f6:	bc 01       	movw	r22, r24
 8f8:	cd 01       	movw	r24, r26
 8fa:	08 95       	ret

000008fc <_exit>:
 8fc:	f8 94       	cli

000008fe <__stop_program>:
 8fe:	ff cf       	rjmp	.-2      	; 0x8fe <__stop_program>
